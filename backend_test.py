#!/usr/bin/env python3
"""
Test complet du backend apr√®s la cr√©ation et correction orthographique de la section "nourriture"
Comprehensive backend testing after creation and spelling corrections of the "nourriture" section

Test Requirements from French review request:
1. V√©rification de la nouvelle section "nourriture" (44 mots attendus)
2. Test de l'orthographe corrig√©e pour des mots sp√©cifiques:
   - "riz" ‚Üí shimaor√©: "tsohol√©", kibouchi: "vari"
   - "sel" ‚Üí shimaor√©: "ching√≥" (avec accent), kibouchi: "sira"
   - "gingembre" ‚Üí shimaor√©: "tsingiziou", kibouchi: "sakƒóyi"
   - "ciboulette" ‚Üí shimaor√©: "chourougnou mani", kibouchi: "doungoulou ravigni"
3. Test des nouveaux aliments complexes:
   - "br√®de manioc" ‚Üí shimaor√©: "mataba", kibouchi: "f√©liki mouhogou"
   - "riz au coco" ‚Üí shimaor√©: "tsohol√© ya nadzi", kibouchi: "vari an voiniou"
   - "noix de coco fra√Æche" ‚Üí shimaor√©: "chijavou", kibouchi: "kidjavou"
4. Test de l'int√©grit√© des donn√©es (emojis appropri√©s, r√©f√©rences audio, pas de doublons)
5. Test que les autres sections n'ont pas √©t√© affect√©es
6. Test que le total de mots a augment√© de 44
7. Test de l'endpoint API `/api/words?category=nourriture`
"""

import requests
import json
import sys
from typing import Dict, List, Any, Optional
import time
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get backend URL from frontend .env file
FRONTEND_ENV_PATH = "/app/frontend/.env"
BACKEND_URL = None

try:
    with open(FRONTEND_ENV_PATH, 'r') as f:
        for line in f:
            if line.startswith('EXPO_PUBLIC_BACKEND_URL='):
                BACKEND_URL = line.split('=')[1].strip()
                break
except:
    pass

if not BACKEND_URL:
    BACKEND_URL = "https://shimao-game.preview.emergentagent.com"

API_URL = f"{BACKEND_URL}/api"
print(f"üîó Using Backend URL: {BACKEND_URL}")

class NourritureSectionTester:
    def __init__(self):
        self.api_url = API_URL
        self.test_results = []
        self.total_tests = 0
        self.passed_tests = 0
        self.nourriture_words = []
        self.total_words_count = 0
        
    def log_test(self, test_name: str, passed: bool, details: str = ""):
        """Log test result"""
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            status = "‚úÖ PASS"
        else:
            status = "‚ùå FAIL"
        
        result = f"{status}: {test_name}"
        if details:
            result += f" - {details}"
        
        self.test_results.append(result)
        print(result)
        
    def make_request(self, endpoint: str, method: str = "GET", data: Dict = None) -> Dict:
        """Make HTTP request to backend"""
        url = f"{self.api_url}{endpoint}"
        try:
            if method == "GET":
                response = requests.get(url, timeout=10)
            elif method == "POST":
                response = requests.post(url, json=data, timeout=10)
            elif method == "PUT":
                response = requests.put(url, json=data, timeout=10)
            elif method == "DELETE":
                response = requests.delete(url, timeout=10)
            
            return {
                "status_code": response.status_code,
                "data": response.json() if response.content else {},
                "success": response.status_code < 400
            }
        except Exception as e:
            return {
                "status_code": 0,
                "data": {"error": str(e)},
                "success": False
            }

    def test_1_api_connectivity(self):
        """Test 1: V√©rifier la connectivit√© de l'API"""
        print("\n=== TEST 1: CONNECTIVIT√â API ===")
        try:
            response = requests.get(f"{BACKEND_URL}/", timeout=10)
            if response.status_code == 200:
                self.log_test("API Connectivity", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("API Connectivity", False, f"Status: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("API Connectivity", False, f"Error: {str(e)}")
            return False
    
    def test_2_nourriture_section_exists(self):
        """Test 2: V√©rification que la section nourriture existe"""
        print("\n=== TEST 2: V√âRIFICATION SECTION NOURRITURE ===")
        
        try:
            response = self.make_request("/words?category=nourriture")
            if response["success"]:
                self.nourriture_words = response["data"]
                count = len(self.nourriture_words)
                self.log_test("Section nourriture existe", count > 0, f"{count} mots trouv√©s")
                return count > 0
            else:
                self.log_test("Section nourriture existe", False, f"Status: {response['status_code']}")
                return False
        except Exception as e:
            self.log_test("Section nourriture existe", False, f"Error: {str(e)}")
            return False
    
    def test_3_44_words_added(self):
        """Test 3: V√©rification que 44 mots ont √©t√© ajout√©s"""
        print("\n=== TEST 3: V√âRIFICATION 44 MOTS AJOUT√âS ===")
        
        expected_count = 44
        actual_count = len(self.nourriture_words)
        
        self.log_test("44 mots ajout√©s", actual_count == expected_count, 
                     f"Attendu: {expected_count}, Trouv√©: {actual_count}")
        
        return actual_count == expected_count
    
    def test_4_data_structure(self):
        """Test 4: V√©rification de la structure des donn√©es"""
        print("\n=== TEST 4: STRUCTURE DES DONN√âES ===")
        
        if not self.nourriture_words:
            self.log_test("Structure des donn√©es", False, "Aucun mot √† tester")
            return False
        
        required_fields = ['french', 'shimaore', 'kibouchi', 'category']
        complete_words = 0
        words_with_emojis = 0
        
        for word in self.nourriture_words:
            # Check required fields
            has_all_fields = all(field in word and word[field] for field in required_fields)
            if has_all_fields:
                complete_words += 1
            
            # Check for emoji (in image_url field)
            if 'image_url' in word and word['image_url']:
                words_with_emojis += 1
        
        structure_percentage = (complete_words / len(self.nourriture_words)) * 100
        emoji_percentage = (words_with_emojis / len(self.nourriture_words)) * 100
        
        self.log_test("Structure compl√®te", structure_percentage >= 95,
                     f"{complete_words}/{len(self.nourriture_words)} mots avec structure compl√®te ({structure_percentage:.1f}%)")
        
        self.log_test("Emojis pr√©sents", emoji_percentage >= 80,
                     f"{words_with_emojis}/{len(self.nourriture_words)} mots avec emojis ({emoji_percentage:.1f}%)")
        
        return structure_percentage >= 95
    
    def test_5_corrected_spellings(self):
        """Test 5: Test de l'orthographe corrig√©e pour des mots sp√©cifiques"""
        print("\n=== TEST 5: ORTHOGRAPHE CORRIG√âE ===")
        
        test_words = {
            "riz": {"shimaore": "tsohol√©", "kibouchi": "vari"},
            "sel": {"shimaore": "ching√≥", "kibouchi": "sira"},
            "gingembre": {"shimaore": "tsingiziou", "kibouchi": "sakƒóyi"},
            "ciboulette": {"shimaore": "chourougnou mani", "kibouchi": "doungoulou ravigni"}
        }
        
        word_dict = {word['french'].lower(): word for word in self.nourriture_words}
        
        for french_word, expected_translations in test_words.items():
            if french_word in word_dict:
                word = word_dict[french_word]
                shimaore_match = expected_translations["shimaore"].lower() in word['shimaore'].lower()
                kibouchi_match = expected_translations["kibouchi"].lower() in word['kibouchi'].lower()
                
                self.log_test(f"Orthographe corrig√©e: {french_word}", 
                             shimaore_match and kibouchi_match,
                             f"Shimaor√©: {word['shimaore']}, Kibouchi: {word['kibouchi']}")
            else:
                self.log_test(f"Orthographe corrig√©e: {french_word}", False, "Mot non trouv√©")
    
    def test_6_complex_new_foods(self):
        """Test 6: Test des nouveaux aliments complexes"""
        print("\n=== TEST 6: NOUVEAUX ALIMENTS COMPLEXES ===")
        
        complex_foods = {
            "br√®de manioc": {"shimaore": "mataba", "kibouchi": "f√©liki mouhogou"},
            "riz au coco": {"shimaore": "tsohol√© ya nadzi", "kibouchi": "vari an voiniou"},
            "noix de coco fra√Æche": {"shimaore": "chijavou", "kibouchi": "kidjavou"}
        }
        
        word_dict = {word['french'].lower(): word for word in self.nourriture_words}
        
        for french_word, expected_translations in complex_foods.items():
            if french_word in word_dict:
                word = word_dict[french_word]
                shimaore_match = expected_translations["shimaore"].lower() in word['shimaore'].lower()
                kibouchi_match = expected_translations["kibouchi"].lower() in word['kibouchi'].lower()
                
                self.log_test(f"Aliment complexe: {french_word}", 
                             shimaore_match and kibouchi_match,
                             f"Shimaor√©: {word['shimaore']}, Kibouchi: {word['kibouchi']}")
            else:
                self.log_test(f"Aliment complexe: {french_word}", False, "Mot non trouv√©")
    
    def test_7_data_integrity(self):
        """Test 7: Test de l'int√©grit√© des donn√©es"""
        print("\n=== TEST 7: INT√âGRIT√â DES DONN√âES ===")
        
        if not self.nourriture_words:
            self.log_test("Int√©grit√© des donn√©es", False, "Aucun mot √† tester")
            return
        
        # Test for duplicates
        french_words = [word['french'].lower() for word in self.nourriture_words]
        unique_words = set(french_words)
        has_duplicates = len(french_words) != len(unique_words)
        
        self.log_test("Pas de doublons", not has_duplicates,
                     f"Trouv√© {len(french_words)} mots, {len(unique_words)} uniques")
        
        # Test emoji coverage
        words_with_emojis = sum(1 for word in self.nourriture_words 
                               if 'image_url' in word and word['image_url'])
        emoji_percentage = (words_with_emojis / len(self.nourriture_words)) * 100
        
        self.log_test("Emojis appropri√©s", emoji_percentage >= 80,
                     f"{words_with_emojis}/{len(self.nourriture_words)} mots avec emojis ({emoji_percentage:.1f}%)")
        
        # Test audio references format
        words_with_audio = sum(1 for word in self.nourriture_words 
                              if any(field in word for field in ['audio_url', 'shimoare_audio_filename', 'kibouchi_audio_filename', 'has_authentic_audio']))
        
        self.log_test("R√©f√©rences audio format√©es", words_with_audio >= 0,
                     f"{words_with_audio}/{len(self.nourriture_words)} mots avec r√©f√©rences audio")
    
    def test_8_other_sections_unaffected(self):
        """Test 8: Test que les autres sections n'ont pas √©t√© affect√©es"""
        print("\n=== TEST 8: AUTRES SECTIONS NON AFFECT√âES ===")
        
        expected_sections = {
            'famille': 25,  # Approximate expected count
            'animaux': 65,  # Approximate expected count  
            'nombres': 20,  # Approximate expected count
            'salutations': 8,  # Approximate expected count
            'couleurs': 8   # Approximate expected count
        }
        
        for category, min_expected in expected_sections.items():
            try:
                response = self.make_request(f"/words?category={category}")
                if response["success"]:
                    data = response["data"]
                    word_count = len(data)
                    self.log_test(f"Section {category} intacte", word_count >= min_expected,
                                 f"Trouv√© {word_count} mots (attendu ‚â•{min_expected})")
                else:
                    self.log_test(f"Section {category} intacte", False,
                                 f"HTTP {response['status_code']}")
            except Exception as e:
                self.log_test(f"Section {category} intacte", False, f"Error: {str(e)}")
    
    def test_9_total_word_count_increase(self):
        """Test 9: Test que le total de mots a augment√© de 44"""
        print("\n=== TEST 9: AUGMENTATION TOTAL MOTS ===")
        
        try:
            response = self.make_request("/words")
            if response["success"]:
                data = response["data"]
                self.total_words_count = len(data)
                
                # Based on previous tests, we expect around 565+ words (before nourriture) + 44
                expected_minimum = 609  # 565 + 44
                self.log_test("Total mots augment√©", self.total_words_count >= expected_minimum,
                             f"Trouv√© {self.total_words_count} mots total (attendu ‚â•{expected_minimum})")
                return self.total_words_count
            else:
                self.log_test("Total mots augment√©", False,
                             f"HTTP {response['status_code']}")
                return 0
        except Exception as e:
            self.log_test("Total mots augment√©", False, f"Error: {str(e)}")
            return 0
    
    def test_10_nourriture_api_performance(self):
        """Test 10: Test de performance de l'endpoint nourriture"""
        print("\n=== TEST 10: PERFORMANCE API NOURRITURE ===")
        
        try:
            start_time = time.time()
            response = self.make_request("/words?category=nourriture")
            end_time = time.time()
            
            response_time = end_time - start_time
            
            if response["success"]:
                data = response["data"]
                self.log_test("Performance API nourriture", response_time < 2.0,
                             f"Temps de r√©ponse: {response_time:.2f}s, {len(data)} mots retourn√©s")
                
                # Test specific word queries if we have data
                if data:
                    sample_word = data[0]
                    word_id = sample_word.get('id')
                    if word_id:
                        word_response = self.make_request(f"/words/{word_id}")
                        self.log_test("Acc√®s mot individuel", word_response["success"],
                                     f"Mot ID {word_id} accessible")
                
                return True
            else:
                self.log_test("Performance API nourriture", False,
                             f"HTTP {response['status_code']}")
                return False
        except Exception as e:
            self.log_test("Performance API nourriture", False, f"Error: {str(e)}")
            return False
    
    def run_all_tests(self):
        """Execute all tests for nourriture section"""
        print("üéØ D√âBUT DES TESTS BACKEND - SECTION NOURRITURE")
        print("=" * 70)
        print("Test complet du backend apr√®s la cr√©ation et correction orthographique")
        print("de la section 'nourriture' avec 44 mots de base de Mayotte")
        print("=" * 70)
        
        start_time = time.time()
        
        # Test connectivity first
        if not self.test_1_api_connectivity():
            print("‚ùå √âCHEC: Impossible de se connecter √† l'API. Arr√™t des tests.")
            return False
        
        # Test nourriture section exists
        if not self.test_2_nourriture_section_exists():
            print("‚ùå √âCHEC: Section nourriture non trouv√©e. Arr√™t des tests.")
            return False
        
        # Run all test suites
        self.test_3_44_words_added()
        self.test_4_data_structure()
        self.test_5_corrected_spellings()
        self.test_6_complex_new_foods()
        self.test_7_data_integrity()
        self.test_8_other_sections_unaffected()
        self.test_9_total_word_count_increase()
        self.test_10_nourriture_api_performance()
        
        end_time = time.time()
        duration = end_time - start_time
        
        # Print summary
        print("\n" + "=" * 70)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 70)
        
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        
        print(f"Tests r√©ussis: {self.passed_tests}/{self.total_tests} ({success_rate:.1f}%)")
        print(f"Dur√©e: {duration:.2f}s")
        
        # Show nourriture section statistics
        print(f"\nüìà STATISTIQUES SECTION NOURRITURE:")
        if self.nourriture_words:
            count = len(self.nourriture_words)
            with_emojis = sum(1 for w in self.nourriture_words if w.get('image_url'))
            with_audio = sum(1 for w in self.nourriture_words if (
                w.get('has_authentic_audio') or w.get('audio_filename') or
                w.get('shimoare_has_audio') or w.get('kibouchi_has_audio')
            ))
            emoji_rate = (with_emojis / count * 100) if count > 0 else 0
            audio_rate = (with_audio / count * 100) if count > 0 else 0
            print(f"  Nourriture: {count} mots")
            print(f"  Avec emojis: {with_emojis} ({emoji_rate:.1f}%)")
            print(f"  Avec audio: {with_audio} ({audio_rate:.1f}%)")
        
        print(f"  Total mots dans la base: {self.total_words_count}")
        
        if success_rate >= 80:
            print("\nüéâ R√âSULTAT: SUCC√àS - La section nourriture est fonctionnelle!")
        elif success_rate >= 60:
            print("\n‚ö†Ô∏è R√âSULTAT: PARTIEL - Quelques probl√®mes identifi√©s")
        else:
            print("\n‚ùå R√âSULTAT: √âCHEC - Probl√®mes critiques identifi√©s")
        
        print("\nüìã D√âTAIL DES R√âSULTATS:")
        for result in self.test_results:
            print(f"  {result}")
        
        return success_rate >= 60

def main():
    """Main test execution"""
    tester = NourritureSectionTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüèÅ TESTS TERMIN√âS AVEC SUCC√àS!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â - V√âRIFICATION N√âCESSAIRE")
        sys.exit(1)

if __name__ == "__main__":
    main()