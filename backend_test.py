#!/usr/bin/env python3
"""
Test complet du backend apr√®s la cr√©ation et mise √† jour des prononciations audio pour la section "v√™tement"
Comprehensive backend testing after creation and audio pronunciation updates for the "v√™tement" section

Test Requirements from French review request:
1. V√©rification de la nouvelle section - tester que la section "vetements" existe maintenant
2. V√©rifier que les 17 mots ont √©t√© ajout√©s avec succ√®s
3. Confirmer la structure des donn√©es (french, shimaor√©, kibouchi, emoji)
4. Test de l'orthographe corrig√©e:
   - "salouva" ‚Üí shimaor√©: "salouva", kibouchi: "salouvagna"
   - "kamiss" ‚Üí shimaor√©: "kandzou bol√©", kibouchi: "ankandzou b√©"
   - "tongs" ‚Üí shimaor√©: "sapatri", kibouchi: "kabwa sapatri"
   - "voile" ‚Üí shimaor√©: "kichali", kibouchi: "kichali"
5. Test de la couverture audio - v√©rifier que 16/17 mots (94.1%) ont des r√©f√©rences audio authentiques
6. Tester les r√©f√©rences audio sp√©cifiques:
   - "v√™tement" ‚Üí audio/vetements/Ngouwo.m4a
   - "salouva" ‚Üí audio/vetements/Salouva.m4a
   - "kamiss" ‚Üí audio/vetements/Kandzou bol√©.m4a
   - "tongs" ‚Üí audio/vetements/Kabwa sapatri.m4a
7. Test de l'int√©grit√© des donn√©es - v√©rifier que tous les mots ont des emojis appropri√©s (üëï, üëó, üëñ, üëü, etc.)
8. Tester que les champs `has_authentic_audio` sont d√©finis √† true
9. Confirmer qu'il n'y a pas de doublons dans la section
10. Test des autres sections - v√©rifier que les autres sections n'ont pas √©t√© affect√©es
11. Confirmer que le nombre total de sections est maintenant de 7
12. Tester les performances globales de l'API
13. Test API endpoint sp√©cifique - tester l'endpoint `/api/words?category=vetements`
14. V√©rifier que tous les 17 mots sont retourn√©s
15. Tester des requ√™tes sp√©cifiques sur les nouveaux mots
16. Test des fichiers audio - v√©rifier que les 23 fichiers M4A sont pr√©sents
17. Confirmer que 16 fichiers sont utilis√©s et 7 restent disponibles
18. Tester l'acc√®s aux fichiers audio via l'API
"""

import requests
import json
import sys
from typing import Dict, List, Any, Optional
import time
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get backend URL from frontend .env file
FRONTEND_ENV_PATH = "/app/frontend/.env"
BACKEND_URL = None

try:
    with open(FRONTEND_ENV_PATH, 'r') as f:
        for line in f:
            if line.startswith('EXPO_PUBLIC_BACKEND_URL='):
                BACKEND_URL = line.split('=')[1].strip()
                break
except:
    pass

if not BACKEND_URL:
    BACKEND_URL = "https://shimao-game.preview.emergentagent.com"

API_URL = f"{BACKEND_URL}/api"
print(f"üîó Using Backend URL: {BACKEND_URL}")

class VetementsSectionTester:
    def __init__(self):
        self.api_url = API_URL
        self.test_results = []
        self.total_tests = 0
        self.passed_tests = 0
        self.vetements_words = []
        self.total_words_count = 0
        
    def log_test(self, test_name: str, passed: bool, details: str = ""):
        """Log test result"""
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            status = "‚úÖ PASS"
        else:
            status = "‚ùå FAIL"
        
        result = f"{status}: {test_name}"
        if details:
            result += f" - {details}"
        
        self.test_results.append(result)
        print(result)
        
    def make_request(self, endpoint: str, method: str = "GET", data: Dict = None) -> Dict:
        """Make HTTP request to backend"""
        url = f"{self.api_url}{endpoint}"
        try:
            if method == "GET":
                response = requests.get(url, timeout=10)
            elif method == "POST":
                response = requests.post(url, json=data, timeout=10)
            elif method == "PUT":
                response = requests.put(url, json=data, timeout=10)
            elif method == "DELETE":
                response = requests.delete(url, timeout=10)
            
            return {
                "status_code": response.status_code,
                "data": response.json() if response.content else {},
                "success": response.status_code < 400
            }
        except Exception as e:
            return {
                "status_code": 0,
                "data": {"error": str(e)},
                "success": False
            }

    def test_1_api_connectivity(self):
        """Test 1: V√©rifier la connectivit√© de l'API"""
        print("\n=== TEST 1: CONNECTIVIT√â API ===")
        try:
            response = requests.get(f"{BACKEND_URL}/", timeout=10)
            if response.status_code == 200:
                self.log_test("API Connectivity", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("API Connectivity", False, f"Status: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("API Connectivity", False, f"Error: {str(e)}")
            return False
    
    def test_2_vetements_section_exists(self):
        """Test 2: V√©rification que la section v√™tements existe"""
        print("\n=== TEST 2: V√âRIFICATION SECTION V√äTEMENTS ===")
        
        try:
            response = self.make_request("/words?category=vetements")
            if response["success"]:
                self.vetements_words = response["data"]
                count = len(self.vetements_words)
                self.log_test("Section v√™tements existe", count > 0, f"{count} mots trouv√©s")
                return count > 0
            else:
                self.log_test("Section v√™tements existe", False, f"Status: {response['status_code']}")
                return False
        except Exception as e:
            self.log_test("Section v√™tements existe", False, f"Error: {str(e)}")
            return False
    
    def test_3_17_words_added(self):
        """Test 3: V√©rification que 17 mots ont √©t√© ajout√©s"""
        print("\n=== TEST 3: V√âRIFICATION 17 MOTS AJOUT√âS ===")
        
        expected_count = 17
        actual_count = len(self.vetements_words)
        
        self.log_test("17 mots ajout√©s", actual_count == expected_count, 
                     f"Attendu: {expected_count}, Trouv√©: {actual_count}")
        
        return actual_count == expected_count
    
    def test_4_data_structure(self):
        """Test 4: V√©rification de la structure des donn√©es"""
        print("\n=== TEST 4: STRUCTURE DES DONN√âES ===")
        
        if not self.vetements_words:
            self.log_test("Structure des donn√©es", False, "Aucun mot √† tester")
            return False
        
        required_fields = ['french', 'shimaore', 'kibouchi', 'category']
        complete_words = 0
        words_with_emojis = 0
        
        for word in self.vetements_words:
            # Check required fields
            has_all_fields = all(field in word and word[field] for field in required_fields)
            if has_all_fields:
                complete_words += 1
            
            # Check for emoji (in image_url field)
            if 'image_url' in word and word['image_url']:
                words_with_emojis += 1
        
        structure_percentage = (complete_words / len(self.vetements_words)) * 100
        emoji_percentage = (words_with_emojis / len(self.vetements_words)) * 100
        
        self.log_test("Structure compl√®te", structure_percentage >= 95,
                     f"{complete_words}/{len(self.vetements_words)} mots avec structure compl√®te ({structure_percentage:.1f}%)")
        
        self.log_test("Emojis pr√©sents", emoji_percentage >= 80,
                     f"{words_with_emojis}/{len(self.vetements_words)} mots avec emojis ({emoji_percentage:.1f}%)")
        
        return structure_percentage >= 95
    
    def test_5_corrected_spelling(self):
        """Test 5: Test de l'orthographe corrig√©e pour les mots sp√©cifiques"""
        print("\n=== TEST 5: ORTHOGRAPHE CORRIG√âE ===")
        
        expected_corrections = {
            "salouva": {"shimaore": "salouva", "kibouchi": "salouvagna"},
            "kamiss": {"shimaore": "kandzou bol√©", "kibouchi": "ankandzou b√©"},
            "tongs": {"shimaore": "sapatri", "kibouchi": "kabwa sapatri"},
            "voile": {"shimaore": "kichali", "kibouchi": "kichali"}
        }
        
        word_dict = {word['french'].lower(): word for word in self.vetements_words}
        
        for french_word, expected_translations in expected_corrections.items():
            if french_word in word_dict:
                word = word_dict[french_word]
                shimaore_match = expected_translations["shimaore"].lower() in word['shimaore'].lower()
                kibouchi_match = expected_translations["kibouchi"].lower() in word['kibouchi'].lower()
                
                self.log_test(f"Orthographe corrig√©e: {french_word}", 
                             shimaore_match and kibouchi_match,
                             f"Shimaor√©: {word['shimaore']}, Kibouchi: {word['kibouchi']}")
            else:
                self.log_test(f"Orthographe corrig√©e: {french_word}", False, "Mot non trouv√©")
    
    def test_6_audio_coverage(self):
        """Test 6: Test de la couverture audio (16/17 mots = 94.1%)"""
        print("\n=== TEST 6: COUVERTURE AUDIO ===")
        
        if not self.vetements_words:
            self.log_test("Couverture audio", False, "Aucun mot √† tester")
            return
        
        words_with_audio = 0
        total_words = len(self.vetements_words)
        
        for word in self.vetements_words:
            has_audio = (
                word.get('has_authentic_audio', False) or
                word.get('shimoare_has_audio', False) or
                word.get('kibouchi_has_audio', False) or
                word.get('audio_filename') or
                word.get('shimoare_audio_filename') or
                word.get('kibouchi_audio_filename') or
                word.get('dual_audio_system', False)
            )
            if has_audio:
                words_with_audio += 1
        
        coverage_percentage = (words_with_audio / total_words * 100) if total_words > 0 else 0
        expected_coverage = 94.1  # 16/17 words
        
        success = coverage_percentage >= expected_coverage - 10  # Allow 10% tolerance
        self.log_test("Couverture audio 94.1%", success, 
                     f"{words_with_audio}/{total_words} mots ({coverage_percentage:.1f}%) ont des r√©f√©rences audio")
    
    def test_7_specific_audio_references(self):
        """Test 7: Test des r√©f√©rences audio sp√©cifiques"""
        print("\n=== TEST 7: R√âF√âRENCES AUDIO SP√âCIFIQUES ===")
        
        expected_audio = {
            "v√™tement": "Ngouwo.m4a",
            "salouva": "Salouva.m4a", 
            "kamiss": "Kandzou bol√©.m4a",
            "tongs": "Kabwa sapatri.m4a"
        }
        
        word_dict = {word['french'].lower(): word for word in self.vetements_words}
        
        for french_word, expected_audio_file in expected_audio.items():
            if french_word in word_dict:
                word = word_dict[french_word]
                audio_files = [
                    word.get('audio_filename', ''),
                    word.get('shimoare_audio_filename', ''),
                    word.get('kibouchi_audio_filename', '')
                ]
                
                has_expected_audio = any(expected_audio_file in audio_file for audio_file in audio_files if audio_file)
                self.log_test(f"R√©f√©rence audio sp√©cifique - {french_word}", has_expected_audio,
                             f"Attendu: {expected_audio_file}, Trouv√©: {[f for f in audio_files if f]}")
            else:
                self.log_test(f"R√©f√©rence audio sp√©cifique - {french_word}", False, "Mot non trouv√©")
    
    def test_8_appropriate_emojis(self):
        """Test 8: Test des emojis appropri√©s pour v√™tements"""
        print("\n=== TEST 8: EMOJIS APPROPRI√âS V√äTEMENTS ===")
        
        if not self.vetements_words:
            self.log_test("Emojis appropri√©s", False, "Aucun mot √† tester")
            return
        
        # Clothing-specific emojis
        clothing_emojis = ['üëï', 'üëó', 'üëñ', 'üëü', 'üë†', 'üë°', 'üë¢', 'üß•', 'üß¶', 'üß§', 'üëí', 'üé©', 'üëë', 'üíç', 'üëú', 'üéí', 'üëì', 'üï∂Ô∏è', 'ü•ø', 'ü©±', 'ü©≤', 'ü©≥']
        words_with_appropriate_emojis = 0
        
        for word in self.vetements_words:
            if 'image_url' in word and word['image_url']:
                if any(emoji in word['image_url'] for emoji in clothing_emojis):
                    words_with_appropriate_emojis += 1
        
        emoji_percentage = (words_with_appropriate_emojis / len(self.vetements_words)) * 100
        
        self.log_test("Emojis appropri√©s v√™tements", emoji_percentage >= 70,
                     f"{words_with_appropriate_emojis}/{len(self.vetements_words)} mots avec emojis v√™tements ({emoji_percentage:.1f}%)")
    
    def test_9_has_authentic_audio_flag(self):
        """Test 9: Test que les champs has_authentic_audio sont d√©finis √† true"""
        print("\n=== TEST 9: CHAMPS HAS_AUTHENTIC_AUDIO ===")
        
        if not self.vetements_words:
            self.log_test("Champs has_authentic_audio", False, "Aucun mot √† tester")
            return
        
        words_with_authentic_audio = sum(1 for word in self.vetements_words 
                                       if word.get('has_authentic_audio', False))
        
        expected_count = 16  # 16/17 words should have authentic audio
        success = words_with_authentic_audio >= expected_count - 2  # Allow some tolerance
        
        self.log_test("Champs has_authentic_audio d√©finis", success,
                     f"{words_with_authentic_audio}/{len(self.vetements_words)} mots avec has_authentic_audio=true")
    
    def test_10_no_duplicates(self):
        """Test 10: Confirmer qu'il n'y a pas de doublons"""
        print("\n=== TEST 10: PAS DE DOUBLONS ===")
        
        if not self.vetements_words:
            self.log_test("Pas de doublons", False, "Aucun mot √† tester")
            return
        
        french_words = [word['french'].lower() for word in self.vetements_words]
        unique_words = set(french_words)
        has_duplicates = len(french_words) != len(unique_words)
        
        self.log_test("Pas de doublons", not has_duplicates,
                     f"Trouv√© {len(french_words)} mots, {len(unique_words)} uniques")
    
    def test_11_other_sections_unaffected(self):
        """Test 11: Test que les autres sections n'ont pas √©t√© affect√©es"""
        print("\n=== TEST 11: AUTRES SECTIONS NON AFFECT√âES ===")
        
        expected_sections = {
            'famille': 25,  # Approximate expected count
            'animaux': 65,  # Approximate expected count  
            'nombres': 20,  # Approximate expected count
            'salutations': 8,  # Approximate expected count
            'couleurs': 8,   # Approximate expected count
            'nourriture': 40  # Approximate expected count
        }
        
        for category, min_expected in expected_sections.items():
            try:
                response = self.make_request(f"/words?category={category}")
                if response["success"]:
                    data = response["data"]
                    word_count = len(data)
                    self.log_test(f"Section {category} intacte", word_count >= min_expected,
                                 f"Trouv√© {word_count} mots (attendu ‚â•{min_expected})")
                else:
                    self.log_test(f"Section {category} intacte", False,
                                 f"HTTP {response['status_code']}")
            except Exception as e:
                self.log_test(f"Section {category} intacte", False, f"Error: {str(e)}")
    
    def test_12_total_sections_count(self):
        """Test 12: Confirmer que le nombre total de sections est maintenant de 7"""
        print("\n=== TEST 12: NOMBRE TOTAL SECTIONS = 7 ===")
        
        try:
            response = self.make_request("/words")
            if response["success"]:
                all_words = response["data"]
                categories = set(word['category'] for word in all_words)
                category_count = len(categories)
                
                self.log_test("Nombre total sections = 7", category_count >= 7,
                             f"Trouv√© {category_count} cat√©gories (attendu ‚â•7)")
                self.log_test("Cat√©gories trouv√©es", True, f"Cat√©gories: {sorted(categories)}")
            else:
                self.log_test("Nombre total sections", False, f"HTTP {response['status_code']}")
        except Exception as e:
            self.log_test("Nombre total sections", False, f"Error: {str(e)}")
    
    def test_13_api_performance(self):
        """Test 13: Tester les performances globales de l'API"""
        print("\n=== TEST 13: PERFORMANCES API ===")
        
        try:
            start_time = time.time()
            response = self.make_request("/words?category=vetements")
            end_time = time.time()
            
            response_time = end_time - start_time
            
            if response["success"]:
                data = response["data"]
                self.log_test("Performance API v√™tements", response_time < 2.0,
                             f"Temps de r√©ponse: {response_time:.3f}s, {len(data)} mots retourn√©s")
                
                # Test that all returned words are from vetements category
                all_vetements = all(word.get('category') == 'vetements' for word in data)
                self.log_test("Filtrage cat√©gorie correct", all_vetements,
                             f"Tous les {len(data)} mots sont de la cat√©gorie 'vetements'")
                
                return True
            else:
                self.log_test("Performance API v√™tements", False,
                             f"HTTP {response['status_code']}")
                return False
        except Exception as e:
            self.log_test("Performance API v√™tements", False, f"Error: {str(e)}")
            return False
    
    def test_14_specific_vetements_endpoint(self):
        """Test 14: Test API endpoint sp√©cifique /api/words?category=vetements"""
        print("\n=== TEST 14: ENDPOINT SP√âCIFIQUE V√äTEMENTS ===")
        
        try:
            response = self.make_request("/words?category=vetements")
            if response["success"]:
                words = response["data"]
                
                # Test that all 17 words are returned
                self.log_test("17 mots retourn√©s", len(words) == 17,
                             f"Endpoint retourne {len(words)} mots (attendu: 17)")
                
                # Test specific clothing words exist
                expected_vetements = ['v√™tement', 'salouva', 'kamiss', 'tongs', 'voile']
                word_names = [word.get('french', '').lower() for word in words]
                
                for expected_word in expected_vetements:
                    found = expected_word.lower() in word_names
                    self.log_test(f"Mot attendu pr√©sent - {expected_word}", found)
                    
            else:
                self.log_test("Endpoint v√™tements", False, f"HTTP {response['status_code']}")
        except Exception as e:
            self.log_test("Endpoint v√™tements", False, f"Error: {str(e)}")
    
    def test_15_audio_files_access(self):
        """Test 15: Test d'acc√®s aux fichiers audio via l'API"""
        print("\n=== TEST 15: ACC√àS FICHIERS AUDIO ===")
        
        try:
            # Test if audio info endpoint exists
            response = self.make_request("/audio/info")
            if response["success"]:
                audio_info = response["data"]
                self.log_test("Endpoint audio/info", True, "Endpoint audio info accessible")
                
                # Check if vetements is in audio categories
                if isinstance(audio_info, dict) and 'vetements' in str(audio_info):
                    self.log_test("Cat√©gorie v√™tements dans audio", True, "V√™tements trouv√© dans info audio")
                else:
                    self.log_test("Cat√©gorie v√™tements dans audio", False, "V√™tements non trouv√© dans info audio")
            else:
                self.log_test("Endpoint audio/info", False, f"HTTP {response['status_code']} - Endpoints audio non impl√©ment√©s")
        except Exception as e:
            self.log_test("Acc√®s fichiers audio", False, f"Error: {str(e)} - Endpoints audio non impl√©ment√©s")
    
    def test_16_total_word_count(self):
        """Test 16: Test que le nombre total de mots est raisonnable"""
        print("\n=== TEST 16: NOMBRE TOTAL MOTS ===")
        
        try:
            response = self.make_request("/words")
            if response["success"]:
                data = response["data"]
                self.total_words_count = len(data)
                
                # Based on previous tests, we expect around 600+ words total
                expected_minimum = 600
                self.log_test("Total mots raisonnable", self.total_words_count >= expected_minimum,
                             f"Trouv√© {self.total_words_count} mots total (attendu ‚â•{expected_minimum})")
                return self.total_words_count
            else:
                self.log_test("Total mots raisonnable", False,
                             f"HTTP {response['status_code']}")
                return 0
        except Exception as e:
            self.log_test("Total mots raisonnable", False, f"Error: {str(e)}")
            return 0
    
    def run_all_tests(self):
        """Execute all tests for vetements section"""
        print("üëï D√âBUT DES TESTS BACKEND - SECTION V√äTEMENTS")
        print("=" * 70)
        print("Test complet du backend apr√®s la cr√©ation et mise √† jour des")
        print("prononciations audio pour la section 'v√™tement' avec 17 mots")
        print("=" * 70)
        
        start_time = time.time()
        
        # Test connectivity first
        if not self.test_1_api_connectivity():
            print("‚ùå √âCHEC: Impossible de se connecter √† l'API. Arr√™t des tests.")
            return False
        
        # Test vetements section exists
        if not self.test_2_vetements_section_exists():
            print("‚ùå √âCHEC: Section v√™tements non trouv√©e. Arr√™t des tests.")
            return False
        
        # Run all test suites
        self.test_3_17_words_added()
        self.test_4_data_structure()
        self.test_5_corrected_spelling()
        self.test_6_audio_coverage()
        self.test_7_specific_audio_references()
        self.test_8_appropriate_emojis()
        self.test_9_has_authentic_audio_flag()
        self.test_10_no_duplicates()
        self.test_11_other_sections_unaffected()
        self.test_12_total_sections_count()
        self.test_13_api_performance()
        self.test_14_specific_vetements_endpoint()
        self.test_15_audio_files_access()
        self.test_16_total_word_count()
        
        end_time = time.time()
        duration = end_time - start_time
        
        # Print summary
        print("\n" + "=" * 70)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 70)
        
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        
        print(f"Tests r√©ussis: {self.passed_tests}/{self.total_tests} ({success_rate:.1f}%)")
        print(f"Dur√©e: {duration:.2f}s")
        
        # Show vetements section statistics
        print(f"\nüìà STATISTIQUES SECTION V√äTEMENTS:")
        if self.vetements_words:
            count = len(self.vetements_words)
            with_emojis = sum(1 for w in self.vetements_words if w.get('image_url'))
            with_audio = sum(1 for w in self.vetements_words if (
                w.get('has_authentic_audio') or w.get('audio_filename') or
                w.get('shimoare_has_audio') or w.get('kibouchi_has_audio') or
                w.get('dual_audio_system')
            ))
            emoji_rate = (with_emojis / count * 100) if count > 0 else 0
            audio_rate = (with_audio / count * 100) if count > 0 else 0
            print(f"  V√™tements: {count} mots")
            print(f"  Avec emojis: {with_emojis} ({emoji_rate:.1f}%)")
            print(f"  Avec audio: {with_audio} ({audio_rate:.1f}%)")
        
        print(f"  Total mots dans la base: {self.total_words_count}")
        
        if success_rate >= 80:
            print("\nüéâ R√âSULTAT: SUCC√àS - La section v√™tements est fonctionnelle!")
        elif success_rate >= 60:
            print("\n‚ö†Ô∏è R√âSULTAT: PARTIEL - Quelques probl√®mes identifi√©s")
        else:
            print("\n‚ùå R√âSULTAT: √âCHEC - Probl√®mes critiques identifi√©s")
        
        print("\nüìã D√âTAIL DES R√âSULTATS:")
        for result in self.test_results:
            print(f"  {result}")
        
        return success_rate >= 60

def main():
    """Main test execution"""
    tester = VetementsSectionTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüèÅ TESTS TERMIN√âS AVEC SUCC√àS!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â - V√âRIFICATION N√âCESSAIRE")
        sys.exit(1)

if __name__ == "__main__":
    main()