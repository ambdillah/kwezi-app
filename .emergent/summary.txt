<analysis>
The trajectory chronicles the AI engineer's work on the Kwezi language learning app, primarily focusing on data integrity and new feature integration. Initial work addressed a critical TTS bug where Shimaoré phrases were misread as organisation de lunité africaine" due to an erroneous Swahili fallback in `feminineSpeechUtils.ts`, which was resolved by enforcing French TTS. A substantial portion involved iterative updates to various vocabulary sections (verbs, expressions, animals, adjectives, human body, nature, grammar, food, house) from user-provided images and audio ZIPs. A persistent challenge was managing two distinct database schema conventions for audio filenames (`shimoare_audio_filename` vs `audio_filename_shimaore`), requiring extensive refactoring in `learn.tsx`, `dualAuthenticAudioSystem.ts`, and `server.py` to ensure all authentic audios played correctly. New features included implementing a search bar in `learn.tsx` and initiating the backend integration of Stripe for subscription payments. The trajectory ends mid-update on the "verbes" section.
</analysis>

<product_requirements>
The Kwezi application is an educational tool for learning Shimaoré and Kibouchi.
**Core Requirements:**
1.  **Audio Authenticity:** Every word and expression must feature authentic, user-provided audio; synthetic TTS is a fallback. This requires 100% authentic audio coverage across all vocabulary sections (expressions, traditions, nature, vêtements, salutations, famille, nombres, animaux, verbes, adjectifs, corps humain, nourriture, maison, grammaire).
2.  **Data Integrity:** All vocabulary, expressions, and quiz questions must be accurate, grammatically correct, and alphabetized, reflecting precise user-provided conjugation rules and translations.
3.  **User Experience:** The app must be performant (e.g., paginated loading), intuitive, and use a consistent female synthetic voice for game-generated sentences.
4.  **Monetization (Freemium Model):** A premium subscription (€2.90/month) unlocks all content (currently ~614+ words) and features. Free users are limited to 250 words. A "Boutique" allows users to purchase PDF exercise sheets, with premium users gaining free access.
**Implementation Done So Far:**
-   Refactored TTS for a consistent female voice, resolving a Shimaoré reading bug.
-   Fixed numerous data integrity issues, including quiz answers and translations.
-   Ensured authentic audio coverage for many categories.
-   Implemented paginated loading for the "Commencer à apprendre" screen.
-   Developed backend for freemium model and frontend `UserContext`.
-   Implemented "Boutique" with freemium logic.
-   Corrected and implemented detailed Shimaoré/Kibouchi conjugation rules.
-   Generated comprehensive vocabulary verification documents.
-   Implemented a word search feature in `learn.tsx`.
-   Integrated Stripe payment gateway on the backend.
-   Updated verbes, expressions, animaux, adjectifs, corps humain, nature, grammaire, nourriture, maison sections with new words and audios.
</product_requirements>

<key_technical_concepts>
-   **Full-Stack Architecture:** FastAPI (Python) backend, MongoDB, Expo (React Native) frontend.
-   **Data ETL & Automation:** Python scripts (`pymongo`) for database updates, audio copying, and data verification.
-   **Dual Audio System:** Custom frontend (`dualAuthenticAudioSystem.ts`) and backend (`server.py`) logic to manage two distinct database field naming conventions and physical storage paths for authentic audio files.
-   **Speech Synthesis:** `expo-speech` with `feminineSpeechUtils.ts` configured for consistent French female TTS.
-   **Payment Gateway:** Stripe for subscription and product management (backend integrated).
-   **Debugging & Root Cause Analysis:** Frequent utilization of `troubleshoot_agent` for complex and recurring issues.
</key_technical_concepts>

<code_architecture>
```
/app
├── backend/
│   ├── .env
│   ├── server.py
│   ├── premium_system.py
│   ├── conjugation_engine.py
│   ├── regenerate_sentences_corrected.py
│   ├── update_traditions_audio.py
│   ├── update_multiple_categories_audio.py
│   ├── fix_nombres_translations.py
│   ├── generate_verification_document.py
│   ├── apply_user_corrections.py
│   ├── integrate_missing_audios.py
│   ├── update_verbes_section.py            
│   ├── check_verbes_audio.py               
│   ├── fix_dual_audio_system.py            
│   ├── fix_medire_spelling.py              
│   ├── check_verbes_structure.py           
│   ├── STRUCTURE_BASE_DONNEES.md           
│   ├── update_expressions_section.py       
│   ├── fix_expressions_orthography.py      
│   ├── verifier_et_corriger_audios.py      
│   ├── update_expressions_audios_final.py  
│   ├── add_new_adjectifs.py                
│   ├── create_stripe_product.py            
│   ├── stripe_routes.py                    
│   ├── add_nature_materials.py             
│   ├── add_new_verbes_secure.py            
│   └── add_new_adjectifs.py                
├── frontend/
│   ├── .env
│   ├── app/
│   │   ├── _layout.tsx
│   │   ├── games.tsx
│   │   ├── learn.tsx
│   │   ├── mayotte-discovery.tsx
│   │   ├── index.tsx
│   │   └── shop.tsx
│   ├── assets/
│   │   ├── audio/
│   │   │   ├── adjectifs/
│   │   │   ├── animaux/
│   │   │   ├── corps_humain/
│   │   │   ├── expressions/
│   │   │   ├── famille/
│   │   │   ├── grammaire/
│   │   │   ├── maison/
│   │   │   ├── nature/
│   │   │   ├── nourriture/
│   │   │   ├── verbes/
│   │   │   └── vetements/
│   │   └── audio_backup_20250930/  (Older structured audios)
│   ├── components/
│   │   └── ConjugationRules.tsx
│   ├── contexts/
│   │   └── UserContext.tsx
│   ├── data/
│   │   ├── mayotteVillages.ts
│   │   └── exerciseSheets.ts
│   └── utils/
│       ├── feminineSpeechUtils.ts
│       ├── authenticAudioSystem.ts
│       └── dualAuthenticAudioSystem.ts     
├── REGLES_CONJUGAISON_JEU.md
├── DATABASE_SENTENCES.md
├── VERIFICATION_VOCABULAIRE_COMPLET.html
└── VERIFICATION_VOCABULAIRE_COMPLET.csv
```
-   **`backend/.env`**
    -   **Importance:** Configuration for database and external services like Stripe.
    -   **Summary of Changes:** Added `STRIPE_SECRET_KEY` and corrected newline formatting issues.
-   **`backend/server.py`**
    -   **Importance:** Main FastAPI server, handles all API logic and data serving.
    -   **Summary of Changes:** Modified `/api/words` endpoint to sort results alphabetically. Included `stripe_routes.py`. Critically updated `/api/words/{word_id}/audio/{lang}` to correctly handle two distinct audio field naming conventions (`audio_filename_shimaore` / `audio_filename_kibouchi` and `shimoare_audio_filename` / `kibouchi_audio_filename`) and to search for audio files in the root `/assets/audio/` directory before category-specific subdirectories.
-   **`backend/update_verbes_section.py` (New File)**
    -   **Importance:** Temporary script for adding new verbs and their audios.
    -   **Summary of Changes:** Created to automate the insertion of verb data and audio file links into MongoDB, with corrections for f-string syntax.
-   **`backend/stripe_routes.py` (New File)**
    -   **Importance:** Contains FastAPI routes specific to Stripe integration.
    -   **Summary of Changes:** Created to manage Stripe-related API calls, including checkout sessions and webhooks for subscription management.
-   **`frontend/app/learn.tsx`**
    -   **Importance:** The primary screen for vocabulary learning and interaction.
    -   **Summary of Changes:** The `Word` interface was updated to include both legacy (`shimoare_audio_filename`, `kibouchi_audio_filename`) and new (`audio_filename_shimaore`, `audio_filename_kibouchi`) audio filename fields to accommodate database schema variations. A new search functionality was implemented, including `searchText` state, `handleSearch` logic, a visible `SearchBar` UI component with `TextInput` and an icon, and associated styles to filter displayed words. Debug console logs were corrected to use the right field names.
-   **`frontend/utils/feminineSpeechUtils.ts`**
    -   **Importance:** Manages Text-to-Speech configurations across the application.
    -   **Summary of Changes:** Modified to explicitly remove `sw-KE` (Swahili) and Malagasy as fallback languages for Shimaoré and Kibouchi, ensuring that all synthetic speech consistently uses a French female voice with adjusted pitch.
-   **`frontend/utils/dualAuthenticAudioSystem.ts`**
    -   **Importance:** Handles the logic for playing authentic audio files based on word data.
    -   **Summary of Changes:** This file underwent significant refactoring. Functions like `playWordWithDualAudio`, `hasDualAudioForLanguage`, and `getDualAudioInfo` were updated to robustly check for and prioritize *either* the new (`audio_filename_shimaore`/`kibouchi`) or the old (`shimoare_audio_filename`/`kibouchi_audio_filename`) audio filename fields in the word objects. A critical bug was fixed where words marked with `dual_audio_system: True` but only possessing old-style audio fields were failing to play, by correcting the conditional logic that determined whether to use authentic audio or fall back to TTS.

</code_architecture>

<pending_tasks>
-   **Implement Frontend Monetization UI:**
    -   Integrate the Stripe payment flow into the "Boutique" (Shop) and other relevant frontend screens to allow users to upgrade to premium.
    -   Implement conditional display of content (paywall/upgrade message) for free users trying to access restricted content.
    -   Add visual indicators (e.g., "Premium" badge) for premium users throughout the application.
-   **Final Verification of Verbs Section:** Complete the final verification step (`ÉTAPE 7`) for the recently added verbs in the "verbes" section.
</pending_tasks>

<current_work>
The immediate work prior to this summary involved a meticulous update to the "verbes" section of the application. The user requested the addition of 4 new verbs: "Entérer", "Masser", "Pêcher", and "Voyager," along with their Shimaoré and Kibouchi translations and corresponding authentic audio files. The AI engineer successfully downloaded the necessary audio files from a provided ZIP and extracted verb data from an image. A dedicated, secure Python script, `add_new_verbes_secure.py`, was created and executed to integrate these 4 verbs into the MongoDB database and copy their 8 associated audio files into the `/app/frontend/assets/audio/verbes/` directory. This script execution was confirmed as successful ("✅ AUCUNE ERREUR - Tout sest bien passé!). The trajectory concludes precisely at this point, with the addition of these verbs completed, and the AI engineer preparing to perform the Vérification finale COMPLÈTE for these newly added entries.
</current_work>

<optional_next_step>
Complete ÉTAPE 7: Vérification finale COMPLÈTE for the newly added verbs in the verbes section.
</optional_next_step>
