<analysis>
The AI engineer's work in this trajectory segment began by addressing the user's request for a data loss diagnostic. This involved reviewing backup files and existing database scripts. During this diagnostic, the AI engineer executed a previously prepared script, , which successfully corrected audio mappings for 26 verbs, resolving the oumengna / mandroubaka issue by using available audio files. A comprehensive data diagnostic was then provided, confirming robust backups and outlining the current state (566 words, 17 sections, 33.3% verb audio coverage). The user then requested a re-analysis of audio files, specifically considering case sensitivity in file names (e.g., Oumengna vs oumengna). The AI engineer created , which initially failed due to a schema mismatch (looking for  instead of ). After diagnosing this, a corrected script, , was created and executed, successfully identifying 771 audio matches (85.5% coverage). The AI engineer is now awaiting user confirmation to apply these new mappings using a proposed  script.
</analysis>

<product_requirements>
The Kwezi app is an educational mobile application for children to learn Shimaoré and Kibouchi through games and authentic audio. Past work involved refining the Construire des phrases game (fixing abimer verb, conjugation coloring, wassi correction, feminine TTS), updating famille vocabulary and audio, and prototyping the Découverte de Mayotte game. The current focus is expanding and rectifying the app's vocabulary content across numerous sections (Animaux, Nombres, Corps Humain, Salutations, Nourriture, Maison, Vêtement, Nature, Adjectifs, Verbes, Transport). This involves ensuring correct orthography, integrating authentic audio pronunciations, creating missing database sections, and critically, resolving persistent audio-to-word mapping inconsistencies, especially for verbs and addressing case-sensitivity issues in audio file names.
</product_requirements>

<key_technical_concepts>
-   **Full-stack Architecture:** Expo (React Native) frontend, FastAPI backend, MongoDB database.
-   **Data Processing:** Python scripts for database updates (insertion, orthography correction, audio reference mapping, data diagnostics, case-insensitive audio matching).
-   **Database Interaction:** Direct MongoDB queries for diagnostics.
-   **Backup & Recovery:** Automated timestamped backups for data integrity.
-   **Case-Insensitive Matching:** A critical technique applied to resolve audio-to-word mapping discrepancies.
</key_technical_concepts>

<code_architecture>
The application employs a full-stack architecture featuring an Expo (React Native) frontend, a FastAPI backend, and a MongoDB database. Frontend routing is managed by Expo Router through file-based navigation within the  directory.

**Detailed Directory structure:**
/app
├── backend/
│   ├── ...
│   ├── fix_verb_mappings_final.py
│   ├── analyze_all_audio_correspondences.py
│   ├── analyze_audio_with_correct_structure.py
│   ├── backup_before_recovery_20250917_084334.json
│   └── backup_words_20250925_051143.json
├── frontend/
│   ├── .env
│   ├── app/
│   │   ├── _layout.tsx
│   │   ├── admin.tsx
│   │   ├── games.tsx
│   │   ├── home.tsx
│   │   ├── index.tsx
│   │   ├── learn.tsx
│   │   └── mayotte-discovery.tsx
│   ├── assets/
│   │   ├── ylang-ylang.png
│   │   ├── maki-mayotte.png
│   │   ├── data/
│   │   │   └── mayotte-world.json
│   │   └── audio/
│   │       ├── famille/
│   │       ├── corps_humain/
│   │       ├── nombres/
│   │       ├── animaux/
│   │       ├── salutations/
│   │       ├── nourriture/
│   │       ├── maison/
│   │       ├── vetement/
│   │       ├── nature/
│   │       ├── verbes/
│   │       └── adjectifs/
│   ├── components/
│   │   ├── YlangYlangFlower.tsx
│   │   ├── MakiMayotte.tsx
│   │   ├── AuthenticAudioPlayer.tsx
│   │   ├── ColoredConjugationWord.tsx
│   │   ├── ConjugationColorLegend.tsx
│   │   ├── MayotteMap.tsx
│   │   ├── AnimatedMaki.tsx
│   │   ├── VillageDiscoveryPanel.tsx
│   │   └── HybridRealisticMayotteMap.tsx
│   ├── utils/
│   │   ├── speechUtils.ts
│   │   ├── realAuthenticAudioSystem.ts
│   │   ├── dualAuthenticAudioSystem.ts
│   │   ├── conjugationColorSystem.ts
│   │   ├── feminineSpeechUtils.ts
│   │   ├── enhancedSpeechUtils.ts
│   │   ├── voiceTestUtils.ts
│   │   └── mayotteGeoData.ts
│   ├── app.json
│   ├── package.json
│   ├── tsconfig.json
│   └── qr_code_expo.png
├── test_conjugation_colors.js
├── test_result.md
└── tests/

**Key Files & Changes:**
-   : **Executed.** This script corrected 26 verb audio references, resolving specific mismatches by using existing audio files and updating  and  fields in the  collection, including case-insensitive matching.
-   : **NEW.** Created for initial case-insensitive audio analysis, but failed due to a database schema mismatch.
-   : **NEW.** Created to fix the previous analysis script, correctly identifying the  field in MongoDB for successful case-insensitive audio-to-word matching, identifying 771 potential correspondences.
-   : **Examined.** Multiple timestamped JSON files were reviewed as part of the data diagnostic, confirming robust data protection.
</code_architecture>

<pending_tasks>
-   Implement frontend UI for audio playback in games other than Commencer à apprendre.
-   Develop and integrate a personal word mastery system.
-   Conduct comprehensive frontend mobile UI testing on Expo Go for all implemented features.
-   Investigate and resolve remaining incorrect emoji associations.
-   Clarify the user's mentioned fork date (October 19, 2025).
-   Add zoom and pan controls (buttons) to the Mayotte map.
-   Integrate new verb audio files provided via Google Drive (user needs to re-upload as ZIP).
-   Address the remaining 77 words across nourriture (44), famille (25), and couleurs (8) sections that are currently missing authentic audio.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was addressing a user-identified issue regarding audio-to-word mapping, specifically related to case sensitivity in audio file names. Following a data integrity diagnostic, the AI engineer executed , successfully updating 26 verb audio correspondences and resolving a key reported mismatch (oumengna / mandroubaka). Subsequently, the user explicitly requested a thorough re-analysis of *all* audio files, emphasizing case sensitivity. The AI engineer first created and ran , which failed due to a database schema mismatch ( field expected vs.  present). This was diagnosed by inspecting MongoDB. A corrected script, , was then developed and executed successfully, identifying 771 potential audio matches across various categories by correctly referencing the  field and performing case-insensitive matching. The system is now prepared to apply these newly found correspondences.
</current_work>

<optional_next_step>
Apply the identified 771 audio correspondences using a script (), pending user confirmation.
</optional_next_step>
