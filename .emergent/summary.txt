<analysis>
The trajectory details a comprehensive restoration and enhancement of the Kwezi language learning application. The work began with a user-reported data loss crisis, which was quickly identified as a backend configuration error. The AI engineer corrected the  file to point to the correct MongoDB database () and then fixed data model mismatches in  (collection name, field names) to restore API functionality.

The primary focus then shifted to data authenticity. Responding to the user's core requirement, the engineer executed a massive data enrichment project. This involved ingesting 17 user-provided ZIP archives containing authentic audio files. Through a series of custom Python scripts, the AI extracted, cleaned, and meticulously mapped 977 audio files to the 566 vocabulary words in the database, achieving 100% authentic audio coverage after several rounds of user-provided corrections.

Subsequent work focused on the frontend. The engineer debugged and fixed a mobile preview timeout issue by correcting a faulty audio API endpoint. A significant portion of the effort was then dedicated to optimizing the in-app games. This included correcting French grammar and verb conjugations in the Construire des phrases game, improving its UX to auto-advance, and adding sentence variety. The engineer also built the Découverte de Mayotte game from a conceptual stage to a functional feature, including creating a custom SVG map. The trajectory concludes with the engineer actively implementing a user request to change the app's default text-to-speech voice to a female one.
</analysis>

<product_requirements>
The Kwezi application is an educational tool for learning the Shimaoré and Kibouchi languages. The central product goal is to create a high-quality, engaging, and authentic learning experience.

**Core Requirements:**
1.  **Data Integrity:** The application's database must be a perfect mirror of the vocabulary and phrases provided by the user. All 566 words and associated sentences must be present and grammatically correct.
2.  **Audio Authenticity:** Every word and expression must have an authentic, user-provided audio pronunciation. The use of synthetic text-to-speech should be a fallback, not the primary source.
3.  **Functional Frontend:** The Expo mobile application must be stable, load correctly on mobile devices, and provide a seamless user experience without crashes or prolonged loading times.
4.  **Engaging Gamification:** The in-app games, such as Construire des phrases and Découverte de Mayotte, must be fully functional, grammatically accurate, and provide a smooth, enjoyable user flow to encourage learning. The game logic should be varied (e.g., include multiple tenses and both languages) and intuitive.
</product_requirements>

<key_technical_concepts>
- **Full-Stack Architecture:** Monorepo with a FastAPI (Python) backend, MongoDB database, and an Expo (React Native) frontend.
- **Data ETL:** Heavy reliance on single-use Python scripts using  and  for database restoration, audio file ingestion, data cleaning, and mapping authentic audio files from user-provided ZIPs.
- **API and Database Debugging:** Resolved critical bugs by correcting database/collection names in  and fixing field name mismatches ( vs. ) in .
- **Frontend Game Logic:** All game logic is consolidated within a single large component (), managing state with React Hooks (, ).
</key_technical_concepts>

<code_architecture>
The application follows a monorepo structure with distinct frontend and backend directories.



-   ****
    -   **Importance:** The core FastAPI application. It defines all API endpoints serving vocabulary, sentences, and audio streams to the frontend.
    -   **Summary of Changes:** This file was heavily modified to restore functionality. Key changes included pointing database queries to the correct collection ( instead of ), updating query parameters to use the correct field names ( instead of ), and fixing a critical bug in the audio-serving endpoint by correcting mismatched field names (). An endpoint () was also added to serve a temporary HTML page for audio testing.

-   ****
    -   **Importance:** A massive, monolithic component containing the logic for multiple in-app games, including Construire des phrases. It manages game state, fetches data, and renders the UI.
    -   **Summary of Changes:** This file was significantly refactored to improve the Construire des phrases game. The -based feedback was replaced with a more fluid, non-blocking visual feedback system. A  was added to automatically advance to the next sentence upon a correct answer, improving game flow.

-   ****
    -   **Importance:** The screen containing the newly developed Découverte de Mayotte game.
    -   **Summary of Changes:** This file was created from scratch to implement the game logic, including state management for unlocked villages, quiz questions, and user progress.

-   ****
    -   **Importance:** A reusable component that renders an interactive SVG map of Mayotte.
    -   **Summary of Changes:** The SVG path data within this component was updated to render a more geographically accurate and recognizable hippocampus shape for the island of Mayotte, based on user feedback.

-   ** (Numerous Scripts)**
    -   **Importance:** A series of transient, single-use Python scripts were created to perform complex data operations, such as applying user corrections from spreadsheets, mapping audio files, and fixing verb conjugations in the database.
</code_architecture>

<pending_tasks>
- **Complete the Voice Change:** Finish the task of changing the default text-to-speech voice from male to female across all instances where  is used in the frontend, ensuring authentic audio files remain unaffected.
</pending_tasks>

<current_work>
The immediate last task was a user request to improve the application's accessibility and user experience by changing the default text-to-speech (TTS) voice from a male voice to a female one. The user explicitly stated that this change must not overwrite or interfere with the authentic audio pronunciations that were meticulously integrated in the previous steps.

The AI engineer acknowledged this request and began the implementation. The first step was to identify all parts of the frontend codebase that utilize the  library for TTS generation. The engineer successfully located all instances of  calls across the relevant files (primarily within the game components).

The trajectory concludes at the very beginning of the modification phase. The engineer had started editing the files, adding comments and preparing to change the  parameter within the  options object to a female voice identifier. The work is mid-flight, with the analysis complete and the code modification process just underway. The core challenge is to apply this change consistently across the app while respecting the logic that prioritizes authentic audio playback.
</current_work>

<optional_next_step>
Continue the process of modifying all  calls within the frontend to use a female voice, completing the work that was just started.
</optional_next_step>
