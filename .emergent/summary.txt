<analysis>
The trajectory details an intensive data correction and backend repair process for the Kwezi educational app. The initial request was a specific, case-sensitive audio mapping fix for the verbes section. This evolved into a major database schema refactoring to support separate audio tracks for Shimaoré and Kibouchi languages, driven by user feedback. The core of the work involved multiple iterative updates where the user provided new data via ZIP files and a PDF, requiring the AI engineer to create and execute numerous Python scripts to download, extract, and map audio files, as well as correct vocabulary orthography.

A critical phase involved debugging a persistent issue where authentic audio was not playing. Initially mistaken for data loss by the user, the AI engineer correctly diagnosed it as a series of cascading backend API bugs. The root causes were identified in : the API was referencing incorrect database field names (e.g.,  vs. ), an incorrect collection name ( vs. ), and legacy data fields that conflicted with the new schema. The engineer systematically debugged and patched the API, ultimately restoring functionality. The trajectory concludes at a high-tension moment, with the user reporting a total data loss, and the AI engineer initiating an emergency diagnostic script to verify the database's state.
</analysis>

<product_requirements>
The Kwezi app is an educational tool for learning Shimaoré and Kibouchi. The primary focus of the work was to ensure the data integrity and functionality of the verbes vocabulary section.

Key requirements were:
1.  **Correct Audio-to-Word Mapping:** Ensure authentic audio pronunciations from user-provided files are correctly associated with their corresponding words, including handling case-sensitivity in filenames.
2.  **Dual Language Audio System:** Implement a clear database structure that separates Shimaoré and Kibouchi translations and their respective audio files, eliminating the ambiguity of a single audio field serving both languages.
3.  **Data Accuracy from Source:** Repeatedly update the database using data provided by the user through ZIP files (containing audio) and a PDF (containing correct orthography for all vocabulary sections). This required a complete re-mapping of verb pronunciations multiple times.
4.  **Backend API Functionality:** The backend must reliably serve the correct, separate audio files for both languages when requested by the frontend.
5.  **Frontend Polish:** Minor requests included changing the Text-to-Speech voice from masculine to feminine and investigating issues with the app loading in Expo Go.
</product_requirements>

<key_technical_concepts>
- **Full-Stack Architecture:** Expo (React Native) frontend, FastAPI backend, and a MongoDB database.
- **Data Migration & ETL:** Extensive use of single-run Python scripts with  to perform complex data transformations, including schema changes (adding new fields for dual audio), data correction (orthography), and mapping new audio files to database entries.
- **API Debugging:** Use of  and custom diagnostic scripts to identify and resolve critical backend bugs, including 404s, 405s, and 500 Internal Server Errors in the FastAPI application.
- **File & Asset Management:** Downloading, extracting (), and managing user-provided ZIP archives containing audio assets.
</key_technical_concepts>

<code_architecture>
The application follows a standard full-stack monorepo structure with distinct frontend and backend directories.

**/app**
├── **backend/**
│   ├── **server.py**: The main FastAPI application file. This was the most critical file modified, with multiple edits to its audio-serving API endpoints to correct bugs related to wrong collection names, incorrect field lookups ( vs ), and outdated schema references.
│   ├── **(Numerous Scripts)**: A large number of single-use Python scripts were created for data manipulation. Key examples include:
│   │   - : Altered the MongoDB schema for verbs to support separate audio tracks.
│   │   - : Parsed user-provided data to perform a mass update of verb translations and audio links.
│   │   - : Removed legacy database fields that were causing conflicts in the API.
│   │   - : A script that patched  to resolve the final API bugs.
│   │   - : The last script created, intended to perform an urgent check on the database's status.
│   └── ...
├── **frontend/**
│   ├── **app/**: Contains the Expo Router screens.
│   ├── **assets/audio/**: Directory where all the authentic audio  files are stored, organized by category (e.g., ).
│   ├── **utils/**
│   │   - **enhancedSpeechUtils.ts**: This utility manages the Text-to-Speech (TTS) functionality. It was edited to change the default voice from 'masculine' to 'feminine'.
│   │   - **voiceTestUtils.ts**: A related testing utility that was also updated to reflect the change to a feminine voice.
│   └── ...
└── ...

The workflow heavily relied on creating temporary Python scripts within the  directory to perform targeted, irreversible data operations on the live MongoDB database.
</code_architecture>

<pending_tasks>
- **Complete Orthography Correction:** The task of correcting vocabulary spelling based on the user's PDF is incomplete. Only the Nature section was corrected, and the Corps humain section was added as new. All other sections from the PDF still need to be processed.
- **Resolve Expo Go Loading Issues:** The user reported that the application has trouble opening with Expo Go. This issue was acknowledged, but debugging was preempted by the more critical data loss emergency.
- **Confirm Data Integrity with User:** The most urgent pending task is to address the user's concern about total data loss.
</pending_tasks>

<current_work>
The AI engineer had just completed a critical and complex debugging session to fix the backend's audio API. After multiple failed attempts by the user to hear the correct authentic pronunciations, the engineer discovered the problem was not lost data, but a series of bugs in . The API was referencing an incorrect database collection ( instead of ) and using outdated/incorrect field names ( instead of ).

The engineer successfully patched the API, confirmed with  that audio files were being served correctly, and concluded that the problem was fully resolved. However, the user, likely experiencing caching issues or misinterpreting the fallback TTS behavior, reported in distress: **toute la base de données est perdu comment explique cela ?** (the whole database is lost how do you explain that?).

In response to this emergency, the AI engineer's immediate last action was to create the script  to perform a live check of the database's state and prove that the data is, in fact, intact. The trajectory ends at this cliffhanger, with the script created but not yet executed.
</current_work>

<optional_next_step>
Execute the  script to get an immediate count of documents in the  collection and other relevant stats to definitively confirm the database's integrity.
</optional_next_step>
