#!/usr/bin/env python3
"""
Script de correction cibl√©e pour appliquer pr√©cis√©ment les corrections du PDF
Corrige les probl√®mes identifi√©s par le testing agent
"""

from dotenv import load_dotenv
load_dotenv()

from pymongo import MongoClient
import os
import re
from datetime import datetime

# Configuration MongoDB
MONGO_URL = os.getenv('MONGO_URL')
client = MongoClient(MONGO_URL)
db = client.kwezi
words_collection = db.words

def fix_escargot_translation():
    """Corrige la traduction d'escargot: 'kwa' -> 'kowa'"""
    print("üêå CORRECTION ESCARGOT: kwa -> kowa")
    
    # Trouver l'escargot avec 'kwa'
    escargot_kwa = words_collection.find_one({"french": "escargot", "shimaore": "kwa"})
    if escargot_kwa:
        words_collection.update_one(
            {"_id": escargot_kwa["_id"]},
            {"$set": {"shimaore": "kowa"}}
        )
        print("  ‚úÖ Escargot corrig√©: 'kwa' -> 'kowa'")
        return True
    else:
        print("  ‚ÑπÔ∏è Escargot avec 'kwa' non trouv√©")
        return False

def fix_oursin_huitre_translations():
    """Diff√©rencie les traductions d'oursin et d'hu√Ætre"""
    print("ü¶™ CORRECTION OURSIN/HUITRE: diff√©renciation")
    
    # Corriger oursin
    oursin = words_collection.find_one({"french": "oursin"})
    if oursin and oursin.get("shimaore") == "gadzassi":
        words_collection.update_one(
            {"_id": oursin["_id"]},
            {"$set": {"shimaore": "gadzassi ya bahari"}}
        )
        print("  ‚úÖ Oursin diff√©renci√©: 'gadzassi ya bahari'")
    
    # Corriger hu√Ætre
    huitre = words_collection.find_one({"french": "hu√Ætre"})
    if huitre and huitre.get("shimaore") == "gadzassi":
        words_collection.update_one(
            {"_id": huitre["_id"]},
            {"$set": {"shimaore": "gadzassi ya mshindi"}}
        )
        print("  ‚úÖ Hu√Ætre diff√©renci√©e: 'gadzassi ya mshindi'")
    
    return True

def remove_french_accents():
    """Supprime les accents des mots fran√ßais"""
    print("üìù SUPPRESSION ACCENTS FRAN√áAIS")
    
    accent_map = {
        '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
        '√†': 'a', '√¢': 'a', '√§': 'a', '√°': 'a',
        '√π': 'u', '√ª': 'u', '√º': 'u', '√∫': 'u',
        '√¥': 'o', '√∂': 'o', '√≥': 'o', '√≤': 'o',
        '√Æ': 'i', '√Ø': 'i', '√≠': 'i', '√¨': 'i',
        '√ß': 'c', '√±': 'n',
        '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
        '√Ä': 'A', '√Ç': 'A', '√Ñ': 'A', '√Å': 'A',
        '√ô': 'U', '√õ': 'U', '√ú': 'U', '√ö': 'U',
        '√î': 'O', '√ñ': 'O', '√ì': 'O', '√í': 'O',
        '√é': 'I', '√è': 'I', '√ç': 'I', '√å': 'I',
        '√á': 'C', '√ë': 'N'
    }
    
    def remove_accents(text):
        """Supprime les accents d'une cha√Æne"""
        if not text:
            return text
        result = text
        for accented, plain in accent_map.items():
            result = result.replace(accented, plain)
        return result
    
    # Trouver tous les mots avec accents fran√ßais
    words_with_accents = list(words_collection.find({}))
    corrections_count = 0
    
    for word in words_with_accents:
        original_french = word.get('french', '')
        corrected_french = remove_accents(original_french)
        
        if original_french != corrected_french:
            words_collection.update_one(
                {"_id": word["_id"]},
                {"$set": {"french": corrected_french}}
            )
            print(f"  üìù {original_french} -> {corrected_french}")
            corrections_count += 1
    
    print(f"  üìä {corrections_count} mots fran√ßais corrig√©s")
    return corrections_count

def remove_shimaore_accents():
    """Supprime les accents des traductions shimaor√©"""
    print("üìù SUPPRESSION ACCENTS SHIMAOR√â")
    
    accent_map = {
        '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
        '√†': 'a', '√¢': 'a', '√§': 'a', '√°': 'a',
        '√π': 'u', '√ª': 'u', '√º': 'u', '√∫': 'u',
        '√¥': 'o', '√∂': 'o', '√≥': 'o', '√≤': 'o',
        '√Æ': 'i', '√Ø': 'i', '√≠': 'i', '√¨': 'i',
        '√ß': 'c', '√±': 'n'
    }
    
    def remove_accents(text):
        """Supprime les accents d'une cha√Æne"""
        if not text:
            return text
        result = text
        for accented, plain in accent_map.items():
            result = result.replace(accented, plain)
        return result
    
    # Trouver tous les mots avec accents shimaor√©
    words_with_accents = list(words_collection.find({"shimaore": {"$regex": "[√©√®√™√´√†√¢√§√°√π√ª√º√∫√¥√∂√≥√≤√Æ√Ø√≠√¨√ß√±]"}}))
    corrections_count = 0
    
    for word in words_with_accents:
        original_shimaore = word.get('shimaore', '')
        corrected_shimaore = remove_accents(original_shimaore)
        
        if original_shimaore != corrected_shimaore:
            words_collection.update_one(
                {"_id": word["_id"]},
                {"$set": {"shimaore": corrected_shimaore}}
            )
            print(f"  üìù {word.get('french', '')}: {original_shimaore} -> {corrected_shimaore}")
            corrections_count += 1
    
    print(f"  üìä {corrections_count} traductions shimaor√© corrig√©es")
    return corrections_count

def add_missing_pdf_words():
    """Ajoute les mots manquants identifi√©s dans le PDF"""
    print("‚ûï AJOUT MOTS MANQUANTS DU PDF")
    
    missing_words = [
        {"french": "pente", "shimaore": "mlima", "kibouchi": "boungou", "category": "nature"},
    ]
    
    added_count = 0
    for word_data in missing_words:
        # V√©rifier si le mot existe
        existing = words_collection.find_one({"french": word_data["french"]})
        if not existing:
            word_data["emoji"] = ""
            word_data["has_image"] = False
            words_collection.insert_one(word_data)
            print(f"  ‚ûï Ajout√©: {word_data['french']}")
            added_count += 1
        else:
            # Mettre √† jour avec kibouchi si manquant
            if not existing.get("kibouchi") and word_data.get("kibouchi"):
                words_collection.update_one(
                    {"_id": existing["_id"]},
                    {"$set": {"kibouchi": word_data["kibouchi"]}}
                )
                print(f"  üîÑ Mis √† jour kibouchi: {word_data['french']} -> {word_data['kibouchi']}")
    
    print(f"  üìä {added_count} mots ajout√©s")
    return added_count

def verify_bigorno_bigorneau():
    """V√©rifie la correction bigorno/bigorneau"""
    print("üê¢ V√âRIFICATION BIGORNO/BIGORNEAU")
    
    bigorno = words_collection.find_one({"shimaore": "bigorno"})
    bigorneau = words_collection.find_one({"french": "bigorneau"})
    
    if bigorno:
        print(f"  ‚ö†Ô∏è 'bigorno' trouv√©: {bigorno.get('french')} -> {bigorno.get('shimaore')}")
        # Supprimer bigorno si c'est pour tortue
        if bigorno.get('french') == 'tortue':
            words_collection.delete_one({"_id": bigorno["_id"]})
            print("  üóëÔ∏è Supprim√©: tortue -> bigorno")
    else:
        print("  ‚úÖ Aucun 'bigorno' trouv√©")
    
    if bigorneau:
        print(f"  ‚úÖ 'bigorneau' confirm√©: {bigorneau.get('shimaore')}")
    else:
        print("  ‚ùå 'bigorneau' manquant")
    
    return True

def generate_verification_report():
    """G√©n√®re un rapport de v√©rification apr√®s corrections"""
    print("\nüìä RAPPORT DE V√âRIFICATION")
    print("=" * 50)
    
    # Statistiques g√©n√©rales
    total_words = words_collection.count_documents({})
    print(f"Total des mots: {total_words}")
    
    # V√©rifier les doublons
    pipeline = [
        {"$group": {"_id": "$french", "count": {"$sum": 1}, "docs": {"$push": "$_id"}}},
        {"$match": {"count": {"$gt": 1}}}
    ]
    
    duplicates = list(words_collection.aggregate(pipeline))
    print(f"Doublons: {len(duplicates)}")
    if duplicates:
        for dup in duplicates[:5]:
            print(f"  - '{dup['_id']}': {dup['count']} occurrences")
    
    # V√©rifier les mots avec accents fran√ßais
    french_with_accents = words_collection.count_documents({"french": {"$regex": "[√©√®√™√´√†√¢√§√°√π√ª√º√∫√¥√∂√≥√≤√Æ√Ø√≠√¨√ß√±√â√à√ä√ã√Ä√Ç√Ñ√Å√ô√õ√ú√ö√î√ñ√ì√í√é√è√ç√å√á√ë]"}})
    print(f"Mots fran√ßais avec accents: {french_with_accents}")
    
    # V√©rifier les traductions shimaor√© avec accents
    shimaore_with_accents = words_collection.count_documents({"shimaore": {"$regex": "[√©√®√™√´√†√¢√§√°√π√ª√º√∫√¥√∂√≥√≤√Æ√Ø√≠√¨√ß√±]"}})
    print(f"Traductions shimaor√© avec accents: {shimaore_with_accents}")
    
    # V√©rifier couverture kibouchi
    with_kibouchi = words_collection.count_documents({"kibouchi": {"$ne": ""}})
    kibouchi_coverage = (with_kibouchi / total_words * 100) if total_words > 0 else 0
    print(f"Couverture kibouchi: {with_kibouchi}/{total_words} ({kibouchi_coverage:.1f}%)")
    
    # V√©rifier cas sp√©cifiques
    escargot = words_collection.find_one({"french": "escargot"})
    if escargot:
        print(f"Escargot: {escargot.get('shimaore', 'N/A')}")
    
    oursin = words_collection.find_one({"french": "oursin"})
    if oursin:
        print(f"Oursin: {oursin.get('shimaore', 'N/A')}")
    
    huitre = words_collection.find_one({"french": "hu√Ætre"})
    if huitre:
        print(f"Hu√Ætre: {huitre.get('shimaore', 'N/A')}")
    
    pente = words_collection.find_one({"french": "pente"})
    if pente:
        print(f"Pente: shimaore={pente.get('shimaore', 'N/A')}, kibouchi={pente.get('kibouchi', 'N/A')}")
    
    ecole_no_accent = words_collection.find_one({"french": "ecole"})
    if ecole_no_accent:
        print(f"√âcole (sans accent): trouv√©e")
    else:
        ecole_with_accent = words_collection.find_one({"french": "√©cole"})
        if ecole_with_accent:
            print(f"√âcole (avec accent): encore pr√©sente")

def main():
    """Fonction principale de correction"""
    print("üîß CORRECTION CIBL√âE DES ERREURS PDF")
    print("=" * 50)
    print(f"Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # 1. Corriger escargot kwa -> kowa
        fix_escargot_translation()
        
        # 2. Diff√©rencier oursin/hu√Ætre
        fix_oursin_huitre_translations()
        
        # 3. Supprimer accents fran√ßais
        french_corrections = remove_french_accents()
        
        # 4. Supprimer accents shimaor√©
        shimaore_corrections = remove_shimaore_accents()
        
        # 5. Ajouter mots manquants
        added_words = add_missing_pdf_words()
        
        # 6. V√©rifier bigorno/bigorneau
        verify_bigorno_bigorneau()
        
        # 7. Rapport de v√©rification
        generate_verification_report()
        
        print(f"\n‚úÖ CORRECTIONS APPLIQU√âES!")
        print(f"  - Corrections fran√ßais: {french_corrections}")
        print(f"  - Corrections shimaor√©: {shimaore_corrections}")
        print(f"  - Mots ajout√©s: {added_words}")
        
    except Exception as e:
        print(f"‚ùå ERREUR: {str(e)}")
        raise

if __name__ == "__main__":
    main()