#!/usr/bin/env python3
"""
Script pour mettre √† jour la section "v√™tement" dans la base de donn√©es
avec les nouvelles donn√©es du vocabulaire des v√™tements en shimaor√© et kibouchi.
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import logging

# Charger les variables d'environnement
load_dotenv()

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Nouvelles donn√©es v√™tement avec orthographe corrig√©e
VETEMENT_DATA_CORRECTED = [
    {"french": "v√™tement", "shimaor√©": "ngouwo", "kibouchi": "ankandzou"},
    {"french": "salouva", "shimaor√©": "salouva", "kibouchi": "salouvagna"},
    {"french": "chemise", "shimaor√©": "chimizi", "kibouchi": "chimizi"},
    {"french": "pantalon", "shimaor√©": "sourouali", "kibouchi": "sourouali"},
    {"french": "short", "shimaor√©": "kaliso", "kibouchi": "kaliso"},
    {"french": "sous-v√™tement", "shimaor√©": "silipou", "kibouchi": "silipou"},
    {"french": "chapeau", "shimaor√©": "kofia", "kibouchi": "kofia"},
    {"french": "kamiss", "shimaor√©": "kandzou bol√©", "kibouchi": "ankandzou b√©"},
    {"french": "boubou", "shimaor√©": "kandzou bol√©", "kibouchi": "ankandzou b√©"},
    {"french": "haut de salouva", "shimaor√©": "body", "kibouchi": "body"},
    {"french": "t-shirt", "shimaor√©": "kandzou", "kibouchi": "ankandzou"},
    {"french": "chaussures", "shimaor√©": "kabwa", "kibouchi": "kabwa"},
    {"french": "baskets", "shimaor√©": "magochi", "kibouchi": "magochi"},
    {"french": "tongs", "shimaor√©": "sapatri", "kibouchi": "kabwa sapatri"},
    {"french": "jupe", "shimaor√©": "jipo", "kibouchi": "jipou"},
    {"french": "robe", "shimaor√©": "robo", "kibouchi": "robou"},
    {"french": "voile", "shimaor√©": "kichali", "kibouchi": "kichali"}
]

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        if not mongo_url:
            raise ValueError("MONGO_URL non trouv√©e dans les variables d'environnement")
        
        client = MongoClient(mongo_url)
        db = client['shimaor√©_app']
        logger.info("Connexion √† la base de donn√©es r√©ussie")
        return db
    except Exception as e:
        logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
        raise

def get_clothing_emoji(french_name):
    """Retourne un emoji appropri√© pour le v√™tement donn√©"""
    emoji_map = {
        "v√™tement": "üëï", "salouva": "üëó", "chemise": "üëî", "pantalon": "üëñ", 
        "short": "ü©≥", "sous-v√™tement": "ü©≤", "chapeau": "üé©", "kamiss": "üëï",
        "boubou": "üëò", "haut de salouva": "üëö", "t-shirt": "üëï", 
        "chaussures": "üëû", "baskets": "üëü", "tongs": "ü©¥", "jupe": "üëó",
        "robe": "üëó", "voile": "üßï"
    }
    
    return emoji_map.get(french_name.lower(), "üëï")

def compare_and_update_vetement(db):
    """Compare et met √† jour l'orthographe des mots de v√™tement"""
    collection = db['vocabulary']
    
    # R√©cup√©rer les mots actuels de la section v√™tement
    current_words = list(collection.find({"section": "vetements"}))
    logger.info(f"Mots actuels dans la section v√™tements: {len(current_words)}")
    
    corrections_count = 0
    additions_count = 0
    
    # Cr√©er un dictionnaire pour faciliter les comparaisons
    current_dict = {word.get('french', '').lower(): word for word in current_words}
    
    logger.info("\n=== ANALYSE DES CORRECTIONS ORTHOGRAPHIQUES ===")
    
    for corrected_word in VETEMENT_DATA_CORRECTED:
        french_key = corrected_word['french'].lower()
        
        if french_key in current_dict:
            # Le mot existe, v√©rifier s'il y a des corrections
            current_word = current_dict[french_key]
            current_shimaore = current_word.get('shimaor√©', '')
            current_kibouchi = current_word.get('kibouchi', '')
            
            corrected_shimaore = corrected_word['shimaor√©']
            corrected_kibouchi = corrected_word['kibouchi']
            
            needs_update = False
            changes = []
            
            if current_shimaore != corrected_shimaore:
                changes.append(f"shimaor√©: '{current_shimaore}' ‚Üí '{corrected_shimaore}'")
                needs_update = True
                
            if current_kibouchi != corrected_kibouchi:
                changes.append(f"kibouchi: '{current_kibouchi}' ‚Üí '{corrected_kibouchi}'")
                needs_update = True
            
            if needs_update:
                logger.info(f"üìù CORRECTION - {corrected_word['french']}: {' | '.join(changes)}")
                
                # Mettre √† jour le document
                emoji = get_clothing_emoji(corrected_word['french'])
                result = collection.update_one(
                    {"_id": current_word['_id']},
                    {
                        "$set": {
                            "shimaor√©": corrected_shimaore,
                            "kibouchi": corrected_kibouchi,
                            "emoji": emoji,
                            "orthography_updated": True
                        }
                    }
                )
                
                if result.modified_count > 0:
                    corrections_count += 1
            else:
                logger.info(f"‚úÖ OK - {corrected_word['french']}: Orthographe correcte")
        else:
            # Nouveau mot √† ajouter
            logger.info(f"‚ûï NOUVEAU - {corrected_word['french']}: Ajout √† la base de donn√©es")
            
            emoji = get_clothing_emoji(corrected_word['french'])
            
            # Cr√©er le nom de fichier audio de mani√®re s√©par√©e
            audio_base_name = corrected_word['french'].lower().replace(' ', '_').replace("'", '_').replace('-', '_')
            
            new_document = {
                "section": "vetements",
                "french": corrected_word['french'],
                "shimaor√©": corrected_word['shimaor√©'],
                "kibouchi": corrected_word['kibouchi'],
                "emoji": emoji,
                "audio_shimaor√©": f"audio/{audio_base_name}_shimaor√©.mp3",
                "audio_kibouchi": f"audio/{audio_base_name}_kibouchi.mp3"
            }
            
            result = collection.insert_one(new_document)
            if result.inserted_id:
                additions_count += 1
    
    logger.info(f"\n=== R√âSUM√â DES MODIFICATIONS ===")
    logger.info(f"Corrections orthographiques appliqu√©es: {corrections_count}")
    logger.info(f"Nouveaux mots ajout√©s: {additions_count}")
    logger.info(f"Total des modifications: {corrections_count + additions_count}")
    
    return corrections_count, additions_count

def main():
    """Fonction principale"""
    logger.info("D√©but de la mise √† jour de la section v√™tement")
    
    try:
        # Connexion √† la base de donn√©es
        db = connect_to_database()
        
        # Comparer et mettre √† jour
        corrections, additions = compare_and_update_vetement(db)
        
        if corrections > 0 or additions > 0:
            logger.info(f"üéâ Mise √† jour de la section v√™tement termin√©e avec succ√®s!")
            logger.info(f"   - {corrections} corrections appliqu√©es")
            logger.info(f"   - {additions} nouveaux mots ajout√©s")
        else:
            logger.info("‚ÑπÔ∏è Aucune correction n√©cessaire - l'orthographe √©tait d√©j√† correcte")
            
    except Exception as e:
        logger.error(f"Erreur dans le script principal: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())