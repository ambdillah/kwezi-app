#!/usr/bin/env python3
"""
Finalise la correspondance pour "oumengna" en utilisant le fichier Oumengna.m4a trouv√©
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import shutil
import logging

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        client = MongoClient(mongo_url)
        db = client['shimaor√©_app']
        logger.info("Connexion √† la base de donn√©es r√©ussie")
        return db
    except Exception as e:
        logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
        raise

def handle_oumengna_audio():
    """G√®re le fichier audio pour 'oumengna'"""
    
    logger.info("üéØ GESTION SP√âCIALE DU FICHIER OUMENGNA")
    
    # Chemins des fichiers
    source_file = "/app/frontend/assets/audio/adjectifs/Oumengna.m4a"
    target_file = "/app/frontend/assets/audio/verbes/Oumengna.m4a"
    
    if os.path.exists(source_file):
        file_size = os.path.getsize(source_file)
        logger.info(f"üìÅ Fichier trouv√©: {source_file} ({file_size} bytes)")
        
        # V√©rifier si le fichier existe d√©j√† dans verbes
        if os.path.exists(target_file):
            logger.info(f"‚úÖ Le fichier existe d√©j√† dans verbes: {target_file}")
        else:
            # Copier le fichier dans le dossier verbes
            try:
                shutil.copy2(source_file, target_file)
                logger.info(f"üìã Fichier copi√© vers: {target_file}")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la copie: {e}")
                return False
        
        return True
    else:
        logger.error(f"‚ùå Fichier source non trouv√©: {source_file}")
        return False

def update_abimer_verb_audio():
    """Met √† jour le verbe 'ab√Æmer' avec le fichier audio shimaor√© correct"""
    
    db = connect_to_database()
    collection = db['vocabulary']
    
    logger.info("üîÑ MISE √Ä JOUR VERBE 'AB√éMER'")
    
    # Trouver le verbe "ab√Æmer"
    abimer_verb = collection.find_one({
        "section": "verbes",
        "french": "ab√Æmer"
    })
    
    if not abimer_verb:
        logger.error("‚ùå Verbe 'ab√Æmer' non trouv√©")
        return False
    
    logger.info(f"üìù Verbe trouv√©:")
    logger.info(f"  Fran√ßais: {abimer_verb.get('french', 'N/A')}")
    logger.info(f"  Shimaor√©: {abimer_verb.get('shimaor√©', 'N/A')}")
    logger.info(f"  Kibouchi: {abimer_verb.get('kibouchi', 'N/A')}")
    
    # Mettre √† jour avec le fichier audio shimaor√©
    update_data = {
        "audio_shimaor√©_filename": "Oumengna.m4a",
        "audio_shimaor√©_url": "audio/verbes/Oumengna.m4a",
        "has_shimaor√©_audio": True,
        "oumengna_problem_resolved": True
    }
    
    result = collection.update_one(
        {"_id": abimer_verb["_id"]},
        {"$set": update_data}
    )
    
    if result.modified_count > 0:
        logger.info("‚úÖ Verbe 'ab√Æmer' mis √† jour avec succ√®s")
        logger.info(f"  Audio shimaor√©: Oumengna.m4a")
        logger.info(f"  Audio kibouchi: {abimer_verb.get('audio_kibouchi_filename', 'N/A')}")
        return True
    else:
        logger.error("‚ùå √âchec de la mise √† jour")
        return False

def verify_final_result():
    """V√©rifie le r√©sultat final pour le probl√®me 'oumengna'"""
    
    db = connect_to_database()
    collection = db['vocabulary']
    
    logger.info("üîç V√âRIFICATION FINALE")
    
    # R√©cup√©rer le verbe mis √† jour
    abimer_verb = collection.find_one({
        "section": "verbes", 
        "french": "ab√Æmer"
    })
    
    if abimer_verb:
        logger.info(f"üìä √âTAT FINAL DU VERBE 'AB√éMER':")
        logger.info(f"  Fran√ßais: {abimer_verb.get('french', 'N/A')}")
        logger.info(f"  Shimaor√©: {abimer_verb.get('shimaor√©', 'N/A')}")
        logger.info(f"  Kibouchi: {abimer_verb.get('kibouchi', 'N/A')}")
        logger.info(f"  Audio shimaor√©: {abimer_verb.get('audio_shimaor√©_filename', 'Aucun')}")
        logger.info(f"  Audio kibouchi: {abimer_verb.get('audio_kibouchi_filename', 'Aucun')}")
        logger.info(f"  Has shimaor√© audio: {abimer_verb.get('has_shimaor√©_audio', False)}")
        logger.info(f"  Has kibouchi audio: {abimer_verb.get('has_kibouchi_audio', False)}")
        
        # V√©rifier que les fichiers existent
        shimaore_file = f"/app/frontend/assets/{abimer_verb.get('audio_shimaor√©_url', '')}"
        kibouchi_file = f"/app/frontend/assets/{abimer_verb.get('audio_kibouchi_url', '')}"
        
        shimaore_exists = os.path.exists(shimaore_file) if abimer_verb.get('audio_shimaor√©_url') else False
        kibouchi_exists = os.path.exists(kibouchi_file) if abimer_verb.get('audio_kibouchi_url') else False
        
        logger.info(f"  Fichier shimaor√© existe: {'‚úÖ' if shimaore_exists else '‚ùå'}")
        logger.info(f"  Fichier kibouchi existe: {'‚úÖ' if kibouchi_exists else '‚ùå'}")
        
        # V√©rifier si le probl√®me est r√©solu
        if ('oumengna' in abimer_verb.get('shimaor√©', '').lower() and 
            abimer_verb.get('has_shimaor√©_audio', False) and
            shimaore_exists):
            logger.info("üéâ PROBL√àME 'OUMENGNA' COMPL√àTEMENT R√âSOLU!")
            logger.info("  ‚úÖ Shimaor√© 'oumengna' a son propre fichier audio")
            logger.info("  ‚úÖ Kibouchi 'manapaka somboutrou' a son propre fichier audio")
            logger.info("  ‚úÖ Pas de confusion entre les langues")
            return True
        else:
            logger.warning("‚ö†Ô∏è Probl√®me partiellement r√©solu")
            return False
    
    return False

def update_statistics():
    """Met √† jour les statistiques g√©n√©rales"""
    
    db = connect_to_database()
    collection = db['vocabulary']
    
    # Statistiques finales
    total_verbs = collection.count_documents({"section": "verbes"})
    verbs_with_shimaore_audio = collection.count_documents({
        "section": "verbes",
        "has_shimaor√©_audio": True
    })
    verbs_with_kibouchi_audio = collection.count_documents({
        "section": "verbes", 
        "has_kibouchi_audio": True
    })
    verbs_with_both_audio = collection.count_documents({
        "section": "verbes",
        "has_shimaor√©_audio": True,
        "has_kibouchi_audio": True
    })
    
    logger.info(f"\nüìà STATISTIQUES FINALES VERBES:")
    logger.info(f"  Total verbes: {total_verbs}")
    logger.info(f"  Avec audio shimaor√©: {verbs_with_shimaore_audio} ({verbs_with_shimaore_audio/total_verbs*100:.1f}%)")
    logger.info(f"  Avec audio kibouchi: {verbs_with_kibouchi_audio} ({verbs_with_kibouchi_audio/total_verbs*100:.1f}%)")
    logger.info(f"  Avec audio des deux: {verbs_with_both_audio} ({verbs_with_both_audio/total_verbs*100:.1f}%)")
    
    return {
        'total': total_verbs,
        'shimaore': verbs_with_shimaore_audio,
        'kibouchi': verbs_with_kibouchi_audio,
        'both': verbs_with_both_audio
    }

def main():
    """Fonction principale"""
    logger.info("üéØ FINALISATION CORRESPONDANCE OUMENGNA")
    
    try:
        # 1. G√©rer le fichier audio Oumengna.m4a
        if not handle_oumengna_audio():
            logger.error("√âchec de la gestion du fichier audio")
            return False
        
        # 2. Mettre √† jour le verbe 'ab√Æmer'
        if not update_abimer_verb_audio():
            logger.error("√âchec de la mise √† jour du verbe")
            return False
        
        # 3. V√©rifier le r√©sultat final
        success = verify_final_result()
        
        # 4. Statistiques finales
        stats = update_statistics()
        
        # 5. R√©sum√©
        logger.info(f"\n{'='*80}")
        logger.info("R√âSUM√â FINALISATION OUMENGNA")
        logger.info(f"{'='*80}")
        logger.info(f"üéØ Probl√®me r√©solu: {'‚úÖ OUI' if success else '‚ùå NON'}")
        logger.info(f"üìä Coverage mise √† jour:")
        logger.info(f"  - Shimaor√©: {stats['shimaore']}/{stats['total']} ({stats['shimaore']/stats['total']*100:.1f}%)")
        logger.info(f"  - Kibouchi: {stats['kibouchi']}/{stats['total']} ({stats['kibouchi']/stats['total']*100:.1f}%)")
        
        return success
        
    except Exception as e:
        logger.error(f"Erreur dans la finalisation: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)