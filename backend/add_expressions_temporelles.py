#!/usr/bin/env python3
"""
Ajout de 7 nouvelles expressions temporelles avec leurs audios
Date: 14 octobre 2025
Cat√©gorie: expressions
"""

from pymongo import MongoClient
from dotenv import load_dotenv
import os
from datetime import datetime

load_dotenv()

mongo_url = os.getenv('MONGO_URL')
client = MongoClient(mongo_url)
db = client[os.getenv('DB_NAME', 'mayotte_app')]

print("=" * 80)
print("AJOUT DE 7 NOUVELLES EXPRESSIONS TEMPORELLES")
print("=" * 80)
print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print()

# D√©finir les 7 nouvelles expressions avec TOUTES leurs m√©tadonn√©es
nouvelles_expressions = [
    {
        'french': "Aujourd'hui",
        'shimaore': 'l√©o',
        'kibouchi': 'nyani',
        'shimaore_audio_filename': 'L√©o.m4a',
        'kibouchi_audio_filename': 'Nyani.m4a',
        'category': 'expressions',
        'difficulty': 1,
        'audio_category': 'expressions',
        'dual_audio_system': True,
        'has_shimaore_audio': True,
        'has_kibouchi_audio': True,
        'created_at': datetime.utcnow(),
        'updated_at': datetime.utcnow(),
        'audio_source': 'authentic',
        'audio_updated_at': datetime.utcnow()
    },
    {
        'french': 'demain',
        'shimaore': 'm√©sso',
        'kibouchi': 'amar√©yi',
        'shimaore_audio_filename': 'M√©sso.m4a',
        'kibouchi_audio_filename': 'Amar√©yi.m4a',
        'category': 'expressions',
        'difficulty': 1,
        'audio_category': 'expressions',
        'dual_audio_system': True,
        'has_shimaore_audio': True,
        'has_kibouchi_audio': True,
        'created_at': datetime.utcnow(),
        'updated_at': datetime.utcnow(),
        'audio_source': 'authentic',
        'audio_updated_at': datetime.utcnow()
    },
    {
        'french': 'apr√®s demain',
        'shimaore': 'bada m√©sso',
        'kibouchi': 'hafaaka amar√©yi',
        'shimaore_audio_filename': 'Bada m√©sso.m4a',
        'kibouchi_audio_filename': 'Hafaka amar√©yi.m4a',
        'category': 'expressions',
        'difficulty': 2,
        'audio_category': 'expressions',
        'dual_audio_system': True,
        'has_shimaore_audio': True,
        'has_kibouchi_audio': True,
        'created_at': datetime.utcnow(),
        'updated_at': datetime.utcnow(),
        'audio_source': 'authentic',
        'audio_updated_at': datetime.utcnow()
    },
    {
        'french': 'hier',
        'shimaore': 'jana',
        'kibouchi': 'nimoili',
        'shimaore_audio_filename': 'Jana.m4a',
        'kibouchi_audio_filename': 'Nimoili.m4a',
        'category': 'expressions',
        'difficulty': 1,
        'audio_category': 'expressions',
        'dual_audio_system': True,
        'has_shimaore_audio': True,
        'has_kibouchi_audio': True,
        'created_at': datetime.utcnow(),
        'updated_at': datetime.utcnow(),
        'audio_source': 'authentic',
        'audio_updated_at': datetime.utcnow()
    },
    {
        'french': 'avant-hier',
        'shimaore': 'zouzi',
        'kibouchi': 'nafaka nimoili',
        'shimaore_audio_filename': 'Zouzi.m4a',
        'kibouchi_audio_filename': 'Nafaka nimoili.m4a',
        'category': 'expressions',
        'difficulty': 2,
        'audio_category': 'expressions',
        'dual_audio_system': True,
        'has_shimaore_audio': True,
        'has_kibouchi_audio': True,
        'created_at': datetime.utcnow(),
        'updated_at': datetime.utcnow(),
        'audio_source': 'authentic',
        'audio_updated_at': datetime.utcnow()
    },
    {
        'french': "l'ann√©e prochaine",
        'shimaore': 'moihani',
        'kibouchi': 'moikani',
        'shimaore_audio_filename': 'Moihani.m4a',
        'kibouchi_audio_filename': 'Moikani.m4a',
        'category': 'expressions',
        'difficulty': 2,
        'audio_category': 'expressions',
        'dual_audio_system': True,
        'has_shimaore_audio': True,
        'has_kibouchi_audio': True,
        'created_at': datetime.utcnow(),
        'updated_at': datetime.utcnow(),
        'audio_source': 'authentic',
        'audio_updated_at': datetime.utcnow()
    },
    {
        'french': "l'ann√©e derni√®re",
        'shimaore': 'moiha jana',
        'kibouchi': 'moikadjana',
        'shimaore_audio_filename': 'Moiha jana.m4a',
        'kibouchi_audio_filename': 'Moikadjana.m4a',
        'category': 'expressions',
        'difficulty': 2,
        'audio_category': 'expressions',
        'dual_audio_system': True,
        'has_shimaore_audio': True,
        'has_kibouchi_audio': True,
        'created_at': datetime.utcnow(),
        'updated_at': datetime.utcnow(),
        'audio_source': 'authentic',
        'audio_updated_at': datetime.utcnow()
    }
]

# V√©rifier l'√©tat initial
count_before = db['words'].count_documents({'category': 'expressions'})
print(f"üìä Expressions avant ajout: {count_before}")
print()

# Ajouter chaque expression avec v√©rification
successful_adds = 0
failed_adds = 0
already_exists = 0

for expr in nouvelles_expressions:
    print(f"{'='*80}")
    print(f"Traitement: {expr['french']}")
    print(f"{'='*80}")
    
    # V√©rifier si existe d√©j√†
    existing = db['words'].find_one({
        'french': expr['french'],
        'category': 'expressions'
    })
    
    if existing:
        print(f"‚ö†Ô∏è  Expression d√©j√† existante:")
        print(f"   Shimaor√©: {existing.get('shimaore')}")
        print(f"   Kibouchi: {existing.get('kibouchi')}")
        already_exists += 1
        continue
    
    # V√©rifier que les fichiers audio existent
    audio_dir = '/app/frontend/assets/audio/expressions'
    shimaore_file = os.path.join(audio_dir, expr['shimaore_audio_filename'])
    kibouchi_file = os.path.join(audio_dir, expr['kibouchi_audio_filename'])
    
    shimaore_exists = os.path.exists(shimaore_file)
    kibouchi_exists = os.path.exists(kibouchi_file)
    
    print(f"V√©rification des fichiers audio:")
    print(f"   Shimaor√© ({expr['shimaore_audio_filename']}): {'‚úÖ' if shimaore_exists else '‚ùå'}")
    print(f"   Kibouchi ({expr['kibouchi_audio_filename']}): {'‚úÖ' if kibouchi_exists else '‚ùå'}")
    
    if not shimaore_exists or not kibouchi_exists:
        print(f"‚ùå ERREUR: Fichiers audio manquants!")
        failed_adds += 1
        continue
    
    # Ins√©rer dans la base
    try:
        result = db['words'].insert_one(expr)
        
        if result.inserted_id:
            print(f"\n‚úÖ AJOUT R√âUSSI:")
            print(f"   ID: {result.inserted_id}")
            print(f"   Fran√ßais: {expr['french']}")
            print(f"   Shimaor√©: {expr['shimaore']}")
            print(f"   Kibouchi: {expr['kibouchi']}")
            print(f"   Audio shimaor√©: {expr['shimaore_audio_filename']}")
            print(f"   Audio kibouchi: {expr['kibouchi_audio_filename']}")
            successful_adds += 1
        else:
            print(f"‚ùå √âchec de l'insertion")
            failed_adds += 1
            
    except Exception as e:
        print(f"‚ùå ERREUR lors de l'insertion: {str(e)}")
        failed_adds += 1
    
    print()

# V√©rifier l'√©tat final
count_after = db['words'].count_documents({'category': 'expressions'})

print(f"{'='*80}")
print("R√âSUM√â")
print(f"{'='*80}")
print(f"‚úÖ Ajouts r√©ussis: {successful_adds}")
print(f"‚ö†Ô∏è  D√©j√† existantes: {already_exists}")
print(f"‚ùå √âchecs: {failed_adds}")
print(f"üìä Total trait√©: {len(nouvelles_expressions)}")
print()
print(f"üìä Expressions AVANT: {count_before}")
print(f"üìä Expressions APR√àS: {count_after}")
print(f"üìä Diff√©rence: +{count_after - count_before}")

# V√©rifier que toutes les expressions sont maintenant en base
print(f"\n{'='*80}")
print("V√âRIFICATION FINALE")
print(f"{'='*80}")

all_ok = True
for expr in nouvelles_expressions:
    word = db['words'].find_one({
        'french': expr['french'],
        'category': 'expressions'
    })
    
    if word:
        print(f"‚úÖ {expr['french']}: {word.get('shimaore')} / {word.get('kibouchi')}")
    else:
        print(f"‚ùå {expr['french']}: NON TROUV√â")
        all_ok = False

print(f"\n{'='*80}")
if all_ok and successful_adds == len(nouvelles_expressions):
    print("üéâ TOUTES LES EXPRESSIONS ONT √âT√â AJOUT√âES AVEC SUCC√àS !")
elif already_exists > 0 and (successful_adds + already_exists) == len(nouvelles_expressions):
    print("‚úÖ TOUTES LES EXPRESSIONS SONT PR√âSENTES (certaines existaient d√©j√†)")
else:
    print("‚ö†Ô∏è  PROBL√àME: Toutes les expressions n'ont pas √©t√© ajout√©es correctement")

print(f"{'='*80}")

client.close()
