#!/usr/bin/env python3
"""
APPLICATION DES CORRECTIONS DU TABLEAU UTILISATEUR
==================================================
Ce script applique les corrections sp√©cifiques du tableau fourni
par l'utilisateur pour corriger certains mots et expressions.
"""

import os
from pymongo import MongoClient
from dotenv import load_dotenv
from database_protection import protect_database, db_protector

# Charger les variables d'environnement
load_dotenv()

# Configuration MongoDB
MONGO_URL = os.getenv('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.getenv('DB_NAME', 'mayotte_app')

def get_mongo_client():
    """Connexion √† MongoDB"""
    try:
        client = MongoClient(MONGO_URL)
        client.admin.command('ping')
        print(f"‚úÖ Connexion MongoDB √©tablie : {MONGO_URL}")
        return client
    except Exception as e:
        print(f"‚ùå Erreur de connexion MongoDB : {e}")
        return None

# Corrections extraites du tableau utilisateur
CORRECTIONS = [
    # Corrections critiques identifi√©es
    {"french": "vivre", "shimaore": "ouyinchi", "kibouchi": "mikou√®nchi"},
    {"french": "attendre", "shimaore": "oulindra", "kibouchi": "mandigni"},
    {"french": "faire pipi", "shimaore": "ougna kojo", "kibouchi": "mamani"},
    {"french": "embrasser", "shimaore": "ounouka", "kibouchi": "mihoroukou"},
    {"french": "avertir", "shimaore": "outahadaricha", "kibouchi": "mampah√©yi"},
    {"french": "se laver le derri√®re", "shimaore": "outsamba", "kibouchi": "mambouyi"},
    {"french": "se laver", "shimaore": "ouhowa", "kibouchi": "miss√©ki"},
    {"french": "r√©chauffer", "shimaore": "ouhelesedza", "kibouchi": "mamana"},
    {"french": "au milieu", "shimaore": "hari", "kibouchi": "angnivou"},
    {"french": "col√®re", "shimaore": "hadabou", "kibouchi": "m√©loukou"},
    {"french": "court", "shimaore": "coutri", "kibouchi": "fohiki"},
    {"french": "dr√¥le", "shimaore": "outs√©sa", "kibouchi": "mampimohi"},
    {"french": "faux", "shimaore": "trambo", "kibouchi": "vandi"},
    {"french": "long", "shimaore": "dril√©", "kibouchi": "habou"},
    {"french": "sale", "shimaore": "trotro", "kibouchi": "maloutou"},
    {"french": "j'ai soif", "shimaore": "nissi ona niyora", "kibouchi": "zahou tindranou"},
    {"french": "je prends √ßa", "shimaore": "nissi renga ini", "kibouchi": "zahou bou angala tihi"},
    {"french": "moins cher s'il vous pla√Æt", "shimaore": "nissi miya ouchoukidz√©", "kibouchi": "za mangataka koupoungouza kima"},
    {"french": "nounou", "shimaore": "ml√©zi", "kibouchi": "ml√©zi"},
    {"french": "jouer", "shimaore": "ounguadza", "kibouchi": "msoma"},
    {"french": "donner", "shimaore": "ouva", "kibouchi": "magnamiya"},
    {"french": "entrer", "shimaore": "oungu√Øya", "kibouchi": "mihiditri"},
    {"french": "pigeon", "shimaore": "ndiwa", "kibouchi": "ndiwa"},
    {"french": "fourmis", "shimaore": "tjoussou", "kibouchi": "vitsiki"},
    {"french": "mille-pattes", "shimaore": "mjongo", "kibouchi": "ancoudafitri"},
    {"french": "oursin", "shimaore": "gadzassi", "kibouchi": "vouli vavi"},
    {"french": "hu√Ætre", "shimaore": "gadzassi", "kibouchi": "sadza"},
    {"french": "arri√®re du cr√¢ne", "shimaore": "komoi", "kibouchi": "kitoika"},
    {"french": "bonne nuit", "shimaore": "oukou wa hairi", "kibouchi": "haligni tsara"},
    {"french": "au revoir", "shimaore": "kwaheri", "kibouchi": "maeva"},
    {"french": "tante", "shimaore": "mama titi/bol√©", "kibouchi": "nindri heli/b√©"},
    {"french": "petite s≈ìur", "shimaore": "moinagna mtroumama", "kibouchi": "zandri viavi"},
    {"french": "petit fr√®re", "shimaore": "moinagna mtroubaba", "kibouchi": "zandri lalahi"},
    {"french": "bleu", "shimaore": "bil√©", "kibouchi": "mayitsou bil√©"},
    {"french": "gris", "shimaore": "djifou", "kibouchi": "dzofou"},
    {"french": "marmite", "shimaore": "gnoungou", "kibouchi": "vilangni"},
    {"french": "torche", "shimaore": "pong√©", "kibouchi": "pongi"},
]

@protect_database("apply_corrections")
def apply_corrections():
    """Applique les corrections du tableau utilisateur"""
    print("üîß APPLICATION DES CORRECTIONS DU TABLEAU UTILISATEUR")
    print("=" * 60)
    
    client = get_mongo_client()
    if not client:
        return False
    
    db = client[DB_NAME]
    words_collection = db.words
    
    corrections_applied = 0
    corrections_failed = 0
    new_words_added = 0
    
    for correction in CORRECTIONS:
        french = correction["french"]
        shimaore = correction["shimaore"]
        kibouchi = correction["kibouchi"]
        
        print(f"\nüîç Recherche de '{french}'...")
        
        # Chercher le mot existant (insensible √† la casse)
        existing_word = words_collection.find_one({
            "french": {"$regex": f"^{french}$", "$options": "i"}
        })
        
        if existing_word:
            # V√©rifier si une correction est n√©cessaire
            needs_update = False
            update_fields = {}
            
            if existing_word.get("shimaore", "").lower() != shimaore.lower():
                update_fields["shimaore"] = shimaore
                needs_update = True
                print(f"  üìù Shimaor√©: '{existing_word.get('shimaore', 'N/A')}' ‚Üí '{shimaore}'")
            
            if existing_word.get("kibouchi", "").lower() != kibouchi.lower():
                update_fields["kibouchi"] = kibouchi
                needs_update = True
                print(f"  üìù Kibouchi: '{existing_word.get('kibouchi', 'N/A')}' ‚Üí '{kibouchi}'")
            
            if needs_update:
                # Appliquer la correction
                result = words_collection.update_one(
                    {"_id": existing_word["_id"]},
                    {"$set": update_fields}
                )
                
                if result.modified_count > 0:
                    print(f"  ‚úÖ Correction appliqu√©e pour '{french}'")
                    corrections_applied += 1
                else:
                    print(f"  ‚ùå √âchec de la correction pour '{french}'")
                    corrections_failed += 1
            else:
                print(f"  ‚úì '{french}' est d√©j√† correct")
        else:
            # Mot non trouv√© - d√©terminer la cat√©gorie appropri√©e
            category = determine_category(french)
            
            new_word = {
                "french": french,
                "shimaore": shimaore,
                "kibouchi": kibouchi,
                "category": category,
                "difficulty": 1,
                # Pas d'image_url pour les nouveaux mots pour l'instant
            }
            
            # Ajouter le nouveau mot
            result = words_collection.insert_one(new_word)
            if result.inserted_id:
                print(f"  ‚ûï Nouveau mot ajout√©: '{french}' (cat√©gorie: {category})")
                new_words_added += 1
            else:
                print(f"  ‚ùå √âchec de l'ajout du nouveau mot '{french}'")
                corrections_failed += 1
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES CORRECTIONS:")
    print(f"‚úÖ Corrections appliqu√©es: {corrections_applied}")
    print(f"‚ûï Nouveaux mots ajout√©s: {new_words_added}")
    print(f"‚ùå √âchecs: {corrections_failed}")
    print(f"üìù Total trait√©: {len(CORRECTIONS)}")
    
    # V√©rification finale de l'int√©grit√©
    print("\nüîç V√©rification de l'int√©grit√© post-corrections...")
    is_healthy, message = db_protector.is_database_healthy()
    if is_healthy:
        print("‚úÖ Base de donn√©es saine apr√®s corrections")
    else:
        print(f"‚ö†Ô∏è Probl√®me d√©tect√©: {message}")
    
    client.close()
    return corrections_applied > 0 or new_words_added > 0

def determine_category(french_word):
    """D√©termine la cat√©gorie appropri√©e pour un mot"""
    word_lower = french_word.lower()
    
    # Cat√©gories bas√©es sur le contenu
    if any(keyword in word_lower for keyword in ["je", "j'ai", "moins", "prends"]):
        return "expressions"
    elif any(keyword in word_lower for keyword in ["s≈ìur", "fr√®re", "tante", "nounou"]):
        return "famille"
    elif any(keyword in word_lower for keyword in ["vivre", "attendre", "faire", "embrasser", "donner", "jouer", "entrer"]):
        return "verbes"
    elif any(keyword in word_lower for keyword in ["pigeon", "fourmis", "mille-pattes", "oursin", "hu√Ætre"]):
        return "animaux"
    elif any(keyword in word_lower for keyword in ["bleu", "gris"]):
        return "couleurs"
    elif any(keyword in word_lower for keyword in ["marmite", "torche"]):
        return "maison"
    elif any(keyword in word_lower for keyword in ["cr√¢ne", "derri√®re"]):
        return "corps"
    elif any(keyword in word_lower for keyword in ["col√®re", "court", "dr√¥le", "faux", "long", "sale"]):
        return "adjectifs"
    elif any(keyword in word_lower for keyword in ["milieu", "bonne nuit", "au revoir"]):
        return "expressions"
    else:
        return "expressions"  # Cat√©gorie par d√©faut

if __name__ == "__main__":
    print("üöÄ D√©marrage de l'application des corrections du tableau...")
    
    # V√©rifier l'√©tat initial
    print("\nüîç V√©rification de l'√©tat initial de la base de donn√©es...")
    is_healthy, message = db_protector.is_database_healthy()
    if not is_healthy:
        print(f"‚ö†Ô∏è Probl√®me d√©tect√© avant corrections: {message}")
        print("üîÑ Restauration recommand√©e avant d'appliquer les corrections")
        exit(1)
    
    # Appliquer les corrections
    success = apply_corrections()
    
    if success:
        print("\nüéâ CORRECTIONS APPLIQU√âES AVEC SUCC√àS!")
        print("‚úÖ La base de donn√©es a √©t√© mise √† jour avec les corrections du tableau")
    else:
        print("\n‚ö†Ô∏è Aucune correction n'a √©t√© appliqu√©e")
    
    print("\nFin du script de corrections.")