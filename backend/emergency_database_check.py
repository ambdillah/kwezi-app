#!/usr/bin/env python3
"""
DIAGNOSTIC D'URGENCE - √âTAT DE LA BASE DE DONN√âES
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import logging

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        logger.info(f"Tentative connexion: {mongo_url}")
        client = MongoClient(mongo_url)
        
        # Tester la connexion
        client.admin.command('ping')
        logger.info("‚úÖ Connexion MongoDB r√©ussie")
        
        db = client['shimaor√©_app']
        return db, client
    except Exception as e:
        logger.error(f"‚ùå Erreur connexion MongoDB: {e}")
        raise

def check_database_status():
    """V√©rifier l'√©tat complet de la base de donn√©es"""
    logger.info("üîç DIAGNOSTIC COMPLET BASE DE DONN√âES")
    
    try:
        db, client = connect_to_database()
        
        # Lister toutes les bases de donn√©es
        databases = client.list_database_names()
        logger.info(f"Bases de donn√©es disponibles: {databases}")
        
        # V√©rifier si 'shimaor√©_app' existe
        if 'shimaor√©_app' in databases:
            logger.info("‚úÖ Base 'shimaor√©_app' existe")
            
            # Lister les collections dans cette base
            collections = db.list_collection_names()
            logger.info(f"Collections dans 'shimaor√©_app': {collections}")
            
            # V√©rifier la collection 'vocabulary'
            if 'vocabulary' in collections:
                logger.info("‚úÖ Collection 'vocabulary' existe")
                
                # Compter les documents
                total_docs = db['vocabulary'].count_documents({})
                logger.info(f"üìä Total documents dans 'vocabulary': {total_docs}")
                
                if total_docs == 0:
                    logger.error("üö® COLLECTION VIDE - TOUS LES DONN√âES PERDUES")
                    return "EMPTY"
                
                # Compter par section
                sections = db['vocabulary'].distinct("section")
                logger.info(f"Sections trouv√©es: {sections}")
                
                for section in sections:
                    count = db['vocabulary'].count_documents({"section": section})
                    logger.info(f"  - {section}: {count} mots")
                
                # V√©rifier sp√©cifiquement les verbes
                verbs_count = db['vocabulary'].count_documents({"section": "verbes"})
                logger.info(f"\nüéØ VERBES: {verbs_count} documents")
                
                if verbs_count == 0:
                    logger.error("üö® SECTION VERBES VIDE")
                else:
                    # V√©rifier quelques verbes sp√©cifiques
                    test_verbs = ["voir", "attendre", "ab√Æmer", "danser"]
                    for verb in test_verbs:
                        doc = db['vocabulary'].find_one({"section": "verbes", "french": verb})
                        if doc:
                            logger.info(f"  ‚úÖ '{verb}' trouv√©: {doc.get('shimaor√©', 'N/A')} / {doc.get('kibouchi', 'N/A')}")
                        else:
                            logger.error(f"  ‚ùå '{verb}' MANQUANT")
                
                return "PARTIAL" if verbs_count < 50 else "OK"
                
            else:
                logger.error("‚ùå Collection 'vocabulary' N'EXISTE PAS")
                
                # V√©rifier s'il y a d'autres collections
                for coll in collections:
                    count = db[coll].count_documents({})
                    logger.info(f"  Collection '{coll}': {count} documents")
                
                return "NO_VOCABULARY"
        else:
            logger.error("‚ùå Base 'shimaor√©_app' N'EXISTE PAS")
            return "NO_DATABASE"
            
    except Exception as e:
        logger.error(f"‚ùå Erreur v√©rification base: {e}")
        return "ERROR"

def check_backup_files():
    """V√©rifier les fichiers de sauvegarde disponibles"""
    logger.info("\nüîç V√âRIFICATION SAUVEGARDES DISPONIBLES")
    
    backend_dir = "/app/backend"
    backup_files = []
    
    for file in os.listdir(backend_dir):
        if 'backup' in file.lower() and file.endswith('.json'):
            file_path = os.path.join(backend_dir, file)
            file_size = os.path.getsize(file_path)
            backup_files.append((file, file_size))
    
    if backup_files:
        logger.info(f"‚úÖ {len(backup_files)} sauvegardes trouv√©es:")
        for backup_file, size in sorted(backup_files):
            logger.info(f"  - {backup_file}: {size:,} bytes")
        return backup_files
    else:
        logger.error("‚ùå AUCUNE SAUVEGARDE TROUV√âE")
        return []

def check_mongodb_service():
    """V√©rifier si MongoDB fonctionne"""
    logger.info("\nüîç V√âRIFICATION SERVICE MONGODB")
    
    try:
        # Tester la connexion directe
        client = MongoClient('mongodb://localhost:27017/', serverSelectionTimeoutMS=5000)
        client.admin.command('ping')
        logger.info("‚úÖ MongoDB service fonctionne")
        
        # Lister les bases
        dbs = client.list_database_names()
        logger.info(f"Bases disponibles: {dbs}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå MongoDB ne r√©pond pas: {e}")
        return False

def emergency_restore_plan():
    """Plan d'urgence pour restaurer les donn√©es"""
    logger.info(f"\nüö® PLAN DE RESTAURATION D'URGENCE")
    
    backup_files = check_backup_files()
    
    if backup_files:
        # Trouver la sauvegarde la plus r√©cente et la plus grande
        latest_backup = max(backup_files, key=lambda x: x[1])  # Plus grande taille
        logger.info(f"üí° RESTAURATION RECOMMAND√âE:")
        logger.info(f"   Fichier: {latest_backup[0]}")
        logger.info(f"   Taille: {latest_backup[1]:,} bytes")
        
        restore_script = f"""
# SCRIPT DE RESTAURATION D'URGENCE
cd /app/backend
python -c "
import json
from pymongo import MongoClient
from dotenv import load_dotenv
import os

load_dotenv()
client = MongoClient(os.getenv('MONGO_URL'))
db = client['shimaor√©_app']

# Charger la sauvegarde
with open('{latest_backup[0]}', 'r', encoding='utf-8') as f:
    data = json.load(f)

# Restaurer les donn√©es
if isinstance(data, list):
    result = db['vocabulary'].insert_many(data)
    print(f'Restaur√© {{len(result.inserted_ids)}} documents')
else:
    print(f'Format de sauvegarde invalide')
"
"""
        
        logger.info(f"\nüìã SCRIPT DE RESTAURATION G√âN√âR√â")
        
        # Sauvegarder le script
        with open("/app/backend/restore_emergency.py", "w") as f:
            f.write(restore_script)
        
        return True
    else:
        logger.error("‚ùå IMPOSSIBLE - AUCUNE SAUVEGARDE DISPONIBLE")
        return False

def main():
    """Diagnostic d'urgence principal"""
    logger.info("üö® DIAGNOSTIC D'URGENCE - PERTE BASE DE DONN√âES SIGNAL√âE")
    
    try:
        # 1. V√©rifier MongoDB
        mongodb_ok = check_mongodb_service()
        
        if not mongodb_ok:
            logger.error("‚ùå MONGODB INACCESSIBLE - PROBL√àME SYST√àME")
            return False
        
        # 2. V√©rifier l'√©tat de la base
        db_status = check_database_status()
        
        # 3. R√©sum√© du diagnostic
        logger.info(f"\n{'='*80}")
        logger.info("R√âSUM√â DIAGNOSTIC")
        logger.info(f"{'='*80}")
        
        if db_status == "OK":
            logger.info("‚úÖ BASE DE DONN√âES NORMALE - FAUSSE ALERTE")
        elif db_status == "PARTIAL":
            logger.warning("‚ö†Ô∏è BASE DE DONN√âES PARTIELLE - DONN√âES PARTIELLES")
        elif db_status == "EMPTY":
            logger.error("üö® BASE DE DONN√âES VIDE - PERTE TOTALE CONFIRM√âE")
            emergency_restore_plan()
        elif db_status == "NO_VOCABULARY":
            logger.error("üö® COLLECTION VOCABULARY MANQUANTE")
            emergency_restore_plan()
        elif db_status == "NO_DATABASE":
            logger.error("üö® BASE SHIMAOR√â_APP MANQUANTE")
            emergency_restore_plan()
        else:
            logger.error("üö® ERREUR SYST√àME")
        
        return db_status in ["OK", "PARTIAL"]
        
    except Exception as e:
        logger.error(f"Erreur critique diagnostic: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)