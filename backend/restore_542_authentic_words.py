#!/usr/bin/env python3
"""
RESTAURATION DE LA BASE DE DONN√âES AUTHENTIQUE AVEC 542 MOTS
=============================================================
Ce script reconstitue la base de donn√©es authentique en ex√©cutant
UNIQUEMENT les scripts qui contiennent "maeva" (correct) et √©vite
ceux qui contiennent "djalab√©" (incorrect pour le Kibouchi de Mayotte)
"""

import os
import subprocess
import sys
from dotenv import load_dotenv
from pymongo import MongoClient

# Charger les variables d'environnement
load_dotenv()

# Configuration MongoDB
MONGO_URL = os.getenv('MONGO_URL', 'mongodb://localhost:27017/')
DB_NAME = os.getenv('DB_NAME', 'test_database')

def get_mongo_client():
    """Connexion √† MongoDB"""
    try:
        client = MongoClient(MONGO_URL)
        client.admin.command('ping')
        print(f"‚úÖ Connexion MongoDB √©tablie : {MONGO_URL}")
        return client
    except Exception as e:
        print(f"‚ùå Erreur de connexion MongoDB : {e}")
        return None

def clear_database():
    """Vider compl√®tement la base de donn√©es"""
    print("üóëÔ∏è VIDAGE COMPLET DE LA BASE DE DONN√âES...")
    
    client = get_mongo_client()
    if not client:
        return False
    
    db = client[DB_NAME]
    
    try:
        collections = db.list_collection_names()
        for collection_name in collections:
            db[collection_name].drop()
            print(f"üóëÔ∏è Collection '{collection_name}' supprim√©e")
        print("‚úÖ Base de donn√©es compl√®tement vid√©e")
        client.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du vidage : {e}")
        client.close()
        return False

def block_wrong_scripts():
    """Bloquer les scripts avec des traductions incorrectes"""
    print("üö´ BLOCAGE DES SCRIPTS AVEC TRADUCTIONS INCORRECTES...")
    
    scripts_to_block = [
        "restore_authentic_data.py",  # Contient "djalab√©"
        "restore_authentic_database_final.py",  # Version PDF incorrecte
        "emergency_database_recovery.py"  # Version potentiellement incorrecte
    ]
    
    for script in scripts_to_block:
        script_path = f"/app/backend/{script}"
        if os.path.exists(script_path):
            blocked_path = f"{script_path}.BLOCKED_INCORRECT"
            os.rename(script_path, blocked_path)
            print(f"üö´ Bloqu√©: {script} ‚Üí {script}.BLOCKED_INCORRECT")
    
    print("‚úÖ Scripts incorrects bloqu√©s")

def execute_authentic_update_scripts():
    """Ex√©cuter tous les scripts de mise √† jour authentiques"""
    print("üîß EX√âCUTION DES SCRIPTS DE MISE √Ä JOUR AUTHENTIQUES...")
    
    # Scripts de mise √† jour dans l'ordre logique
    update_scripts = [
        "update_corps_salutations_grammaire.py",  # Contient "maeva" ‚úÖ
        "update_famille_couleurs_nourriture.py",
        "update_chiffres_animaux.py", 
        "update_nature_section.py",
        "update_maison_verbes.py",
        "update_transport_vetements_tradition.py",
        "update_expressions_adjectifs.py"
    ]
    
    successful_scripts = []
    failed_scripts = []
    
    for script in update_scripts:
        script_path = f"/app/backend/{script}"
        
        if os.path.exists(script_path):
            print(f"\nüîß Ex√©cution de {script}...")
            
            try:
                # V√©rifier d'abord si le script contient "djalab√©" (incorrect)
                with open(script_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if 'djalab√©' in content.lower():
                    print(f"‚ö†Ô∏è ATTENTION: {script} contient 'djalab√©' - v√©rification n√©cessaire")
                
                # Ex√©cuter le script
                result = subprocess.run([sys.executable, script_path], 
                                      capture_output=True, text=True, 
                                      cwd="/app/backend")
                
                if result.returncode == 0:
                    print(f"‚úÖ {script} ex√©cut√© avec succ√®s")
                    successful_scripts.append(script)
                    if result.stdout:
                        print(f"   Sortie: {result.stdout.strip()}")
                else:
                    print(f"‚ùå Erreur avec {script}")
                    if result.stderr:
                        print(f"   Erreur: {result.stderr.strip()}")
                    failed_scripts.append(script)
                    
            except Exception as e:
                print(f"‚ùå Exception avec {script}: {e}")
                failed_scripts.append(script)
        else:
            print(f"‚ö†Ô∏è Script {script} non trouv√©")
            failed_scripts.append(script)
    
    print(f"\nüìä R√âSULTATS DE L'EX√âCUTION:")
    print(f"‚úÖ Succ√®s: {len(successful_scripts)} scripts")
    print(f"‚ùå √âchecs: {len(failed_scripts)} scripts")
    
    if successful_scripts:
        print(f"‚úÖ Scripts r√©ussis: {', '.join(successful_scripts)}")
    if failed_scripts:
        print(f"‚ùå Scripts √©chou√©s: {', '.join(failed_scripts)}")
    
    return len(successful_scripts) > 0

def verify_authentic_database():
    """V√©rifier que la base de donn√©es contient les bonnes traductions"""
    print("\nüîç V√âRIFICATION DE LA BASE DE DONN√âES AUTHENTIQUE...")
    
    client = get_mongo_client()
    if not client:
        return False
    
    db = client[DB_NAME]
    
    try:
        # Compter le total de mots
        total_words = db.words.count_documents({})
        print(f"üìä Total des mots: {total_words}")
        
        # V√©rifier les cat√©gories
        categories = db.words.distinct("category")
        print(f"üìö Cat√©gories: {len(categories)}")
        
        for category in sorted(categories):
            count = db.words.count_documents({"category": category})
            print(f"  ‚úÖ {category}: {count} mots")
        
        # V√©rification CRITIQUE: "Au revoir" doit √™tre "maeva" pas "djalab√©"
        au_revoir = db.words.find_one({"french": {"$regex": "au revoir", "$options": "i"}})
        if au_revoir:
            kibouchi_translation = au_revoir.get("kibouchi", "").lower()
            print(f"\nüîç V√âRIFICATION CRITIQUE - 'Au revoir':")
            print(f"   Fran√ßais: {au_revoir.get('french', '')}")
            print(f"   Shimaor√©: {au_revoir.get('shimaore', '')}")
            print(f"   Kibouchi: {au_revoir.get('kibouchi', '')}")
            
            if "maeva" in kibouchi_translation:
                print(f"   ‚úÖ CORRECT: Contient 'maeva' (authentique Kibouchi Mayotte)")
            elif "djalab√©" in kibouchi_translation:
                print(f"   ‚ùå ERREUR: Contient 'djalab√©' (incorrect pour Mayotte)")
                client.close()
                return False
            else:
                print(f"   ‚ö†Ô∏è ATTENTION: Ni 'maeva' ni 'djalab√©' trouv√©")
        
        # V√©rifier d'autres mots critiques avec audio
        audio_words = ["Papa", "Fr√®re", "S≈ìur", "Grand-p√®re", "Grand-m√®re", "Famille", "Gar√ßon", "Monsieur"]
        print(f"\nüéµ V√âRIFICATION DES MOTS AVEC AUDIO:")
        
        for word_fr in audio_words:
            word = db.words.find_one({"french": word_fr})
            if word:
                print(f"  ‚úÖ {word_fr}: {word.get('shimaore', '')} / {word.get('kibouchi', '')}")
            else:
                print(f"  ‚ùå {word_fr}: NON TROUV√â")
        
        # V√©rifier le compte final
        if 540 <= total_words <= 550:
            print(f"\nüéâ SUCC√àS ! Base de donn√©es authentique avec {total_words} mots")
            print("‚úÖ Utilise 'maeva' (correct) et √©vite 'djalab√©' (incorrect)")
            print("üéµ Pr√™te pour les 13 enregistrements audio authentiques")
            client.close()
            return True
        else:
            print(f"\n‚ö†Ô∏è ATTENTION: {total_words} mots (attendu: 540-550)")
            client.close()
            return total_words > 500  # Accepter si > 500
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification : {e}")
        client.close()
        return False

def main():
    """Fonction principale"""
    print("=" * 80)
    print("üî• RESTAURATION BASE DE DONN√âES AUTHENTIQUE (542 MOTS)")
    print("=" * 80)
    print("‚úÖ AVEC 'maeva' (CORRECT pour Kibouchi Mayotte)")
    print("‚ùå SANS 'djalab√©' (INCORRECT pour Kibouchi Mayotte)")
    print("=" * 80)
    
    try:
        # 1. Bloquer les scripts incorrects
        block_wrong_scripts()
        
        # 2. Vider la base de donn√©es
        if not clear_database():
            print("‚ùå √âchec du vidage de la base de donn√©es")
            return False
        
        # 3. Ex√©cuter les scripts de mise √† jour authentiques
        if not execute_authentic_update_scripts():
            print("‚ùå √âchec de l'ex√©cution des scripts de mise √† jour")
            return False
        
        # 4. V√©rifier la base de donn√©es finale
        if not verify_authentic_database():
            print("‚ùå √âchec de la v√©rification de la base de donn√©es")
            return False
        
        print("\n" + "=" * 80)
        print("üéâ RESTAURATION R√âUSSIE !")
        print("‚úÖ Base de donn√©es authentique avec ~542 mots")
        print("‚úÖ Traductions correctes pour le Kibouchi de Mayotte")
        print("‚úÖ 'Au revoir' = 'maeva' (CORRECT)")
        print("üö´ Scripts incorrects bloqu√©s d√©finitivement")
        print("üéµ Pr√™te pour 13 enregistrements audio authentiques")
        print("=" * 80)
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéä SUCCESS! AUTHENTIC DATABASE RESTORED!")
    else:
        print("\nüí• FAILURE! RESTORATION FAILED!")
    
    exit(0 if success else 1)