#!/usr/bin/env python3
"""
Attribution finale des prononciations pour chaque mot de la section "Verbe"
selon le fichier ZIP fourni par l'utilisateur (191 fichiers audio)
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import logging
import shutil

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        client = MongoClient(mongo_url)
        db = client['shimaor√©_app']
        logger.info("Connexion √† la base de donn√©es r√©ussie")
        return db
    except Exception as e:
        logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
        raise

def get_all_audio_files_from_zip():
    """R√©cup√®re tous les fichiers audio du ZIP"""
    source_dir = "/app/backend/verbes_finale_extract/verbes"
    
    if not os.path.exists(source_dir):
        logger.error(f"R√©pertoire source non trouv√©: {source_dir}")
        return []
    
    audio_files = []
    for filename in os.listdir(source_dir):
        if filename.lower().endswith('.m4a'):
            file_path = os.path.join(source_dir, filename)
            file_size = os.path.getsize(file_path)
            
            audio_files.append({
                'filename': filename,
                'path': file_path,
                'size': file_size,
                'name_clean': clean_text_for_matching(filename.replace('.m4a', ''))
            })
    
    logger.info(f"Fichiers audio trouv√©s dans le ZIP: {len(audio_files)}")
    return audio_files

def get_all_verbs_from_database():
    """R√©cup√®re tous les verbes de la base de donn√©es"""
    db = connect_to_database()
    collection = db['vocabulary']
    
    verbs = list(collection.find({"section": "verbes"}).sort("french", 1))
    logger.info(f"Verbes trouv√©s en base: {len(verbs)}")
    
    return verbs

def clean_text_for_matching(text):
    """Nettoie un texte pour la correspondance (conserve la casse originale mais cr√©e une version normalis√©e)"""
    if not text:
        return ""
    
    # Cr√©er une version normalis√©e pour la comparaison
    normalized = text.lower()
    # Enlever espaces, tirets, accents
    normalized = normalized.replace(' ', '').replace('-', '').replace('_', '').replace('/', '')
    normalized = normalized.replace('√©', 'e').replace('√®', 'e').replace('√™', 'e').replace('√´', 'e')
    normalized = normalized.replace('√†', 'a').replace('√°', 'a').replace('√¢', 'a').replace('√§', 'a')
    normalized = normalized.replace('√¥', 'o').replace('√∂', 'o').replace('√≤', 'o').replace('√≥', 'o')
    normalized = normalized.replace('√ª', 'u').replace('√π', 'u').replace('√º', 'u').replace('√∫', 'u')
    normalized = normalized.replace('√Æ', 'i').replace('√Ø', 'i').replace('√¨', 'i').replace('√≠', 'i')
    normalized = normalized.replace('√ß', 'c').replace('√±', 'n')
    
    return normalized

def find_exact_match(text, audio_files):
    """Trouve la correspondance exacte pour un texte"""
    if not text:
        return None
    
    text_clean = clean_text_for_matching(text)
    
    # 1. Correspondance exacte
    for audio in audio_files:
        if audio['name_clean'] == text_clean:
            return audio['filename']
    
    # 2. Correspondance partielle tr√®s stricte
    best_match = None
    best_score = 0
    
    for audio in audio_files:
        audio_clean = audio['name_clean']
        
        if len(audio_clean) < 4 or len(text_clean) < 4:
            continue
        
        score = 0
        
        # Correspondance de d√©but
        if text_clean.startswith(audio_clean) and len(audio_clean) >= len(text_clean) * 0.8:
            score = 95
        elif audio_clean.startswith(text_clean) and len(text_clean) >= len(audio_clean) * 0.8:
            score = 90
        # Correspondance contient (tr√®s stricte)
        elif len(audio_clean) >= 6 and audio_clean in text_clean and len(audio_clean) >= len(text_clean) * 0.7:
            score = 85
        elif len(text_clean) >= 6 and text_clean in audio_clean and len(text_clean) >= len(audio_clean) * 0.7:
            score = 80
        
        if score > best_score and score >= 80:
            best_score = score
            best_match = audio['filename']
    
    return best_match

def create_complete_mapping():
    """Cr√©e une correspondance compl√®te entre verbes et fichiers audio"""
    logger.info("üéØ CR√âATION CORRESPONDANCE COMPL√àTE VERBES ‚Üî AUDIO")
    
    # R√©cup√©rer les donn√©es
    audio_files = get_all_audio_files_from_zip()
    verbs = get_all_verbs_from_database()
    
    if not audio_files or not verbs:
        logger.error("Erreur: fichiers audio ou verbes manquants")
        return None
    
    # Traquer l'utilisation des fichiers pour √©viter les doublons
    used_files = set()
    mappings = []
    
    logger.info(f"\n{'='*120}")
    logger.info(f"CORRESPONDANCES FINALES VERBES ‚Üî AUDIO")
    logger.info(f"{'='*120}")
    logger.info(f"{'Fran√ßais':15} | {'Shimaor√©':25} | {'Kibouchi':25} | {'Audio Shimaor√©':25} | {'Audio Kibouchi':25}")
    logger.info("-" * 120)
    
    for verb in verbs:
        french = verb.get('french', '')
        shimaore = verb.get('shimaor√©', '')  
        kibouchi = verb.get('kibouchi', '')
        verb_id = verb['_id']
        
        # Trouver les correspondances audio (fichiers non utilis√©s seulement)
        available_files = [f for f in audio_files if f['filename'] not in used_files]
        
        # Chercher shimaor√©
        shimaore_audio = find_exact_match(shimaore, available_files)
        if shimaore_audio:
            used_files.add(shimaore_audio)
        
        # Chercher kibouchi (dans les fichiers restants)
        available_files = [f for f in audio_files if f['filename'] not in used_files]
        kibouchi_audio = find_exact_match(kibouchi, available_files)
        if kibouchi_audio:
            used_files.add(kibouchi_audio)
        
        # Si pas de correspondance pour l'un, essayer dans tous les fichiers
        if shimaore and not shimaore_audio:
            remaining_files = [f for f in audio_files if f['filename'] not in used_files]
            shimaore_audio = find_exact_match(shimaore, remaining_files)
            if shimaore_audio:
                used_files.add(shimaore_audio)
        
        if kibouchi and not kibouchi_audio:
            remaining_files = [f for f in audio_files if f['filename'] not in used_files]
            kibouchi_audio = find_exact_match(kibouchi, remaining_files)
            if kibouchi_audio:
                used_files.add(kibouchi_audio)
        
        # Cr√©er le mapping
        mapping = {
            'verb_id': verb_id,
            'french': french,
            'shimaore': shimaore,
            'kibouchi': kibouchi,
            'shimaore_audio': shimaore_audio,
            'kibouchi_audio': kibouchi_audio
        }
        
        mappings.append(mapping)
        
        # Affichage
        shimaore_display = f"‚úÖ {shimaore_audio[:20]}..." if shimaore_audio and len(shimaore_audio) > 20 else f"{'‚úÖ ' + shimaore_audio if shimaore_audio else '‚ùå Aucun'}"
        kibouchi_display = f"‚úÖ {kibouchi_audio[:20]}..." if kibouchi_audio and len(kibouchi_audio) > 20 else f"{'‚úÖ ' + kibouchi_audio if kibouchi_audio else '‚ùå Aucun'}"
        
        logger.info(f"{french:15} | {shimaore:25} | {kibouchi:25} | {shimaore_display:25} | {kibouchi_display:25}")
    
    # Statistiques
    shimaore_matches = sum(1 for m in mappings if m['shimaore_audio'])
    kibouchi_matches = sum(1 for m in mappings if m['kibouchi_audio'])
    both_matches = sum(1 for m in mappings if m['shimaore_audio'] and m['kibouchi_audio'])
    
    logger.info(f"\nüìä STATISTIQUES CORRESPONDANCES:")
    logger.info(f"  Correspondances shimaor√©: {shimaore_matches}/{len(verbs)} ({shimaore_matches/len(verbs)*100:.1f}%)")
    logger.info(f"  Correspondances kibouchi: {kibouchi_matches}/{len(verbs)} ({kibouchi_matches/len(verbs)*100:.1f}%)")
    logger.info(f"  Avec les deux langues: {both_matches}/{len(verbs)} ({both_matches/len(verbs)*100:.1f}%)")
    logger.info(f"  Fichiers utilis√©s: {len(used_files)}/{len(audio_files)}")
    
    return mappings

def apply_mappings_to_database(mappings):
    """Applique les correspondances √† la base de donn√©es"""
    logger.info("\nüîÑ APPLICATION DES CORRESPONDANCES √Ä LA BASE")
    
    db = connect_to_database()
    collection = db['vocabulary']
    
    updated_count = 0
    
    for mapping in mappings:
        try:
            update_data = {
                "audio_shimaor√©_filename": mapping['shimaore_audio'],
                "audio_kibouchi_filename": mapping['kibouchi_audio'],
                "audio_shimaor√©_url": f"audio/verbes/{mapping['shimaore_audio']}" if mapping['shimaore_audio'] else None,
                "audio_kibouchi_url": f"audio/verbes/{mapping['kibouchi_audio']}" if mapping['kibouchi_audio'] else None,
                "has_shimaor√©_audio": bool(mapping['shimaore_audio']),
                "has_kibouchi_audio": bool(mapping['kibouchi_audio']),
                "dual_audio_system": True,
                "final_mapping_applied": True
            }
            
            result = collection.update_one(
                {"_id": mapping['verb_id']},
                {"$set": update_data}
            )
            
            if result.modified_count > 0:
                updated_count += 1
                
        except Exception as e:
            logger.error(f"Erreur mise √† jour {mapping['french']}: {e}")
    
    logger.info(f"‚úÖ {updated_count} verbes mis √† jour en base")
    return updated_count

def copy_audio_files_to_assets(audio_files):
    """Copie les fichiers audio vers le dossier assets"""
    logger.info("\nüìÅ COPIE FICHIERS AUDIO VERS ASSETS")
    
    target_dir = "/app/frontend/assets/audio/verbes"
    os.makedirs(target_dir, exist_ok=True)
    
    copied_count = 0
    
    for audio_file in audio_files:
        source_path = audio_file['path']
        target_path = os.path.join(target_dir, audio_file['filename'])
        
        try:
            shutil.copy2(source_path, target_path)
            copied_count += 1
        except Exception as e:
            logger.warning(f"Erreur copie {audio_file['filename']}: {e}")
    
    logger.info(f"‚úÖ {copied_count} fichiers copi√©s")
    return copied_count

def verify_final_result():
    """V√©rifie le r√©sultat final"""
    logger.info("\n=== V√âRIFICATION FINALE ===")
    
    db = connect_to_database()
    collection = db['vocabulary']
    
    # Statistiques
    total_verbs = collection.count_documents({"section": "verbes"})
    verbs_with_shimaore = collection.count_documents({
        "section": "verbes",
        "has_shimaor√©_audio": True
    })
    verbs_with_kibouchi = collection.count_documents({
        "section": "verbes",
        "has_kibouchi_audio": True
    })
    verbs_with_both = collection.count_documents({
        "section": "verbes",
        "has_shimaor√©_audio": True,
        "has_kibouchi_audio": True
    })
    
    logger.info(f"üìà R√âSULTATS FINAUX:")
    logger.info(f"  Total verbes: {total_verbs}")
    logger.info(f"  Avec audio shimaor√©: {verbs_with_shimaore} ({verbs_with_shimaore/total_verbs*100:.1f}%)")
    logger.info(f"  Avec audio kibouchi: {verbs_with_kibouchi} ({verbs_with_kibouchi/total_verbs*100:.1f}%)")
    logger.info(f"  Avec les deux audio: {verbs_with_both} ({verbs_with_both/total_verbs*100:.1f}%)")
    
    # V√©rifier des cas sp√©cifiques
    test_cases = ["attendre", "ab√Æmer", "voir", "dire", "danser"]
    
    logger.info(f"\nüîç V√âRIFICATION CAS SP√âCIFIQUES:")
    for verb_name in test_cases:
        verb = collection.find_one({"section": "verbes", "french": verb_name})
        if verb:
            shimaore_audio = verb.get('audio_shimaor√©_filename', 'Aucun')
            kibouchi_audio = verb.get('audio_kibouchi_filename', 'Aucun')
            
            logger.info(f"  {verb_name:15}")
            logger.info(f"    Shimaor√©: {verb.get('shimaor√©', 'N/A'):20} ‚Üí {shimaore_audio}")
            logger.info(f"    Kibouchi: {verb.get('kibouchi', 'N/A'):20} ‚Üí {kibouchi_audio}")
            
            # V√©rifier que les fichiers existent
            if shimaore_audio != 'Aucun':
                file_path = f"/app/frontend/assets/audio/verbes/{shimaore_audio}"
                exists = os.path.exists(file_path)
                logger.info(f"    Fichier shimaor√©: {'‚úÖ' if exists else '‚ùå'}")
                
            if kibouchi_audio != 'Aucun':
                file_path = f"/app/frontend/assets/audio/verbes/{kibouchi_audio}"
                exists = os.path.exists(file_path)
                logger.info(f"    Fichier kibouchi: {'‚úÖ' if exists else '‚ùå'}")
    
    return {
        'total': total_verbs,
        'shimaore': verbs_with_shimaore,
        'kibouchi': verbs_with_kibouchi,
        'both': verbs_with_both
    }

def main():
    """Fonction principale"""
    logger.info("üéØ ATTRIBUTION FINALE PRONONCIATIONS VERBES - ZIP UTILISATEUR")
    
    try:
        # 1. Cr√©er les correspondances compl√®tes
        mappings = create_complete_mapping()
        
        if not mappings:
            logger.error("√âchec cr√©ation des correspondances")
            return False
        
        # 2. Copier les fichiers audio
        audio_files = get_all_audio_files_from_zip()
        copied_count = copy_audio_files_to_assets(audio_files)
        
        # 3. Appliquer les correspondances en base
        updated_count = apply_mappings_to_database(mappings)
        
        # 4. V√©rifier le r√©sultat
        stats = verify_final_result()
        
        # 5. R√©sum√© final
        logger.info(f"\n{'='*100}")
        logger.info("R√âSUM√â ATTRIBUTION FINALE PRONONCIATIONS")
        logger.info(f"{'='*100}")
        logger.info(f"‚úÖ Fichiers copi√©s: {copied_count}")
        logger.info(f"‚úÖ Verbes mis √† jour: {updated_count}")
        logger.info(f"üìä Coverage shimaor√©: {stats['shimaore']}/{stats['total']} ({stats['shimaore']/stats['total']*100:.1f}%)")
        logger.info(f"üìä Coverage kibouchi: {stats['kibouchi']}/{stats['total']} ({stats['kibouchi']/stats['total']*100:.1f}%)")
        logger.info(f"üéØ Coverage compl√®te: {stats['both']}/{stats['total']} ({stats['both']/stats['total']*100:.1f}%)")
        
        logger.info(f"\nüéâ ATTRIBUTION FINALE TERMIN√âE!")
        logger.info(f"Chaque verbe a maintenant ses prononciations correspondantes selon votre ZIP.")
        
        return True
        
    except Exception as e:
        logger.error(f"Erreur dans l'attribution finale: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)