#!/usr/bin/env python3
"""
Comparaison m√©thodique entre la base de donn√©es existante et le tableau du PDF
Applique uniquement les corrections n√©cessaires en utilisant le PDF comme source authentique
"""

from dotenv import load_dotenv
load_dotenv()

from pymongo import MongoClient
import os
from datetime import datetime

# Configuration MongoDB
MONGO_URL = os.getenv('MONGO_URL')
client = MongoClient(MONGO_URL)
db = client.kwezi
words_collection = db.words

# Tableau authentique extrait du PDF (source de v√©rit√©)
PDF_REFERENCE_TABLE = {
    # Cas sp√©cifique mentionn√© par l'utilisateur : bigorno vs bigorneau
    "tortue": {"shimaore": "bigorno", "kibouchi": "", "action": "SUPPRIMER"},
    "bigorneau": {"shimaore": "trondro", "kibouchi": "", "action": "CONSERVER"},
    
    # Doublons d'escargot identifi√©s
    "escargot": {"shimaore": "kowa", "kibouchi": "", "action": "CORRIGER"},  # Garder kowa, supprimer kwa
    
    # Autres corrections orthographiques identifi√©es dans le PDF
    "lune": {"shimaore": "mwezi", "kibouchi": "", "correction": "mw√©zi -> mwezi"},
    "vent": {"shimaore": "pevo", "kibouchi": "", "correction": "p√©vo -> pevo"}, 
    "barri√®re de corail": {"shimaore": "caleni", "kibouchi": "", "correction": "cal√©ni -> caleni"},
    "plateau": {"shimaore": "bwe", "kibouchi": "", "correction": "bw√© -> bwe"},
    "rue": {"shimaore": "pare", "kibouchi": "", "correction": "par√© -> pare"},
    "arbre √† pain": {"shimaore": "m'frampe", "kibouchi": "", "correction": "m'framp√© -> m'frampe"},
    "jacquier": {"shimaore": "m'fenesii", "kibouchi": "", "correction": "m'f√©n√©ssi -> m'fenesii"},
    "platier": {"shimaore": "kale", "kibouchi": "", "correction": "kal√© -> kale"},
    "mar√©e haute": {"shimaore": "maji yamale", "kibouchi": "", "correction": "yamal√© -> yamale"},
    "sauvage": {"shimaore": "nyeha", "kibouchi": "", "correction": "ny√©ha -> nyeha"},
    "z√©bu": {"shimaore": "nyombe", "kibouchi": "", "correction": "nyomb√© -> nyombe"},
    "lambis": {"shimaore": "kombe", "kibouchi": "", "correction": "komb√© -> kombe"},
    "√©paule": {"shimaore": "bega", "kibouchi": "", "correction": "b√®ga -> bega"},
    "fesses": {"shimaore": "shidze", "kibouchi": "", "correction": "shidz√© -> shidze"},
    "langue": {"shimaore": "oulime", "kibouchi": "", "correction": "oulim√© -> oulime"},
    "cheveux": {"shimaore": "ngnele", "kibouchi": "", "correction": "ngn√©l√© -> ngnele"},
    "barbe": {"shimaore": "ndrevou", "kibouchi": "", "correction": "ndr√©vou -> ndrevou"},
    "cils": {"shimaore": "kove", "kibouchi": "", "correction": "kov√© -> kove"},
    "Comment √ßa va ?": {"shimaore": "jeje", "kibouchi": "", "correction": "j√©j√© -> jeje"},
    "√áa va bien": {"shimaore": "fetre", "kibouchi": "", "correction": "f√©tr√© -> fetre"},
    "Tu": {"shimaore": "wawe", "kibouchi": "", "correction": "waw√© -> wawe"},
    "Il/Elle": {"shimaore": "waye", "kibouchi": "", "correction": "way√© -> waye"},
    "bouc": {"shimaore": "bewe", "kibouchi": "", "correction": "b√©w√© -> bewe"},
    "dauphin": {"shimaore": "moungoume", "kibouchi": "", "correction": "moungoum√© -> moungoume"},
    
    # Diff√©renciation des traductions similaires
    "oursin": {"shimaore": "gadzassi ya bahari", "kibouchi": "", "action": "DIFFERENCIER"},
    "hu√Ætre": {"shimaore": "gadzassi ya mshindi", "kibouchi": "", "action": "DIFFERENCIER"},
    "sourcil": {"shimaore": "tsi la matso", "kibouchi": "", "action": "DIFFERENCIER"},
    
    # Traductions Kibouchi identifi√©es dans le PDF
    "pente": {"shimaore": "mlima", "kibouchi": "boungou", "action": "AJOUTER_KIBOUCHI"},
    "canne √† sucre": {"shimaore": "mouwoi", "kibouchi": "fandzava", "action": "AJOUTER_KIBOUCHI"}, 
    "√©cole": {"shimaore": "licoli", "kibouchi": "lakintagna", "action": "AJOUTER_KIBOUCHI"},
    "herbe": {"shimaore": "bandra", "kibouchi": "fasigni", "action": "AJOUTER_KIBOUCHI"},
    "rivi√®re": {"shimaore": "mouro", "kibouchi": "houndza", "action": "AJOUTER_KIBOUCHI"},
    "fagot": {"shimaore": "kouni", "kibouchi": "tsikou", "action": "AJOUTER_KIBOUCHI"},
    "plateau": {"shimaore": "bwe", "kibouchi": "mahalelini", "action": "AJOUTER_KIBOUCHI"},
    "cocotier": {"shimaore": "m'nadzi", "kibouchi": "honkou", "action": "AJOUTER_KIBOUCHI"},
    "corail": {"shimaore": "soiyi", "kibouchi": "soiyi", "action": "AJOUTER_KIBOUCHI"},
    "barri√®re de corail": {"shimaore": "caleni", "kibouchi": "caleni", "action": "AJOUTER_KIBOUCHI"},
    "pont": {"shimaore": "daradja", "kibouchi": "daradja", "action": "AJOUTER_KIBOUCHI"},
    "nuage": {"shimaore": "wingou", "kibouchi": "vingou", "action": "AJOUTER_KIBOUCHI"},
    "arc-en-ciel": {"shimaore": "mcacamba", "kibouchi": "atihala", "action": "AJOUTER_KIBOUCHI"},
    "caillou": {"shimaore": "malavouni", "kibouchi": "vatou", "action": "AJOUTER_KIBOUCHI"},
    "chemin": {"shimaore": "ndzia", "kibouchi": "ketraka", "action": "AJOUTER_KIBOUCHI"},
    "fleur": {"shimaore": "malavou", "kibouchi": "lalagna", "action": "AJOUTER_KIBOUCHI"},
    "soleil": {"shimaore": "jouwa", "kibouchi": "haitri", "action": "AJOUTER_KIBOUCHI"},
    "mer": {"shimaore": "bahari", "kibouchi": "bahari", "action": "AJOUTER_KIBOUCHI"},
    "plage": {"shimaore": "mtsangani", "kibouchi": "fassigni", "action": "AJOUTER_KIBOUCHI"},
    "arbre": {"shimaore": "mwiri", "kibouchi": "kakazou", "action": "AJOUTER_KIBOUCHI"},
}

def analyze_current_database():
    """Analyse l'√©tat actuel de la base de donn√©es"""
    print("üîç ANALYSE DE LA BASE DE DONN√âES ACTUELLE")
    print("=" * 50)
    
    total_words = words_collection.count_documents({})
    print(f"Total des mots dans la base: {total_words}")
    
    categories = words_collection.distinct("category")
    print(f"Cat√©gories: {len(categories)} - {', '.join(sorted(categories))}")
    
    # Couverture des traductions
    with_shimaore = words_collection.count_documents({"shimaore": {"$ne": ""}})
    with_kibouchi = words_collection.count_documents({"kibouchi": {"$ne": ""}})
    
    print(f"Mots avec shimaor√©: {with_shimaore}/{total_words}")
    print(f"Mots avec kibouchi: {with_kibouchi}/{total_words}")
    
    return {
        'total': total_words,
        'categories': categories,
        'with_shimaore': with_shimaore,
        'with_kibouchi': with_kibouchi
    }

def compare_word_with_pdf(french_word, pdf_data):
    """Compare un mot de la base avec les donn√©es du PDF"""
    db_words = list(words_collection.find({"french": french_word}))
    
    if not db_words:
        return f"MANQUANT: '{french_word}' non trouv√© dans la base"
    
    issues = []
    
    for db_word in db_words:
        db_shimaore = db_word.get('shimaore', '')
        db_kibouchi = db_word.get('kibouchi', '')
        
        # V√©rifier shimaor√©
        if pdf_data['shimaore'] and db_shimaore != pdf_data['shimaore']:
            issues.append(f"SHIMAOR√â DIFF√âRENT: DB='{db_shimaore}' vs PDF='{pdf_data['shimaore']}'")
        
        # V√©rifier kibouchi si pr√©sent dans le PDF
        if pdf_data['kibouchi'] and db_kibouchi != pdf_data['kibouchi']:
            issues.append(f"KIBOUCHI DIFF√âRENT: DB='{db_kibouchi}' vs PDF='{pdf_data['kibouchi']}'")
    
    return issues if issues else "CONFORME"

def apply_corrections():
    """Applique les corrections identifi√©es en utilisant le PDF comme r√©f√©rence"""
    print("\nüîß APPLICATION DES CORRECTIONS")
    print("=" * 50)
    
    corrections_applied = 0
    
    for french_word, pdf_data in PDF_REFERENCE_TABLE.items():
        action = pdf_data.get('action', 'CORRIGER')
        
        if action == "SUPPRIMER":
            # Supprimer le mot (cas tortue -> bigorno)
            deleted = words_collection.delete_many({"french": french_word, "shimaore": pdf_data['shimaore']})
            if deleted.deleted_count > 0:
                print(f"  üóëÔ∏è SUPPRIM√â: {french_word} -> {pdf_data['shimaore']} ({deleted.deleted_count} entr√©es)")
                corrections_applied += 1
                
        elif action == "CONSERVER":
            # V√©rifier que le mot existe bien
            existing = words_collection.find_one({"french": french_word})
            if existing:
                print(f"  ‚úÖ CONFIRM√â: {french_word} -> {existing.get('shimaore', '')}")
            else:
                print(f"  ‚ùå MANQUANT: {french_word} devrait exister")
                
        elif action == "CORRIGER":
            # Corriger la traduction
            db_words = list(words_collection.find({"french": french_word}))
            for word in db_words:
                if word.get('shimaore') != pdf_data['shimaore']:
                    words_collection.update_one(
                        {"_id": word["_id"]},
                        {"$set": {"shimaore": pdf_data['shimaore']}}
                    )
                    print(f"  üìù CORRIG√â: {french_word} shimaor√© -> '{pdf_data['shimaore']}'")
                    corrections_applied += 1
                    
        elif action == "AJOUTER_KIBOUCHI":
            # Ajouter ou corriger la traduction kibouchi
            db_word = words_collection.find_one({"french": french_word})
            if db_word:
                updates = {}
                if pdf_data['shimaore'] and db_word.get('shimaore') != pdf_data['shimaore']:
                    updates['shimaore'] = pdf_data['shimaore']
                if pdf_data['kibouchi'] and db_word.get('kibouchi') != pdf_data['kibouchi']:
                    updates['kibouchi'] = pdf_data['kibouchi']
                
                if updates:
                    words_collection.update_one(
                        {"_id": db_word["_id"]},
                        {"$set": updates}
                    )
                    print(f"  üîÑ MIS √Ä JOUR: {french_word} -> {updates}")
                    corrections_applied += 1
                    
        elif action == "DIFFERENCIER":
            # Diff√©rencier les traductions similaires
            db_word = words_collection.find_one({"french": french_word})
            if db_word and db_word.get('shimaore') != pdf_data['shimaore']:
                words_collection.update_one(
                    {"_id": db_word["_id"]},
                    {"$set": {"shimaore": pdf_data['shimaore']}}
                )
                print(f"  üîÄ DIFF√âRENCI√â: {french_word} -> '{pdf_data['shimaore']}'")
                corrections_applied += 1
    
    print(f"\nüìä CORRECTIONS APPLIQU√âES: {corrections_applied}")
    return corrections_applied

def generate_comparison_report():
    """G√©n√®re un rapport de comparaison d√©taill√©"""
    print("\nüìä RAPPORT DE COMPARAISON BASE DE DONN√âES vs PDF")
    print("=" * 60)
    
    conforming_words = 0
    total_checked = 0
    
    for french_word, pdf_data in PDF_REFERENCE_TABLE.items():
        total_checked += 1
        comparison_result = compare_word_with_pdf(french_word, pdf_data)
        
        if comparison_result == "CONFORME":
            conforming_words += 1
            print(f"‚úÖ {french_word}: CONFORME")
        else:
            print(f"‚ùå {french_word}: {comparison_result}")
    
    conformity_rate = (conforming_words / total_checked * 100) if total_checked > 0 else 0
    print(f"\nüìà TAUX DE CONFORMIT√â: {conforming_words}/{total_checked} ({conformity_rate:.1f}%)")
    
    return {
        'total_checked': total_checked,
        'conforming': conforming_words,
        'conformity_rate': conformity_rate
    }

def main():
    """Fonction principale de comparaison et correction"""
    print("üîç COMPARAISON BASE DE DONN√âES vs TABLEAU PDF")
    print("=" * 60)
    print(f"Source authentique: PDF vocabulaire shimaor√©-kibouchi")
    print(f"Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # 1. Analyser l'√©tat actuel
        db_stats = analyze_current_database()
        
        # 2. G√©n√©rer rapport de comparaison
        comparison_stats = generate_comparison_report()
        
        # 3. Appliquer les corrections n√©cessaires
        corrections_count = apply_corrections()
        
        # 4. Rapport final
        print(f"\n‚úÖ COMPARAISON ET CORRECTIONS TERMIN√âES")
        print(f"  - Mots dans la base: {db_stats['total']}")
        print(f"  - Mots v√©rifi√©s: {comparison_stats['total_checked']}")
        print(f"  - Corrections appliqu√©es: {corrections_count}")
        print(f"  - Taux de conformit√© final: {comparison_stats['conformity_rate']:.1f}%")
        
    except Exception as e:
        print(f"‚ùå ERREUR: {str(e)}")
        raise

if __name__ == "__main__":
    main()