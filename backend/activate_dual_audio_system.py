#!/usr/bin/env python3
"""
Active le syst√®me audio dual pour tous les verbes
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import logging

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        client = MongoClient(mongo_url)
        db = client['shimaor√©_app']
        logger.info("Connexion √† la base de donn√©es r√©ussie")
        return db
    except Exception as e:
        logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
        raise

def activate_dual_audio_system():
    """Active le syst√®me dual audio pour tous les verbes"""
    db = connect_to_database()
    collection = db['vocabulary']
    
    logger.info("üîÑ ACTIVATION SYST√àME AUDIO DUAL POUR VERBES")
    
    # Activer le syst√®me dual pour tous les verbes
    result = collection.update_many(
        {"section": "verbes"},
        {"$set": {"dual_audio_system": True}}
    )
    
    logger.info(f"‚úÖ Syst√®me dual activ√© pour {result.modified_count} verbes")
    
    return result.modified_count

def verify_dual_system():
    """V√©rifie que le syst√®me dual est activ√©"""
    db = connect_to_database()
    collection = db['vocabulary']
    
    logger.info("\n=== V√âRIFICATION SYST√àME DUAL ===")
    
    # V√©rifier sp√©cifiquement attendre et ab√Æmer
    test_verbs = ["attendre", "ab√Æmer"]
    
    for verb_name in test_verbs:
        verb = collection.find_one({
            "section": "verbes",
            "french": verb_name
        })
        
        if verb:
            dual_system = verb.get("dual_audio_system", False)
            has_shimaore = verb.get("has_shimaor√©_audio", False)
            has_kibouchi = verb.get("has_kibouchi_audio", False)
            
            logger.info(f"\nüîç {verb_name.upper()}:")
            logger.info(f"  dual_audio_system: {'‚úÖ' if dual_system else '‚ùå'} {dual_system}")
            logger.info(f"  has_shimaor√©_audio: {'‚úÖ' if has_shimaore else '‚ùå'} {has_shimaore}")
            logger.info(f"  has_kibouchi_audio: {'‚úÖ' if has_kibouchi else '‚ùå'} {has_kibouchi}")
            
            if dual_system and (has_shimaore or has_kibouchi):
                logger.info(f"  ‚Üí API PR√äTE pour {verb_name}")
            else:
                logger.warning(f"  ‚Üí API PAS PR√äTE pour {verb_name}")

def main():
    """Fonction principale"""
    logger.info("üéØ ACTIVATION SYST√àME AUDIO DUAL VERBES")
    
    try:
        # 1. Activer le syst√®me dual
        activated_count = activate_dual_audio_system()
        
        # 2. V√©rifier l'activation
        verify_dual_system()
        
        # 3. R√©sum√©
        logger.info(f"\n{'='*80}")
        logger.info("R√âSUM√â ACTIVATION SYST√àME DUAL")
        logger.info(f"{'='*80}")
        logger.info(f"‚úÖ Syst√®me dual activ√© pour: {activated_count} verbes")
        logger.info(f"üéØ L'API peut maintenant servir les audio via /api/words/{'{word_id}'}/audio/{'{lang}'}")
        logger.info(f"üí° Test avec: /api/words/WORD_ID/audio/shimaore ou /api/words/WORD_ID/audio/kibouchi")
        
        return True
        
    except Exception as e:
        logger.error(f"Erreur dans l'activation: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)