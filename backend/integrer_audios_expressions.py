#!/usr/bin/env python3
"""
Int√©gration automatique des audios d'expressions
Match les fichiers audio avec les mots de la base de donn√©es
"""

from pymongo import MongoClient
import os
from difflib import SequenceMatcher
from datetime import datetime

def similarity(a, b):
    """Calcule la similarit√© entre deux cha√Ænes"""
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()

def normalize_text(text):
    """Normalise le texte pour la comparaison"""
    return text.lower().strip().replace("'", "'").replace("'", "'")

def main():
    print("=" * 80)
    print("INT√âGRATION AUTOMATIQUE DES AUDIOS EXPRESSIONS")
    print("=" * 80)
    print()
    
    client = MongoClient("mongodb://localhost:27017")
    db = client["mayotte_app"]
    
    # R√©cup√©rer tous les mots de la cat√©gorie expressions
    expressions = list(db.words.find({"category": "expressions"}))
    print(f"üìä Mots expressions dans la base : {len(expressions)}")
    
    # Lister tous les fichiers audio
    audio_dir = "/app/frontend/assets/audio/expressions"
    audio_files = [f for f in os.listdir(audio_dir) if f.endswith('.m4a')]
    print(f"üéµ Fichiers audio disponibles : {len(audio_files)}")
    print()
    
    matched = 0
    updated_shimaor√© = 0
    updated_kibouchi = 0
    no_match = []
    
    # Pour chaque mot, chercher les fichiers audio correspondants
    for word in expressions:
        french = word.get('french', '')
        shimaore = word.get('shimaore', '')
        kibouchi = word.get('kibouchi', '')
        word_id = word['_id']
        
        # Pr√©parer les mises √† jour
        updates = {}
        
        # Chercher audio shimaor√©
        if shimaore:
            shimaore_norm = normalize_text(shimaore)
            best_match_shim = None
            best_score_shim = 0.0
            
            for audio_file in audio_files:
                audio_name = audio_file.replace('.m4a', '')
                audio_norm = normalize_text(audio_name)
                
                # Calcul de similarit√©
                score = similarity(shimaore_norm, audio_norm)
                
                # Match exact ou tr√®s proche
                if score > best_score_shim:
                    best_score_shim = score
                    best_match_shim = audio_file
            
            # Si match suffisant (>= 0.8), on l'utilise
            if best_match_shim and best_score_shim >= 0.80:
                updates['audio_filename_shimaore'] = best_match_shim
                updates['shimoare_audio_filename'] = best_match_shim
                updates['shimoare_has_audio'] = True
                updated_shimaor√© += 1
        
        # Chercher audio kibouchi
        if kibouchi:
            kibouchi_norm = normalize_text(kibouchi)
            best_match_kib = None
            best_score_kib = 0.0
            
            for audio_file in audio_files:
                audio_name = audio_file.replace('.m4a', '')
                audio_norm = normalize_text(audio_name)
                
                # Calcul de similarit√©
                score = similarity(kibouchi_norm, audio_norm)
                
                # Match exact ou tr√®s proche
                if score > best_score_kib:
                    best_score_kib = score
                    best_match_kib = audio_file
            
            # Si match suffisant (>= 0.8), on l'utilise
            if best_match_kib and best_score_kib >= 0.80:
                updates['audio_filename_kibouchi'] = best_match_kib
                updates['kibouchi_audio_filename'] = best_match_kib
                updates['kibouchi_has_audio'] = True
                updated_kibouchi += 1
        
        # Mettre √† jour si on a trouv√© au moins un audio
        if updates:
            updates['dual_audio_system'] = True
            updates['updated_at'] = datetime.utcnow()
            
            db.words.update_one(
                {"_id": word_id},
                {"$set": updates}
            )
            matched += 1
            print(f"‚úÖ {french}")
            if 'audio_filename_shimaore' in updates:
                print(f"   Shimaor√© : {shimaore} ‚Üí {updates['audio_filename_shimaore']}")
            if 'audio_filename_kibouchi' in updates:
                print(f"   Kibouchi : {kibouchi} ‚Üí {updates['audio_filename_kibouchi']}")
        else:
            no_match.append({
                'french': french,
                'shimaore': shimaore,
                'kibouchi': kibouchi
            })
    
    print()
    print("=" * 80)
    print("R√âSULTATS")
    print("=" * 80)
    print()
    print(f"‚úÖ Mots mis √† jour : {matched}/{len(expressions)}")
    print(f"   ‚Ä¢ Audios shimaor√© ajout√©s : {updated_shimaor√©}")
    print(f"   ‚Ä¢ Audios kibouchi ajout√©s : {updated_kibouchi}")
    print()
    
    if no_match:
        print(f"‚ö†Ô∏è  Mots sans correspondance audio ({len(no_match)}) :")
        for item in no_match[:10]:  # Limiter √† 10
            print(f"   ‚Ä¢ {item['french']} (shimaor√©: {item['shimaore']}, kibouchi: {item['kibouchi']})")
        if len(no_match) > 10:
            print(f"   ... et {len(no_match) - 10} autres")
    
    print()
    print("=" * 80)
    
    # Rapport d√©taill√©
    with open('/app/RAPPORT_INTEGRATION_EXPRESSIONS.txt', 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("RAPPORT INT√âGRATION AUDIOS EXPRESSIONS\n")
        f.write("=" * 80 + "\n\n")
        f.write(f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
        f.write(f"Fichiers audio disponibles : {len(audio_files)}\n")
        f.write(f"Mots expressions : {len(expressions)}\n")
        f.write(f"Mots mis √† jour : {matched}\n")
        f.write(f"Audios shimaor√© : {updated_shimaor√©}\n")
        f.write(f"Audios kibouchi : {updated_kibouchi}\n\n")
        
        if no_match:
            f.write(f"Mots sans correspondance ({len(no_match)}) :\n")
            for item in no_match:
                f.write(f"  - {item['french']} : {item['shimaore']} / {item['kibouchi']}\n")
    
    print("üìÑ Rapport sauvegard√© : /app/RAPPORT_INTEGRATION_EXPRESSIONS.txt")
    print()

if __name__ == "__main__":
    main()
