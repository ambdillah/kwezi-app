#!/usr/bin/env python3
"""
Script pour mettre √† jour la section "maison" dans la base de donn√©es
avec les nouvelles donn√©es du vocabulaire de la maison en shimaor√© et kibouchi.
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import logging

# Charger les variables d'environnement
load_dotenv()

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Nouvelles donn√©es maison avec orthographe corrig√©e
MAISON_DATA_CORRECTED = [
    {"french": "maison", "shimaor√©": "nyoumba", "kibouchi": "tragnou"},
    {"french": "porte", "shimaor√©": "mlango", "kibouchi": "varavaragna"},
    {"french": "case", "shimaor√©": "banga", "kibouchi": "banga"},
    {"french": "lit", "shimaor√©": "chtrandra", "kibouchi": "koubani"},
    {"french": "marmite", "shimaor√©": "gnoungou", "kibouchi": "vilangni"},
    {"french": "vaisselle", "shimaor√©": "ziya", "kibouchi": "hintagna"},
    {"french": "bol", "shimaor√©": "chicomb√©", "kibouchi": "bacouli"},
    {"french": "cuill√®re", "shimaor√©": "soutrou", "kibouchi": "sotrou"},
    {"french": "fen√™tre", "shimaor√©": "f√©n√©tri", "kibouchi": "lafoum√®tara"},
    {"french": "chaise", "shimaor√©": "chiri", "kibouchi": "chiri"},
    {"french": "table", "shimaor√©": "latabou", "kibouchi": "latabou"},
    {"french": "miroir", "shimaor√©": "chido", "kibouchi": "kitarafa"},
    {"french": "cour", "shimaor√©": "mraba", "kibouchi": "lacourou"},
    {"french": "cl√¥ture", "shimaor√©": "vala", "kibouchi": "vala"},
    {"french": "toilette", "shimaor√©": "mrabani", "kibouchi": "mraba"},
    {"french": "seau", "shimaor√©": "siyo", "kibouchi": "siyo"},
    {"french": "louche", "shimaor√©": "chiwi", "kibouchi": "pow"},
    {"french": "couteau", "shimaor√©": "semb√©ya", "kibouchi": "m√©ssou"},
    {"french": "matelas", "shimaor√©": "godoro", "kibouchi": "goudorou"},
    {"french": "oreiller", "shimaor√©": "mtsao", "kibouchi": "hondagna"},
    {"french": "buffet", "shimaor√©": "biff√©", "kibouchi": "biff√©"},
    {"french": "mur", "shimaor√©": "p√©ssi", "kibouchi": "riba"},
    {"french": "v√©randa", "shimaor√©": "baraza", "kibouchi": "baraza"},
    {"french": "toiture", "shimaor√©": "outro", "kibouchi": "vovougnou"},
    {"french": "ampoule", "shimaor√©": "lalampou", "kibouchi": "lalampou"},
    {"french": "lumi√®re", "shimaor√©": "mwengu√©", "kibouchi": "mwengu√©"},
    {"french": "torche", "shimaor√©": "pong√©", "kibouchi": "pongi"},
    {"french": "hache", "shimaor√©": "soha", "kibouchi": "famaki"},
    {"french": "machette", "shimaor√©": "m'panga", "kibouchi": "ampanga"},
    {"french": "coupe-coupe", "shimaor√©": "chombo", "kibouchi": "chombou"},
    {"french": "cartable", "shimaor√©": "mkoba", "kibouchi": "mkoba"},
    {"french": "sac", "shimaor√©": "gouni", "kibouchi": "gouni"},
    {"french": "balai", "shimaor√©": "p√©ou", "kibouchi": "famafa"},
    {"french": "mortier", "shimaor√©": "chino", "kibouchi": "l√©gnou"},
    {"french": "assiette", "shimaor√©": "sahani", "kibouchi": "sahani"},
    {"french": "fondation", "shimaor√©": "houra", "kibouchi": "koura"},
    {"french": "torche locale", "shimaor√©": "gandil√©", "kibouchi": "gandili"}
]

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        if not mongo_url:
            raise ValueError("MONGO_URL non trouv√©e dans les variables d'environnement")
        
        client = MongoClient(mongo_url)
        db = client['shimaor√©_app']
        logger.info("Connexion √† la base de donn√©es r√©ussie")
        return db
    except Exception as e:
        logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
        raise

def get_house_emoji(french_name):
    """Retourne un emoji appropri√© pour l'objet de maison donn√©"""
    emoji_map = {
        "maison": "üè†", "porte": "üö™", "case": "üèòÔ∏è", "lit": "üõèÔ∏è", "marmite": "üç≤", 
        "vaisselle": "üçΩÔ∏è", "bol": "ü•£", "cuill√®re": "ü•Ñ", "fen√™tre": "ü™ü", 
        "chaise": "ü™ë", "table": "ü™ë", "miroir": "ü™û", "cour": "üè°", "cl√¥ture": "üöß",
        "toilette": "üöΩ", "seau": "ü™£", "louche": "ü•Ñ", "couteau": "üî™", 
        "matelas": "üõèÔ∏è", "oreiller": "üõèÔ∏è", "buffet": "üóÑÔ∏è", "mur": "üß±",
        "v√©randa": "üè°", "toiture": "üè†", "ampoule": "üí°", "lumi√®re": "üí°",
        "torche": "üî¶", "hache": "ü™ì", "machette": "üó°Ô∏è", "coupe-coupe": "üó°Ô∏è",
        "cartable": "üéí", "sac": "üéí", "balai": "üßπ", "mortier": "ü´ö",
        "assiette": "üçΩÔ∏è", "fondation": "üèóÔ∏è", "torche locale": "üî¶"
    }
    
    return emoji_map.get(french_name.lower(), "üè†")

def compare_and_update_maison(db):
    """Compare et met √† jour l'orthographe des mots de maison"""
    collection = db['vocabulary']
    
    # R√©cup√©rer les mots actuels de la section maison
    current_words = list(collection.find({"section": "maison"}))
    logger.info(f"Mots actuels dans la section maison: {len(current_words)}")
    
    corrections_count = 0
    additions_count = 0
    
    # Cr√©er un dictionnaire pour faciliter les comparaisons
    current_dict = {word.get('french', '').lower(): word for word in current_words}
    
    logger.info("\n=== ANALYSE DES CORRECTIONS ORTHOGRAPHIQUES ===")
    
    for corrected_word in MAISON_DATA_CORRECTED:
        french_key = corrected_word['french'].lower()
        
        if french_key in current_dict:
            # Le mot existe, v√©rifier s'il y a des corrections
            current_word = current_dict[french_key]
            current_shimaore = current_word.get('shimaor√©', '')
            current_kibouchi = current_word.get('kibouchi', '')
            
            corrected_shimaore = corrected_word['shimaor√©']
            corrected_kibouchi = corrected_word['kibouchi']
            
            needs_update = False
            changes = []
            
            if current_shimaore != corrected_shimaore:
                changes.append(f"shimaor√©: '{current_shimaore}' ‚Üí '{corrected_shimaore}'")
                needs_update = True
                
            if current_kibouchi != corrected_kibouchi:
                changes.append(f"kibouchi: '{current_kibouchi}' ‚Üí '{corrected_kibouchi}'")
                needs_update = True
            
            if needs_update:
                logger.info(f"üìù CORRECTION - {corrected_word['french']}: {' | '.join(changes)}")
                
                # Mettre √† jour le document
                emoji = get_house_emoji(corrected_word['french'])
                result = collection.update_one(
                    {"_id": current_word['_id']},
                    {
                        "$set": {
                            "shimaor√©": corrected_shimaore,
                            "kibouchi": corrected_kibouchi,
                            "emoji": emoji,
                            "orthography_updated": True
                        }
                    }
                )
                
                if result.modified_count > 0:
                    corrections_count += 1
            else:
                logger.info(f"‚úÖ OK - {corrected_word['french']}: Orthographe correcte")
        else:
            # Nouveau mot √† ajouter
            logger.info(f"‚ûï NOUVEAU - {corrected_word['french']}: Ajout √† la base de donn√©es")
            
            emoji = get_house_emoji(corrected_word['french'])
            
            # Cr√©er le nom de fichier audio de mani√®re s√©par√©e
            audio_base_name = corrected_word['french'].lower().replace(' ', '_').replace("'", '_').replace('-', '_')
            
            new_document = {
                "section": "maison",
                "french": corrected_word['french'],
                "shimaor√©": corrected_word['shimaor√©'],
                "kibouchi": corrected_word['kibouchi'],
                "emoji": emoji,
                "audio_shimaor√©": f"audio/{audio_base_name}_shimaor√©.mp3",
                "audio_kibouchi": f"audio/{audio_base_name}_kibouchi.mp3"
            }
            
            result = collection.insert_one(new_document)
            if result.inserted_id:
                additions_count += 1
    
    logger.info(f"\n=== R√âSUM√â DES MODIFICATIONS ===")
    logger.info(f"Corrections orthographiques appliqu√©es: {corrections_count}")
    logger.info(f"Nouveaux mots ajout√©s: {additions_count}")
    logger.info(f"Total des modifications: {corrections_count + additions_count}")
    
    return corrections_count, additions_count

def main():
    """Fonction principale"""
    logger.info("D√©but de la mise √† jour de la section maison")
    
    try:
        # Connexion √† la base de donn√©es
        db = connect_to_database()
        
        # Comparer et mettre √† jour
        corrections, additions = compare_and_update_maison(db)
        
        if corrections > 0 or additions > 0:
            logger.info(f"üéâ Mise √† jour de la section maison termin√©e avec succ√®s!")
            logger.info(f"   - {corrections} corrections appliqu√©es")
            logger.info(f"   - {additions} nouveaux mots ajout√©s")
        else:
            logger.info("‚ÑπÔ∏è Aucune correction n√©cessaire - l'orthographe √©tait d√©j√† correcte")
            
    except Exception as e:
        logger.error(f"Erreur dans le script principal: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())