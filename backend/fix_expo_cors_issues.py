#!/usr/bin/env python3
"""
Correction des probl√®mes CORS et Expo Go
"""

import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_expo_config():
    """V√©rifie la configuration Expo"""
    app_json_path = "/app/frontend/app.json"
    
    logger.info("üîç V√âRIFICATION CONFIGURATION EXPO")
    
    if os.path.exists(app_json_path):
        with open(app_json_path, 'r') as f:
            content = f.read()
            logger.info("‚úÖ app.json existe")
            
            # V√©rifier les configurations importantes
            if '"scheme":' in content:
                logger.info("‚úÖ Scheme configur√©")
            else:
                logger.warning("‚ö†Ô∏è Scheme manquant")
                
            if '"platforms":' in content:
                logger.info("‚úÖ Platforms configur√©es")
            else:
                logger.warning("‚ö†Ô∏è Platforms manquantes")
    else:
        logger.error("‚ùå app.json non trouv√©")

def check_env_variables():
    """V√©rifie les variables d'environnement"""
    logger.info("\nüîç V√âRIFICATION VARIABLES ENVIRONNEMENT")
    
    env_path = "/app/frontend/.env"
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            content = f.read()
            logger.info("‚úÖ .env existe")
            
            # Variables importantes pour Expo
            important_vars = [
                'EXPO_PACKAGER_PROXY_URL',
                'EXPO_PACKAGER_HOSTNAME'
            ]
            
            for var in important_vars:
                if var in content:
                    logger.info(f"‚úÖ {var} configur√©")
                else:
                    logger.warning(f"‚ö†Ô∏è {var} manquant")
    else:
        logger.error("‚ùå .env non trouv√©")

def check_backend_cors():
    """V√©rifie la configuration CORS du backend"""
    logger.info("\nüîç V√âRIFICATION CORS BACKEND")
    
    server_path = "/app/backend/server.py"
    if os.path.exists(server_path):
        with open(server_path, 'r') as f:
            content = f.read()
            
            if 'CORSMiddleware' in content:
                logger.info("‚úÖ CORSMiddleware configur√©")
            else:
                logger.warning("‚ö†Ô∏è CORSMiddleware manquant")
                
            if 'allow_origins=["*"]' in content:
                logger.info("‚úÖ Origins autoris√©es")
            else:
                logger.warning("‚ö†Ô∏è Origins restrictives")
    else:
        logger.error("‚ùå server.py non trouv√©")

def generate_qr_code():
    """G√©n√®re un nouveau QR code pour Expo Go"""
    logger.info("\nüì± G√âN√âRATION QR CODE EXPO GO")
    
    # Le QR code est g√©n√©ralement cr√©√© automatiquement par Expo
    qr_path = "/app/frontend/qr_code_expo.png"
    if os.path.exists(qr_path):
        logger.info("‚úÖ QR code existe")
    else:
        logger.warning("‚ö†Ô∏è QR code manquant - sera g√©n√©r√© au d√©marrage")

def main():
    """Fonction principale"""
    logger.info("üéØ DIAGNOSTIC PROBL√àMES EXPO GO & CORS")
    
    try:
        check_expo_config()
        check_env_variables()
        check_backend_cors()
        generate_qr_code()
        
        logger.info(f"\n{'='*60}")
        logger.info("RECOMMANDATIONS")
        logger.info(f"{'='*60}")
        logger.info("1. Red√©marrer Expo avec tunnel mode")
        logger.info("2. V√©rifier les variables d'environnement")
        logger.info("3. Utiliser le QR code g√©n√©r√©")
        logger.info("4. Tester avec incognito mode si probl√®mes CORS")
        
        return True
        
    except Exception as e:
        logger.error(f"Erreur dans le diagnostic: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)