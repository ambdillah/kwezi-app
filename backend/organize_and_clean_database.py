#!/usr/bin/env python3
"""
ORGANISATION ET NETTOYAGE COMPLET DE LA BASE DE DONN√âES
======================================================
1. Tri alphab√©tique par cat√©gorie (sauf nombres et grammaire)
2. Suppression d'emojis sp√©cifiques
3. Correction des fautes d'orthographe fran√ßaises
"""

import os
import re
from pymongo import MongoClient
from dotenv import load_dotenv
from database_protection import protect_database, db_protector

# Charger les variables d'environnement
load_dotenv()

# Configuration MongoDB
MONGO_URL = os.getenv('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.getenv('DB_NAME', 'mayotte_app')

# Mots dont il faut supprimer les emojis
MOTS_SUPPRIMER_EMOJIS = [
    "papaye", "vagin", "p√©nis", "fesses", "fruit du jacquier", 
    "terre", "sol", "platier", "fondation",
    "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"
]

# Corrections d'orthographe fran√ßaises communes
CORRECTIONS_ORTHOGRAPHE = {
    # Corrections d'accents
    "eleve": "√©l√®ve",
    "eleveur": "√©leveur", 
    "ecole": "√©cole",
    "ecrire": "√©crire",
    "ecouter": "√©couter",
    "etudier": "√©tudier",
    "etoile": "√©toile",
    "etre": "√™tre",
    "hopital": "h√¥pital",
    "hotel": "h√¥tel",
    "ile": "√Æle",
    "theatre": "th√©√¢tre",
    "fete": "f√™te",
    "foret": "for√™t",
    "cote": "c√¥te",
    "gouter": "go√ªter",
    "ou": "o√π",
    "ca": "√ßa",
    "deja": "d√©j√†",
    "priere": "pri√®re",
    "riviere": "rivi√®re",
    "premiere": "premi√®re",
    "derniere": "derni√®re",
    "lumiere": "lumi√®re",
    "matiere": "mati√®re",
    "epoux": "√©poux",
    "epouse": "√©pouse",
    
    # Corrections de c√©dilles
    "garcon": "gar√ßon",
    "francais": "fran√ßais",
    "lecon": "le√ßon",
    "recue": "re√ßue",
    "apercu": "aper√ßu",
    
    # Corrections de doubles consonnes
    "adresse": "adresse",
    "appareil": "appareil", 
    "apposer": "apposer",
    "arreter": "arr√™ter",
    "attendre": "attendre",
    "difficile": "difficile",
    "intelligent": "intelligent",
    "interessant": "int√©ressant",
    "necessite": "n√©cessit√©",
    "occassion": "occasion",
    "professionel": "professionnel",
    "recomander": "recommander",
    "developper": "d√©velopper",
    
    # Corrections diverses
    "language": "langage",
    "orthographe": "orthographe",
    "rythme": "rythme",
    "sympatique": "sympathique",
    "exercise": "exercice",
    "exemple": "exemple",
    "explication": "explication",
    "definition": "d√©finition",
    
    # Corrections sp√©cifiques courantes
    "apartement": "appartement",
    "apartenir": "appartenir",
    "asseoir": "s'asseoir",
    "comencer": "commencer",
    "coment": "comment",
    "diferent": "diff√©rent",
    "enfin": "enfin",
    "environ": "environ",
    "examen": "examen",
    "famile": "famille",
    "interesant": "int√©ressant",
    "language": "langage",
    "longtemp": "longtemps",
    "mariage": "mariage",
    "marriage": "mariage",
    "mieu": "mieux",
    "milieu": "milieu",
    "nouvele": "nouvelle",
    "oportunite": "opportunit√©",
    "parler": "parler",
    "particulier": "particulier",
    "peut-etre": "peut-√™tre",
    "plusieures": "plusieurs",
    "prendre": "prendre",
    "probablement": "probablement",
    "quelque chose": "quelque chose",
    "receuil": "recueil",
    "reconaitre": "reconna√Ætre",
    "rendez-vous": "rendez-vous",
    "reussir": "r√©ussir",
    "souvent": "souvent",
    "temp": "temps",
    "toujour": "toujours",
    "travail": "travail",
    "vraiment": "vraiment"
}

# Ordre logique pour la grammaire
ORDRE_GRAMMAIRE = [
    "je", "tu", "il", "elle", "nous", "vous", "ils", "elles",
    "moi", "toi", "lui", "elle", "nous", "vous", "eux", "elles",
    "mon", "ma", "mes", "ton", "ta", "tes", "son", "sa", "ses",
    "notre", "nos", "votre", "vos", "leur", "leurs",
    "le", "la", "les", "un", "une", "des",
    "ce", "cette", "ces", "cet",
    "qui", "que", "quoi", "dont", "o√π",
    "et", "ou", "mais", "donc", "car", "ni", "or",
    "dans", "sur", "sous", "avec", "sans", "pour", "par", "de", "du", "des"
]

def corriger_orthographe_francaise(texte):
    """Corrige l'orthographe fran√ßaise d'un texte"""
    if not texte:
        return texte
    
    texte_corrige = texte.lower().strip()
    
    # Appliquer les corrections d'orthographe
    for erreur, correction in CORRECTIONS_ORTHOGRAPHE.items():
        if texte_corrige == erreur.lower():
            return correction
    
    # Si pas de correction trouv√©e, retourner le texte original
    return texte

def get_sort_key_grammaire(mot_francais):
    """Retourne une cl√© de tri pour la grammaire selon l'ordre logique"""
    mot_lower = mot_francais.lower().strip()
    
    if mot_lower in ORDRE_GRAMMAIRE:
        return ORDRE_GRAMMAIRE.index(mot_lower)
    else:
        # Mots non dans la liste logique vont √† la fin, par ordre alphab√©tique
        return 1000 + ord(mot_lower[0]) if mot_lower else 1000

def get_sort_key_nombres(mot_francais):
    """Retourne une cl√© de tri pour les nombres (ordre croissant)"""
    # Mapping des nombres en fran√ßais vers leurs valeurs num√©riques
    nombres_francais = {
        "z√©ro": 0, "un": 1, "deux": 2, "trois": 3, "quatre": 4, "cinq": 5,
        "six": 6, "sept": 7, "huit": 8, "neuf": 9, "dix": 10,
        "onze": 11, "douze": 12, "treize": 13, "quatorze": 14, "quinze": 15,
        "seize": 16, "dix-sept": 17, "dix-huit": 18, "dix-neuf": 19, "vingt": 20,
        "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10,
        "11": 11, "12": 12, "13": 13, "14": 14, "15": 15, "16": 16, "17": 17, "18": 18, "19": 19, "20": 20
    }
    
    mot_lower = mot_francais.lower().strip()
    return nombres_francais.get(mot_lower, 1000)  # 1000 pour les non-nombres

@protect_database("organize_and_clean_database")
def organiser_et_nettoyer_database():
    """Organise et nettoie la base de donn√©es compl√®tement"""
    print("üîß ORGANISATION ET NETTOYAGE COMPLET DE LA BASE DE DONN√âES")
    print("=" * 80)
    
    try:
        client = MongoClient(MONGO_URL)
        client.admin.command('ping')
        print(f"‚úÖ Connexion MongoDB √©tablie : {MONGO_URL}")
    except Exception as e:
        print(f"‚ùå Erreur de connexion MongoDB : {e}")
        return False
    
    db = client[DB_NAME]
    words_collection = db.words
    
    # R√©cup√©rer tous les mots
    print("\nüìö R√©cup√©ration de tous les mots...")
    tous_les_mots = list(words_collection.find({}))
    print(f"‚úÖ {len(tous_les_mots)} mots r√©cup√©r√©s")
    
    # Statistiques
    mots_corriges_orthographe = 0
    mots_emojis_supprimes = 0
    categories_triees = 0
    
    # Organiser par cat√©gorie
    mots_par_categorie = {}
    for mot in tous_les_mots:
        categorie = mot.get('category', 'autres')
        if categorie not in mots_par_categorie:
            mots_par_categorie[categorie] = []
        mots_par_categorie[categorie].append(mot)
    
    print(f"üìÇ Cat√©gories trouv√©es: {list(mots_par_categorie.keys())}")
    
    # Traiter chaque cat√©gorie
    for categorie, mots in mots_par_categorie.items():
        print(f"\nüîÑ Traitement de la cat√©gorie '{categorie}' ({len(mots)} mots)...")
        
        mots_modifies = []
        
        for mot in mots:
            mot_modifie = mot.copy()
            
            # 1. Correction orthographe fran√ßaise
            french_original = mot.get('french', '')
            french_corrige = corriger_orthographe_francaise(french_original)
            
            if french_corrige != french_original:
                mot_modifie['french'] = french_corrige
                mots_corriges_orthographe += 1
                print(f"  üìù Orthographe: '{french_original}' ‚Üí '{french_corrige}'")
            
            # 2. Suppression d'emojis sp√©cifiques
            if french_corrige.lower() in [m.lower() for m in MOTS_SUPPRIMER_EMOJIS]:
                if mot_modifie.get('image_url') and mot_modifie['image_url'] not in ['', None]:
                    mot_modifie['image_url'] = ""
                    mots_emojis_supprimes += 1
                    print(f"  üö´ Emoji supprim√© pour '{french_corrige}'")
            
            mots_modifies.append(mot_modifie)
        
        # 3. Tri selon la cat√©gorie
        if categorie.lower() == 'nombres':
            # Tri par ordre croissant pour les nombres
            mots_modifies.sort(key=lambda x: get_sort_key_nombres(x.get('french', '')))
            print(f"  üìä Cat√©gorie '{categorie}' tri√©e par ordre croissant")
        elif categorie.lower() == 'grammaire':
            # Tri logique pour la grammaire
            mots_modifies.sort(key=lambda x: get_sort_key_grammaire(x.get('french', '')))
            print(f"  üìö Cat√©gorie '{categorie}' tri√©e par ordre logique")
        else:
            # Tri alphab√©tique pour toutes les autres cat√©gories
            mots_modifies.sort(key=lambda x: x.get('french', '').lower().strip())
            print(f"  üî§ Cat√©gorie '{categorie}' tri√©e par ordre alphab√©tique")
        
        categories_triees += 1
        
        # Mettre √† jour la base de donn√©es
        for mot_modifie in mots_modifies:
            words_collection.replace_one(
                {"_id": mot_modifie["_id"]},
                mot_modifie
            )
    
    print("\n" + "=" * 80)
    print("üìä R√âSUM√â DE L'ORGANISATION ET NETTOYAGE:")
    print(f"üî§ Cat√©gories tri√©es: {categories_triees}")
    print(f"üìù Mots avec orthographe corrig√©e: {mots_corriges_orthographe}")
    print(f"üö´ Emojis supprim√©s: {mots_emojis_supprimes}")
    print(f"üìö Total mots trait√©s: {len(tous_les_mots)}")
    
    # V√©rification finale de l'int√©grit√©
    print("\nüîç V√©rification de l'int√©grit√© post-organisation...")
    is_healthy, message = db_protector.is_database_healthy()
    if is_healthy:
        print("‚úÖ Base de donn√©es saine apr√®s organisation")
    else:
        print(f"‚ö†Ô∏è Probl√®me d√©tect√©: {message}")
    
    client.close()
    return True

if __name__ == "__main__":
    print("üöÄ D√©marrage de l'organisation et nettoyage de la base de donn√©es...")
    
    # V√©rifier l'√©tat initial
    print("\nüîç V√©rification de l'√©tat initial de la base de donn√©es...")
    is_healthy, message = db_protector.is_database_healthy()
    if not is_healthy:
        print(f"‚ö†Ô∏è Probl√®me d√©tect√© avant organisation: {message}")
        print("üîÑ Restauration recommand√©e avant organisation")
        exit(1)
    
    # Effectuer l'organisation et le nettoyage
    success = organiser_et_nettoyer_database()
    
    if success:
        print("\nüéâ ORGANISATION ET NETTOYAGE TERMIN√âS AVEC SUCC√àS!")
        print("‚úÖ Toutes les cat√©gories sont maintenant organis√©es")
        print("‚úÖ Les emojis sp√©cifi√©s ont √©t√© supprim√©s")
        print("‚úÖ L'orthographe fran√ßaise a √©t√© corrig√©e")
        
        # V√©rification finale de l'int√©grit√©
        print("\nüîç V√©rification finale de l'int√©grit√©...")
        is_healthy_after, message_after = db_protector.is_database_healthy()
        if is_healthy_after:
            print("‚úÖ Base de donn√©es saine apr√®s organisation")
        else:
            print(f"‚ö†Ô∏è Probl√®me d√©tect√© apr√®s organisation: {message_after}")
    else:
        print("\n‚ùå √âCHEC DE L'ORGANISATION ET NETTOYAGE")
    
    print("\nFin du script d'organisation et nettoyage.")