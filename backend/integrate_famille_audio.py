#!/usr/bin/env python3
"""
Script pour int√©grer les prononciations audio de la section famille
depuis le Google Drive partag√© dans la base de donn√©es.
"""

import os
import sys
import requests
from datetime import datetime
from dotenv import load_dotenv
from pymongo import MongoClient
import re

# Ajouter le chemin du backend au PYTHONPATH
sys.path.append('/app/backend')

# Charger les variables d'environnement
load_dotenv()

from database_protection import DatabaseProtector

def create_download_url(drive_url):
    """Convertit une URL Google Drive en URL de t√©l√©chargement direct."""
    # Extraire l'ID du fichier depuis l'URL Google Drive
    match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', drive_url)
    if match:
        file_id = match.group(1)
        return f"https://drive.google.com/uc?export=download&id={file_id}"
    return None

def integrate_famille_audio():
    """Int√®gre les fichiers audio de famille dans la base de donn√©es."""
    
    # Correspondances entre fichiers audio et mots fran√ßais
    audio_mappings = {
        "Anabavi.m4a": {"french": "s≈ìur", "pronunciation_lang": "kibouchi"},
        "Anadahi.m4a": {"french": "fr√®re", "pronunciation_lang": "kibouchi"},
        "Baba h√©li-b√©.m4a": {"french": "oncle paternel", "pronunciation_lang": "kibouchi"},
        "Baba k.m4a": {"french": "papa", "pronunciation_lang": "kibouchi", "note": "version courte"},
        "Baba s.m4a": {"french": "papa", "pronunciation_lang": "shimaore", "note": "version courte"},
        "Baba titi-bol√©.m4a": {"french": "oncle paternel", "pronunciation_lang": "shimaore"},
        "Bacoco.m4a": {"french": "grand-p√®re", "pronunciation_lang": "shimaore"},
        "Bweni.m4a": {"french": "madame", "pronunciation_lang": "shimaore"},
        "Coco.m4a": {"french": "grand-m√®re", "pronunciation_lang": "shimaore"},
        "Dadayi.m4a": {"french": "grand-p√®re", "pronunciation_lang": "kibouchi"},
        "Dadi.m4a": {"french": "grand-m√®re", "pronunciation_lang": "kibouchi"},
        "Havagna.m4a": {"french": "famille", "pronunciation_lang": "kibouchi"},
        "Lalahi.m4a": {"french": "homme", "pronunciation_lang": "kibouchi"},
        "Mama titi-bol√©.m4a": {"french": "tente", "pronunciation_lang": "shimaore"},
        "Mama.m4a": {"french": "maman", "pronunciation_lang": "both"},
        "Mdjamaza.m4a": {"french": "famille", "pronunciation_lang": "shimaore"},
        "Moina boueni.m4a": {"french": "petite s≈ìur", "pronunciation_lang": "shimaore", "note": "variante"},
        "Moina.m4a": {"french": "petit", "pronunciation_lang": "shimaore", "note": "adjectif"},
        "Moinagna mtroubaba.m4a": {"french": "petit fr√®re", "pronunciation_lang": "shimaore"},
        "Moinagna mtroumama.m4a": {"french": "petite s≈ìur", "pronunciation_lang": "shimaore"},
        "Mongn√©.m4a": {"french": "monsieur", "pronunciation_lang": "shimaore"},
        "Mtroubaba.m4a": {"french": "gar√ßon", "pronunciation_lang": "shimaore"},
        "Mtroumama.m4a": {"french": "fille", "pronunciation_lang": "shimaore"},
        "Mwanagna.m4a": {"french": "enfant", "pronunciation_lang": "shimaore", "note": "g√©n√©rique"},
        "Mwandzani.m4a": {"french": "ami", "pronunciation_lang": "both"},
        "Ninfndri h√©li-b√©.m4a": {"french": "tente", "pronunciation_lang": "kibouchi"},
        "Tseki lalahi.m4a": {"french": "grand fr√®re", "pronunciation_lang": "kibouchi", "note": "variante"},
        "Viavi.m4a": {"french": "femme", "pronunciation_lang": "kibouchi"},
        "Zama.m4a": {"french": "oncle maternel", "pronunciation_lang": "both"},
        "Zena.m4a": {"french": "√©pouse oncle maternel", "pronunciation_lang": "both"},
        "Zoki lalahi.m4a": {"french": "grand fr√®re", "pronunciation_lang": "kibouchi"},
        "Zoki viavi.m4a": {"french": "grande s≈ìur", "pronunciation_lang": "kibouchi"},
        "Zouki mtroubaba.m4a": {"french": "grand fr√®re", "pronunciation_lang": "shimaore"},
        "Zouki mtroumch√©.m4a": {"french": "grande s≈ìur", "pronunciation_lang": "shimaore"},
        "Zouki.m4a": {"french": "grand", "pronunciation_lang": "shimaore", "note": "adjectif"}
    }
    
    try:
        # Connexion √† MongoDB
        mongo_url = os.getenv('MONGO_URL', 'mongodb://localhost:27017/')
        client = MongoClient(mongo_url)
        db_name = os.getenv('DB_NAME', 'mayotte_app')
        db = client[db_name]
        collection = db.words
        
        # Initialiser la protection de base de donn√©es
        db_protection = DatabaseProtector()
        
        print(f"üîó Connexion √† MongoDB: {mongo_url}")
        print(f"üìä Base de donn√©es: {db_name}")
        print(f"üéµ Fichiers audio √† int√©grer: {len(audio_mappings)}")
        print()
        
        # Cr√©er une sauvegarde avant modification
        print("üíæ Cr√©ation d'une sauvegarde avant modification...")
        backup_path = db_protection.create_backup("before_integrate_famille_audio")
        if backup_path:
            print("‚úÖ Sauvegarde cr√©√©e avec succ√®s")
        else:
            print("‚ö†Ô∏è √âchec de la sauvegarde")
        print()
        
        # Cr√©er le r√©pertoire pour les fichiers audio
        audio_dir = "/app/frontend/assets/audio/famille"
        os.makedirs(audio_dir, exist_ok=True)
        print(f"üìÅ R√©pertoire audio cr√©√©: {audio_dir}")
        print()
        
        # Traiter chaque fichier audio
        mises_a_jour = 0
        fichiers_telecharges = 0
        
        for filename, mapping in audio_mappings.items():
            french_word = mapping["french"]
            pronunciation_lang = mapping["pronunciation_lang"]
            note = mapping.get("note", "")
            
            print(f"üéµ Traitement de {filename} pour '{french_word}'...")
            
            # Rechercher le mot dans la base de donn√©es
            existing_word = collection.find_one({
                "french": {"$regex": f"^{french_word}$", "$options": "i"},
                "category": "famille"
            })
            
            if existing_word:
                print(f"   ‚úÖ Mot trouv√©: {french_word}")
                
                # URL de t√©l√©chargement Google Drive
                # Pour l'instant, nous allons juste stocker les m√©tadonn√©es
                # Le t√©l√©chargement r√©el n√©cessiterait des URLs directes
                
                # Construire le chemin audio local
                audio_path = f"/assets/audio/famille/{filename}"
                
                # Mettre √† jour avec les informations audio
                update_data = {
                    "audio_url": audio_path,
                    "audio_filename": filename,
                    "audio_pronunciation_lang": pronunciation_lang,
                    "audio_note": note,
                    "audio_updated_at": datetime.now(),
                    "audio_source": "google_drive_famille",
                    "has_authentic_audio": True
                }
                
                result = collection.update_one(
                    {"_id": existing_word["_id"]},
                    {"$set": update_data}
                )
                
                if result.modified_count > 0:
                    mises_a_jour += 1
                    print(f"   ‚úÖ M√©tadonn√©es audio mises √† jour")
                    print(f"      Langue: {pronunciation_lang}")
                    if note:
                        print(f"      Note: {note}")
                else:
                    print(f"   ‚ö†Ô∏è Aucune modification effectu√©e")
                    
            else:
                print(f"   ‚ùå Mot '{french_word}' non trouv√© dans la cat√©gorie famille")
            
            print()
        
        # Statistiques finales
        print("=" * 60)
        print(f"üìà R√âSUM√â DE L'INT√âGRATION AUDIO")
        print(f"üéµ Fichiers audio trait√©s: {len(audio_mappings)}")
        print(f"üìù Mots mis √† jour: {mises_a_jour}")
        print(f"üìÅ Fichiers t√©l√©charg√©s: {fichiers_telecharges}")
        print()
        
        # Instructions pour finaliser l'int√©gration
        print("üìã PROCHAINES √âTAPES POUR FINALISER :")
        print("1. Les m√©tadonn√©es audio ont √©t√© ajout√©es √† la base de donn√©es")
        print("2. Pour t√©l√©charger les fichiers r√©els, vous devrez :")
        print("   - T√©l√©charger manuellement chaque fichier depuis Google Drive")
        print(f"   - Les placer dans le r√©pertoire: {audio_dir}")
        print("   - Ou utiliser l'API Google Drive avec authentification")
        print()
        
        print("‚úÖ Int√©gration des m√©tadonn√©es audio termin√©e avec succ√®s!")
        
        # Fermer la connexion
        client.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'int√©gration: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def list_famille_words_with_audio():
    """Liste tous les mots de famille avec leurs informations audio."""
    try:
        mongo_url = os.getenv('MONGO_URL', 'mongodb://localhost:27017/')
        client = MongoClient(mongo_url)
        db_name = os.getenv('DB_NAME', 'mayotte_app')
        db = client[db_name]
        collection = db.words
        
        print("üìã MOTS DE FAMILLE AVEC AUDIO INT√âGR√â :")
        print("=" * 60)
        
        famille_words = collection.find({"category": "famille", "has_authentic_audio": True})
        
        for word in famille_words:
            french = word.get('french', 'N/A')
            audio_filename = word.get('audio_filename', 'N/A')
            audio_lang = word.get('audio_pronunciation_lang', 'N/A')
            audio_note = word.get('audio_note', '')
            
            print(f"üéµ {french}:")
            print(f"   Fichier: {audio_filename}")
            print(f"   Langue: {audio_lang}")
            if audio_note:
                print(f"   Note: {audio_note}")
            print()
        
        client.close()
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")

if __name__ == "__main__":
    print("üöÄ D√©but de l'int√©gration des prononciations famille...")
    print("üéµ Source: Google Drive - Famille")
    print()
    
    success = integrate_famille_audio()
    
    if success:
        print("üéâ Int√©gration termin√©e avec succ√®s!")
        print()
        list_famille_words_with_audio()
    else:
        print("üí• √âchec de l'int√©gration")
        sys.exit(1)