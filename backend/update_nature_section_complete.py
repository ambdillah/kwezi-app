#!/usr/bin/env python3
"""
Script pour mettre √† jour la section "nature" dans la base de donn√©es
avec les nouvelles donn√©es du vocabulaire de la nature en shimaor√© et kibouchi.
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import logging

# Charger les variables d'environnement
load_dotenv()

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Nouvelles donn√©es nature avec orthographe corrig√©e
NATURE_DATA_CORRECTED = [
    {"french": "pente", "shimaor√©": "mlima", "kibouchi": "boungou"},
    {"french": "colline", "shimaor√©": "mlima", "kibouchi": "boungou"},
    {"french": "mont", "shimaor√©": "mlima", "kibouchi": "boungou"},
    {"french": "lune", "shimaor√©": "mw√©zi", "kibouchi": "fandzava"},
    {"french": "√©toile", "shimaor√©": "gnora", "kibouchi": "lakintagna"},
    {"french": "sable", "shimaor√©": "mtsanga", "kibouchi": "fasigni"},
    {"french": "vague", "shimaor√©": "dhouja", "kibouchi": "houndza"},
    {"french": "vent", "shimaor√©": "p√©vo", "kibouchi": "tsikou"},
    {"french": "pluie", "shimaor√©": "vhoua", "kibouchi": "mahal√©ni"},
    {"french": "mangrove", "shimaor√©": "mhonko", "kibouchi": "honkou"},
    {"french": "corail", "shimaor√©": "soiyi", "kibouchi": "soiyi"},
    {"french": "barri√®re de corail", "shimaor√©": "cal√©ni", "kibouchi": "cal√©ni"},
    {"french": "temp√™te", "shimaor√©": "darouba", "kibouchi": "tsikou"},
    {"french": "rivi√®re", "shimaor√©": "mouro", "kibouchi": "mouroni"},
    {"french": "pont", "shimaor√©": "daradja", "kibouchi": "daradja"},
    {"french": "nuage", "shimaor√©": "wingou", "kibouchi": "vingou"},
    {"french": "arc-en-ciel", "shimaor√©": "mcacamba", "kibouchi": "vingou"},
    {"french": "campagne", "shimaor√©": "malavouni", "kibouchi": "atihala"},
    {"french": "for√™t", "shimaor√©": "malavouni", "kibouchi": "atihala"},
    {"french": "caillou", "shimaor√©": "bw√©", "kibouchi": "vatou"},
    {"french": "pierre", "shimaor√©": "bw√©", "kibouchi": "vatou"},
    {"french": "rocher", "shimaor√©": "bw√©", "kibouchi": "vatou"},
    {"french": "plateau", "shimaor√©": "bandra", "kibouchi": "k√®traka"},
    {"french": "chemin", "shimaor√©": "ndzia", "kibouchi": "lalagna"},
    {"french": "sentier", "shimaor√©": "ndzia", "kibouchi": "lalagna"},
    {"french": "parcours", "shimaor√©": "ndzia", "kibouchi": "lalagna"},
    {"french": "herbe", "shimaor√©": "malavou", "kibouchi": "haitri"},
    {"french": "fleur", "shimaor√©": "foulera", "kibouchi": "foul√®ra"},
    {"french": "soleil", "shimaor√©": "jouwa", "kibouchi": "zouva"},
    {"french": "mer", "shimaor√©": "bahari", "kibouchi": "bahari"},
    {"french": "plage", "shimaor√©": "mtsangani", "kibouchi": "fassigni"},
    {"french": "arbre", "shimaor√©": "mwiri", "kibouchi": "kakazou"},
    {"french": "rue", "shimaor√©": "par√©", "kibouchi": "par√©"},
    {"french": "route", "shimaor√©": "par√©", "kibouchi": "par√©"},
    {"french": "bananier", "shimaor√©": "trindri", "kibouchi": "voudi ni hountsi"},
    {"french": "feuille", "shimaor√©": "mawoini", "kibouchi": "hayitri"},
    {"french": "branche", "shimaor√©": "trahi", "kibouchi": "trahi"},
    {"french": "tornade", "shimaor√©": "ouzimouyi", "kibouchi": "tsikou soulaimana"},
    {"french": "cocotier", "shimaor√©": "m'nadzi", "kibouchi": "voudi ni vwaniou"},
    {"french": "arbre √† pain", "shimaor√©": "m'framp√©", "kibouchi": "voudi ni framp√©"},
    {"french": "baobab", "shimaor√©": "m'bouyou", "kibouchi": "voudi ni bouyou"},
    {"french": "bambou", "shimaor√©": "m'bambo", "kibouchi": "valiha"},
    {"french": "manguier", "shimaor√©": "m'manga", "kibouchi": "voudi ni manga"},
    {"french": "jacquier", "shimaor√©": "m'f√©n√©ssi", "kibouchi": "voudi ni fin√©ssi"},
    {"french": "terre", "shimaor√©": "trotrotro", "kibouchi": "fotaka"},
    {"french": "sol", "shimaor√©": "tsi", "kibouchi": "tani"},
    {"french": "√©rosion", "shimaor√©": "padza", "kibouchi": "padza"},
    {"french": "mar√©e basse", "shimaor√©": "maji yavo", "kibouchi": "ranou m√®ki"},
    {"french": "platier", "shimaor√©": "kal√©", "kibouchi": "kal√©ni"},
    {"french": "mar√©e haute", "shimaor√©": "maji yamal√©", "kibouchi": "ranou f√©nou"},
    {"french": "inond√©", "shimaor√©": "ourora", "kibouchi": "dobou"},
    {"french": "sauvage", "shimaor√©": "ny√©ha", "kibouchi": "di"},
    {"french": "canne √† sucre", "shimaor√©": "mouwoi", "kibouchi": "fari"},
    {"french": "fagot", "shimaor√©": "kouni", "kibouchi": "azoumati"},
    {"french": "pirogue", "shimaor√©": "laka", "kibouchi": "lakana"},
    {"french": "vedette", "shimaor√©": "kwassa kwassa", "kibouchi": "vid√©ti"},
    {"french": "√©cole", "shimaor√©": "licoli", "kibouchi": "licoli"},
    {"french": "√©cole coranique", "shimaor√©": "shioni", "kibouchi": "kioni"}
]

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        if not mongo_url:
            raise ValueError("MONGO_URL non trouv√©e dans les variables d'environnement")
        
        client = MongoClient(mongo_url)
        db = client['shimaor√©_app']
        logger.info("Connexion √† la base de donn√©es r√©ussie")
        return db
    except Exception as e:
        logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
        raise

def get_nature_emoji(french_name):
    """Retourne un emoji appropri√© pour l'√©l√©ment de nature donn√©"""
    emoji_map = {
        "pente": "‚õ∞Ô∏è", "colline": "‚õ∞Ô∏è", "mont": "üèîÔ∏è", "lune": "üåô", "√©toile": "‚≠ê",
        "sable": "üèñÔ∏è", "vague": "üåä", "vent": "üí®", "pluie": "üåßÔ∏è", "mangrove": "üåø",
        "corail": "ü™∏", "barri√®re de corail": "ü™∏", "temp√™te": "‚õàÔ∏è", "rivi√®re": "üèûÔ∏è",
        "pont": "üåâ", "nuage": "‚òÅÔ∏è", "arc-en-ciel": "üåà", "campagne": "üåæ", "for√™t": "üå≤",
        "caillou": "ü™®", "pierre": "ü™®", "rocher": "ü™®", "plateau": "üèîÔ∏è",
        "chemin": "üõ§Ô∏è", "sentier": "üõ§Ô∏è", "parcours": "üõ§Ô∏è", "herbe": "üåø", "fleur": "üå∏",
        "soleil": "‚òÄÔ∏è", "mer": "üåä", "plage": "üèñÔ∏è", "arbre": "üå≥", "rue": "üõ£Ô∏è", "route": "üõ£Ô∏è",
        "bananier": "üå¥", "feuille": "üçÉ", "branche": "üåø", "tornade": "üå™Ô∏è",
        "cocotier": "ü••", "arbre √† pain": "üå≥", "baobab": "üå≥", "bambou": "üéã",
        "manguier": "üå≥", "jacquier": "üå≥", "terre": "üåç", "sol": "üå±",
        "√©rosion": "üèîÔ∏è", "mar√©e basse": "üåä", "platier": "ü™®", "mar√©e haute": "üåä",
        "inond√©": "üåä", "sauvage": "üåø", "canne √† sucre": "üåæ", "fagot": "ü™µ",
        "pirogue": "üõ∂", "vedette": "üö§", "√©cole": "üè´", "√©cole coranique": "üè´"
    }
    
    return emoji_map.get(french_name.lower(), "üåø")

def compare_and_update_nature(db):
    """Compare et met √† jour l'orthographe des mots de nature"""
    collection = db['vocabulary']
    
    # R√©cup√©rer les mots actuels de la section nature
    current_words = list(collection.find({"section": "nature"}))
    logger.info(f"Mots actuels dans la section nature: {len(current_words)}")
    
    corrections_count = 0
    additions_count = 0
    
    # Cr√©er un dictionnaire pour faciliter les comparaisons
    current_dict = {word.get('french', '').lower(): word for word in current_words}
    
    logger.info("\n=== ANALYSE DES CORRECTIONS ORTHOGRAPHIQUES ===")
    
    for corrected_word in NATURE_DATA_CORRECTED:
        french_key = corrected_word['french'].lower()
        
        if french_key in current_dict:
            # Le mot existe, v√©rifier s'il y a des corrections
            current_word = current_dict[french_key]
            current_shimaore = current_word.get('shimaor√©', '')
            current_kibouchi = current_word.get('kibouchi', '')
            
            corrected_shimaore = corrected_word['shimaor√©']
            corrected_kibouchi = corrected_word['kibouchi']
            
            needs_update = False
            changes = []
            
            if current_shimaore != corrected_shimaore:
                changes.append(f"shimaor√©: '{current_shimaore}' ‚Üí '{corrected_shimaore}'")
                needs_update = True
                
            if current_kibouchi != corrected_kibouchi:
                changes.append(f"kibouchi: '{current_kibouchi}' ‚Üí '{corrected_kibouchi}'")
                needs_update = True
            
            if needs_update:
                logger.info(f"üìù CORRECTION - {corrected_word['french']}: {' | '.join(changes)}")
                
                # Mettre √† jour le document
                emoji = get_nature_emoji(corrected_word['french'])
                result = collection.update_one(
                    {"_id": current_word['_id']},
                    {
                        "$set": {
                            "shimaor√©": corrected_shimaore,
                            "kibouchi": corrected_kibouchi,
                            "emoji": emoji,
                            "orthography_updated": True
                        }
                    }
                )
                
                if result.modified_count > 0:
                    corrections_count += 1
            else:
                logger.info(f"‚úÖ OK - {corrected_word['french']}: Orthographe correcte")
        else:
            # Nouveau mot √† ajouter
            logger.info(f"‚ûï NOUVEAU - {corrected_word['french']}: Ajout √† la base de donn√©es")
            
            emoji = get_nature_emoji(corrected_word['french'])
            
            # Cr√©er le nom de fichier audio de mani√®re s√©par√©e
            audio_base_name = corrected_word['french'].lower().replace(' ', '_').replace("'", '_').replace('-', '_').replace('√†', 'a').replace('√©', 'e').replace('√®', 'e')
            
            new_document = {
                "section": "nature",
                "french": corrected_word['french'],
                "shimaor√©": corrected_word['shimaor√©'],
                "kibouchi": corrected_word['kibouchi'],
                "emoji": emoji,
                "audio_shimaor√©": f"audio/{audio_base_name}_shimaor√©.mp3",
                "audio_kibouchi": f"audio/{audio_base_name}_kibouchi.mp3"
            }
            
            result = collection.insert_one(new_document)
            if result.inserted_id:
                additions_count += 1
    
    logger.info(f"\n=== R√âSUM√â DES MODIFICATIONS ===")
    logger.info(f"Corrections orthographiques appliqu√©es: {corrections_count}")
    logger.info(f"Nouveaux mots ajout√©s: {additions_count}")
    logger.info(f"Total des modifications: {corrections_count + additions_count}")
    
    return corrections_count, additions_count

def main():
    """Fonction principale"""
    logger.info("D√©but de la mise √† jour de la section nature")
    
    try:
        # Connexion √† la base de donn√©es
        db = connect_to_database()
        
        # Comparer et mettre √† jour
        corrections, additions = compare_and_update_nature(db)
        
        if corrections > 0 or additions > 0:
            logger.info(f"üéâ Mise √† jour de la section nature termin√©e avec succ√®s!")
            logger.info(f"   - {corrections} corrections appliqu√©es")
            logger.info(f"   - {additions} nouveaux mots ajout√©s")
        else:
            logger.info("‚ÑπÔ∏è Aucune correction n√©cessaire - l'orthographe √©tait d√©j√† correcte")
            
    except Exception as e:
        logger.error(f"Erreur dans le script principal: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())