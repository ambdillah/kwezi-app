#!/usr/bin/env python3
"""
Script pour corriger pr√©cis√©ment les correspondances audio des verbes sp√©cifiques
mentionn√©s par l'utilisateur : voir, danser, dormir, casser.
"""

import os
from dotenv import load_dotenv
from pymongo import MongoClient
import logging

# Charger les variables d'environnement
load_dotenv()

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Correspondances EXACTES demand√©es par l'utilisateur
EXACT_VERB_MAPPINGS = {
    "voir": {
        "shimaor√©": "ouona",
        "kibouchi": "mahita", 
        "audio_file": "Magnamiya.m4a",  # L'utilisateur veut cette correspondance
        "note": "Audio bas√© sur kibouchi mais utilisateur demande Magnamiya"
    },
    "danser": {
        "shimaor√©": "ouzina",
        "kibouchi": "chokou",  # L'utilisateur veut cette traduction
        "audio_file": "Chokou.m4a",
        "note": "Corriger kibouchi de 'mitsindzaka' vers 'chokou'"
    },
    "dormir": {
        "shimaor√©": "oulala",
        "kibouchi": "koimini",  # L'utilisateur veut cette correspondance
        "audio_file": "Koimini.m4a",
        "note": "Ajouter correspondance audio Koimini"
    },
    "casser": {
        "shimaor√©": "latsaka",
        "kibouchi": "latsaka",
        "audio_file": "Latsaka.m4a",
        "note": "S'assurer que le verbe existe et a la bonne audio"
    }
}

def connect_to_database():
    """Connexion √† la base de donn√©es MongoDB"""
    try:
        mongo_url = os.getenv('MONGO_URL')
        if not mongo_url:
            raise ValueError("MONGO_URL non trouv√©e dans les variables d'environnement")
        
        client = MongoClient(mongo_url)
        db = client['shimaor√©_app']
        logger.info("Connexion √† la base de donn√©es r√©ussie")
        return db
    except Exception as e:
        logger.error(f"Erreur de connexion √† la base de donn√©es: {e}")
        raise

def fix_specific_verbs(db):
    """Corrige les verbes sp√©cifiques selon les exigences de l'utilisateur"""
    collection = db['vocabulary']
    
    logger.info("=== CORRECTION DES VERBES SP√âCIFIQUES ===")
    
    fixed_count = 0
    
    for french_verb, correct_data in EXACT_VERB_MAPPINGS.items():
        logger.info(f"\n--- Traitement de '{french_verb}' ---")
        
        # Chercher le verbe dans la base
        verb_doc = collection.find_one({
            "section": "verbes",
            "french": french_verb
        })
        
        if verb_doc:
            # Le verbe existe, le mettre √† jour
            logger.info(f"Verbe '{french_verb}' trouv√© - Mise √† jour")
            
            # Construire les nouvelles donn√©es
            update_data = {
                "shimaor√©": correct_data["shimaor√©"],
                "kibouchi": correct_data["kibouchi"],
                "audio_authentic": f"audio/verbes/{correct_data['audio_file']}",
                "has_authentic_audio": True,
                "audio_updated": True,
                "audio_format": "m4a",
                "user_corrected": True,
                "correction_note": correct_data["note"]
            }
            
            # Appliquer la mise √† jour
            result = collection.update_one(
                {"_id": verb_doc["_id"]},
                {"$set": update_data}
            )
            
            if result.modified_count > 0:
                logger.info(f"‚úÖ {french_verb}: Shimaor√© '{correct_data['shimaor√©']}', Kibouchi '{correct_data['kibouchi']}' ‚Üí {correct_data['audio_file']}")
                fixed_count += 1
            else:
                logger.warning(f"‚ùå √âchec mise √† jour: {french_verb}")
                
        else:
            # Le verbe n'existe pas, le cr√©er
            logger.info(f"Verbe '{french_verb}' non trouv√© - Cr√©ation")
            
            new_verb = {
                "section": "verbes",
                "french": french_verb,
                "shimaor√©": correct_data["shimaor√©"],
                "kibouchi": correct_data["kibouchi"],
                "emoji": "üîÑ",
                "audio_authentic": f"audio/verbes/{correct_data['audio_file']}",
                "has_authentic_audio": True,
                "audio_updated": True,
                "audio_format": "m4a",
                "user_corrected": True,
                "correction_note": correct_data["note"],
                "pdf_reference": True
            }
            
            result = collection.insert_one(new_verb)
            
            if result.inserted_id:
                logger.info(f"‚úÖ {french_verb}: Cr√©√© avec Shimaor√© '{correct_data['shimaor√©']}', Kibouchi '{correct_data['kibouchi']}' ‚Üí {correct_data['audio_file']}")
                fixed_count += 1
            else:
                logger.warning(f"‚ùå √âchec cr√©ation: {french_verb}")
    
    return fixed_count

def verify_audio_files():
    """V√©rifie que les fichiers audio existent"""
    audio_dir = "/app/frontend/assets/audio/verbes"
    
    logger.info("\n=== V√âRIFICATION FICHIERS AUDIO ===")
    
    for french_verb, data in EXACT_VERB_MAPPINGS.items():
        audio_file = data["audio_file"]
        full_path = os.path.join(audio_dir, audio_file)
        
        if os.path.exists(full_path):
            size = os.path.getsize(full_path)
            logger.info(f"‚úÖ {french_verb}: {audio_file} trouv√© ({size} bytes)")
        else:
            logger.warning(f"‚ùå {french_verb}: {audio_file} MANQUANT dans {audio_dir}")

def test_corrected_verbs(db):
    """Teste que les corrections ont √©t√© appliqu√©es"""
    collection = db['vocabulary']
    
    logger.info("\n=== TEST DES CORRECTIONS APPLIQU√âES ===")
    
    success_count = 0
    
    for french_verb, expected_data in EXACT_VERB_MAPPINGS.items():
        verb_doc = collection.find_one({
            "section": "verbes",
            "french": french_verb
        })
        
        if verb_doc:
            shimaore_ok = verb_doc.get("shimaor√©") == expected_data["shimaor√©"]
            kibouchi_ok = verb_doc.get("kibouchi") == expected_data["kibouchi"]
            audio_ok = verb_doc.get("audio_authentic") == f"audio/verbes/{expected_data['audio_file']}"
            has_audio_ok = verb_doc.get("has_authentic_audio") == True
            
            if shimaore_ok and kibouchi_ok and audio_ok and has_audio_ok:
                logger.info(f"‚úÖ {french_verb}: PARFAIT - Toutes les correspondances correctes")
                success_count += 1
            else:
                logger.warning(f"‚ùå {french_verb}: PROBL√àME - V√©rifications √©chou√©es:")
                if not shimaore_ok:
                    logger.warning(f"    Shimaor√©: attendu '{expected_data['shimaor√©']}', trouv√© '{verb_doc.get('shimaor√©')}'")
                if not kibouchi_ok:
                    logger.warning(f"    Kibouchi: attendu '{expected_data['kibouchi']}', trouv√© '{verb_doc.get('kibouchi')}'")
                if not audio_ok:
                    logger.warning(f"    Audio: attendu 'audio/verbes/{expected_data['audio_file']}', trouv√© '{verb_doc.get('audio_authentic')}'")
                if not has_audio_ok:
                    logger.warning(f"    Has_audio: attendu True, trouv√© {verb_doc.get('has_authentic_audio')}")
        else:
            logger.warning(f"‚ùå {french_verb}: Verbe non trouv√© apr√®s correction!")
    
    return success_count

def main():
    """Fonction principale"""
    logger.info("D√©but des corrections sp√©cifiques des verbes audio")
    
    try:
        # V√©rifier les fichiers audio
        verify_audio_files()
        
        # Connexion √† la base de donn√©es
        db = connect_to_database()
        
        # Appliquer les corrections
        fixed_count = fix_specific_verbs(db)
        
        # Tester les corrections
        success_count = test_corrected_verbs(db)
        
        # R√©sum√© final
        logger.info(f"\n{'='*60}")
        logger.info("R√âSUM√â CORRECTIONS SP√âCIFIQUES")
        logger.info(f"{'='*60}")
        logger.info(f"Verbes trait√©s: {len(EXACT_VERB_MAPPINGS)}")
        logger.info(f"Corrections appliqu√©es: {fixed_count}")
        logger.info(f"V√©rifications r√©ussies: {success_count}")
        
        for french_verb, data in EXACT_VERB_MAPPINGS.items():
            logger.info(f"  - {french_verb}: shimaor√© '{data['shimaor√©']}' | kibouchi '{data['kibouchi']}' ‚Üí {data['audio_file']}")
        
        if success_count == len(EXACT_VERB_MAPPINGS):
            logger.info("üéâ TOUTES les correspondances sp√©cifiques sont maintenant PARFAITES!")
            logger.info("Plus de frustration - chaque verbe a sa bonne prononciation!")
        else:
            logger.warning(f"‚ö†Ô∏è {len(EXACT_VERB_MAPPINGS) - success_count} verbes n√©cessitent encore des corrections")
            
    except Exception as e:
        logger.error(f"Erreur dans le script principal: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())