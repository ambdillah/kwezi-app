#!/usr/bin/env python3
"""
Script d'analyse des pr√©fixes de verbes dans toutes les phrases
Identifie tous les pr√©fixes uniques utilis√©s pour am√©liorer la coloration
"""

from pymongo import MongoClient
from collections import defaultdict
import re

def main():
    print("=" * 80)
    print("ANALYSE COMPL√àTE DES PR√âFIXES DE VERBES")
    print("=" * 80)
    print()
    
    # Connexion √† MongoDB
    client = MongoClient("mongodb://localhost:27017")
    db = client["mayotte_app"]
    
    # Pr√©fixes actuellement reconnus
    KNOWN_SHIMAORE_PREFIXES = {
        'present': {'nis', 'ous', 'as', 'ris', 'mous', 'was'},
        'past': {'naco', 'waco', 'aco', 'raco', 'mwaco'},
        'future': {'nitso', 'outso', 'atso', 'ritso', 'moutso', 'watso'}
    }
    
    KNOWN_KIBOUCHI_PREFIXES = {
        'present': {'za', 'ana', 'izi', 'z√©heyi', 'anar√©ou', 'r√©ou'},
        'past': {'ni'},
        'future': {'bou'}
    }
    
    # Mots √† ignorer (pronoms, articles, conjonctions)
    IGNORE_WORDS_SHIM = {
        'wami', 'wawe', 'waye', 'wasi', 'wagnou', 'wawo',
        'na', 'ya', 'la', 'de', 'le', 'un', 'une', 'et'
    }
    
    IGNORE_WORDS_KIB = {
        'zahou', 'anaou', 'izi', 'atsika', 'anarou', 'rou',
        'za', 'ana', 'na', 'ya'
    }
    
    # R√©cup√©rer toutes les phrases
    sentences = list(db.sentences.find({}, {
        'french': 1,
        'shimaore': 1,
        'kibouchi': 1,
        'shimaore_words': 1,
        'kibouchi_words': 1,
        'tense': 1
    }))
    
    print(f"Total de phrases √† analyser: {len(sentences)}")
    print()
    
    # Collecter les verbes par temps
    shimaore_verbs_by_tense = defaultdict(set)
    kibouchi_verbs_by_tense = defaultdict(set)
    
    for sent in sentences:
        tense = sent.get('tense', 'unknown')
        
        # Analyser shimaor√©
        shim_words = sent.get('shimaore_words', [])
        for word in shim_words:
            word_lower = word.lower().strip()
            
            # Ignorer les mots connus
            if word_lower in IGNORE_WORDS_SHIM:
                continue
            
            # Ignorer les mots tr√®s courts
            if len(word_lower) < 3:
                continue
            
            # V√©rifier si ce n'est pas d√©j√† reconnu
            is_known = False
            for known_prefixes in KNOWN_SHIMAORE_PREFIXES.values():
                for prefix in known_prefixes:
                    if word_lower.startswith(prefix):
                        is_known = True
                        break
                if is_known:
                    break
            
            if not is_known:
                shimaore_verbs_by_tense[tense].add(word)
        
        # Analyser kibouchi
        kib_words = sent.get('kibouchi_words', [])
        for word in kib_words:
            word_lower = word.lower().strip()
            
            # Ignorer les mots connus
            if word_lower in IGNORE_WORDS_KIB:
                continue
            
            # Ignorer les mots tr√®s courts
            if len(word_lower) < 3:
                continue
            
            # V√©rifier si ce n'est pas d√©j√† reconnu
            is_known = False
            for known_prefixes in KNOWN_KIBOUCHI_PREFIXES.values():
                for prefix in known_prefixes:
                    if word_lower.startswith(prefix):
                        is_known = True
                        break
                if is_known:
                    break
            
            if not is_known:
                kibouchi_verbs_by_tense[tense].add(word)
    
    # Afficher les r√©sultats
    print("üîç MOTS SHIMAOR√â NON RECONNUS PAR TEMPS")
    print("-" * 80)
    for tense in ['present', 'past', 'future']:
        words = shimaore_verbs_by_tense.get(tense, set())
        print(f"\n{tense.upper()} ({len(words)} mots):")
        for word in sorted(words)[:20]:  # Afficher les 20 premiers
            print(f"  ‚Ä¢ {word}")
    
    print()
    print("=" * 80)
    print("üîç MOTS KIBOUCHI NON RECONNUS PAR TEMPS")
    print("-" * 80)
    for tense in ['present', 'past', 'future']:
        words = kibouchi_verbs_by_tense.get(tense, set())
        print(f"\n{tense.upper()} ({len(words)} mots):")
        for word in sorted(words)[:20]:  # Afficher les 20 premiers
            print(f"  ‚Ä¢ {word}")
    
    print()
    print("=" * 80)
    print("üìä ANALYSE DES PR√âFIXES POTENTIELS")
    print("=" * 80)
    print()
    
    # Essayer de d√©tecter les pr√©fixes communs
    def extract_common_prefixes(words_set, max_prefix_length=5):
        """Extrait les pr√©fixes communs d'un ensemble de mots"""
        prefix_counts = defaultdict(int)
        
        for word in words_set:
            word_lower = word.lower()
            for length in range(2, min(max_prefix_length + 1, len(word_lower))):
                prefix = word_lower[:length]
                prefix_counts[prefix] += 1
        
        # Garder seulement les pr√©fixes qui apparaissent plusieurs fois
        common_prefixes = {prefix: count for prefix, count in prefix_counts.items() if count >= 3}
        return dict(sorted(common_prefixes.items(), key=lambda x: x[1], reverse=True))
    
    print("SHIMAOR√â - Pr√©fixes potentiels par temps:")
    for tense in ['present', 'past', 'future']:
        words = shimaore_verbs_by_tense.get(tense, set())
        if words:
            prefixes = extract_common_prefixes(words)
            print(f"\n  {tense}:")
            for prefix, count in list(prefixes.items())[:10]:
                print(f"    '{prefix}' appara√Æt {count} fois")
    
    print()
    print("KIBOUCHI - Pr√©fixes potentiels par temps:")
    for tense in ['present', 'past', 'future']:
        words = kibouchi_verbs_by_tense.get(tense, set())
        if words:
            prefixes = extract_common_prefixes(words)
            print(f"\n  {tense}:")
            for prefix, count in list(prefixes.items())[:10]:
                print(f"    '{prefix}' appara√Æt {count} fois")
    
    print()
    print("=" * 80)
    print("‚úÖ ANALYSE TERMIN√âE")
    print("=" * 80)

if __name__ == "__main__":
    main()
