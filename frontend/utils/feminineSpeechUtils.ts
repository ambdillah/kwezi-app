/**
 * SYST√àME DE PRONONCIATION F√âMININE RESTAUR√â
 * ==========================================
 * Configuration pour utiliser une voix f√©minine douce et appropri√©e
 * pour l'apprentissage des langues shimaor√© et kibouchi
 */

import * as Speech from 'expo-speech';
import { Alert, Platform } from 'react-native';
import { applyPhoneticCorrections } from './phoneticCorrections';

export type SupportedLanguage = 'fr' | 'shimaore' | 'kibouchi';
export type VoiceType = 'feminine' | 'child-friendly';
export type VoiceCharisma = 'standard' | 'gentle' | 'calm' | 'warm';

interface VoiceConfig {
  lang: string;
  pitch: number;
  rate: number;
  volume: number;
  quality?: string;
}

/**
 * Configurations de voix f√©minine optimis√©es
 */
const getFeminineVoiceConfig = (
  language: SupportedLanguage, 
  voiceType: VoiceType = 'feminine',
  charisma: VoiceCharisma = 'gentle'
): VoiceConfig => {
  
  const baseConfigs = {
    'fr': {
      lang: 'fr-FR',
      baseVoices: Platform.select({
        ios: ['Amelie', 'Audrey', 'Marie'], // Voix f√©minines iOS
        android: ['fr-fr-x-fra-network', 'fr-fr-x-frd-network'],
        default: 'fr-FR'
      })
    },
    'shimaore': {
      // Utiliser le fran√ßais pour √©viter les voix Swahili avec contenu pr√©-enregistr√©
      lang: 'fr-FR'
    },
    'kibouchi': {
      // Utiliser le fran√ßais pour une lecture phon√©tique correcte
      lang: 'fr-FR'
    }
  };

  // Configurations de base selon le type de voix (F√âMININE)
  let baseConfig: VoiceConfig;
  
  switch (voiceType) {
    case 'feminine':
      baseConfig = {
        lang: baseConfigs[language].lang,
        pitch: language === 'fr' ? 1.1 : 1.4, // Pitch TR√àS √©lev√© pour Shimaor√©/Kibouchi (voix clairement f√©minine)
        rate: 0.75, // Rythme confortable
        volume: 1.0
      };
      break;
      
    case 'child-friendly':
      baseConfig = {
        lang: baseConfigs[language].lang,
        pitch: 1.3, // Voix joyeuse pour enfants
        rate: 0.65, // Plus lent pour enfants
        volume: 1.0
      };
      break;
  }

  // Ajustements selon le charisme (orient√© f√©minin)
  switch (charisma) {
    case 'gentle':
      return {
        ...baseConfig,
        pitch: baseConfig.pitch + 0.05,
        rate: baseConfig.rate - 0.05,
        volume: 0.95
      };
      
    case 'calm':
      return {
        ...baseConfig,
        pitch: baseConfig.pitch,
        rate: baseConfig.rate - 0.1,
        volume: 0.9
      };
      
    case 'warm':
      return {
        ...baseConfig,
        pitch: baseConfig.pitch + 0.1,
        rate: baseConfig.rate,
        volume: 1.0
      };
      
    case 'standard':
    default:
      return baseConfig;
  }
};

/**
 * S√©lectionne la meilleure voix f√©minine disponible
 */
export const selectBestFeminineVoice = async (language: SupportedLanguage): Promise<string | undefined> => {
  try {
    const voices = await Speech.getAvailableVoicesAsync();
    
    // Configuration par langue
    const languageConfig = {
      'fr': {
        codes: ['fr', 'fr-FR'],
        preferredNames: ['Amelie', 'amelie', 'Audrey', 'audrey', 'Marie', 'marie', 'Virginie', 'virginie', 'Celine', 'celine']
      },
      'shimaore': {
        // Utiliser la voix fran√ßaise pour √©viter le contenu pr√©-enregistr√© Swahili
        codes: ['fr', 'fr-FR'],
        preferredNames: ['Amelie', 'amelie', 'Audrey', 'audrey', 'Marie', 'marie', 'Virginie', 'virginie', 'Celine', 'celine']
      },
      'kibouchi': {
        // Utiliser la voix fran√ßaise pour une lecture phon√©tique correcte
        codes: ['fr', 'fr-FR'],
        preferredNames: ['Amelie', 'amelie', 'Audrey', 'audrey', 'Marie', 'marie', 'Virginie', 'virginie', 'Celine', 'celine']
      }
    };
    
    const config = languageConfig[language];
    
    // Filtrer les voix selon la langue
    const languageVoices = voices.filter(voice => 
      config.codes.some(code => voice.language.startsWith(code))
    );
    
    // Chercher les voix f√©minines pr√©f√©r√©es
    for (const preferred of config.preferredNames) {
      const voice = languageVoices.find(v => 
        v.name.toLowerCase().includes(preferred.toLowerCase())
      );
      if (voice) {
        console.log(`üë© Voix f√©minine s√©lectionn√©e (${language}): ${voice.name}`);
        return voice.identifier || voice.name;
      }
    }
    
    // Fallback: chercher toute voix f√©minine
    const feminineVoice = languageVoices.find(v => 
      v.gender === 'female' || 
      v.name.toLowerCase().includes('female') ||
      v.name.toLowerCase().includes('woman') ||
      !v.name.toLowerCase().includes('male')  // √âviter les voix explicitement masculines
    );
    
    if (feminineVoice) {
      console.log(`üë© Voix f√©minine fallback (${language}): ${feminineVoice.name}`);
      return feminineVoice.identifier || feminineVoice.name;
    }
    
    // Dernier fallback: premi√®re voix disponible avec pitch √©lev√©
    if (languageVoices.length > 0) {
      console.log(`üë© Voix g√©n√©rique avec pitch f√©minin (${language}): ${languageVoices[0].name}`);
      return languageVoices[0].identifier || languageVoices[0].name;
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è Erreur lors de la s√©lection de voix f√©minine:', error);
  }
  
  return undefined;
};

/**
 * Prononce un texte avec voix f√©minine douce
 */
export const speakWithFeminineVoice = async (
  text: string, 
  language: SupportedLanguage = 'fr',
  voiceType: VoiceType = 'feminine',
  charisma: VoiceCharisma = 'gentle',
  onStart?: () => void,
  onDone?: () => void
): Promise<void> => {
  try {
    const config = getFeminineVoiceConfig(language, voiceType, charisma);
    
    // Appliquer les corrections phon√©tiques pour Shimaor√© et Kibouchi
    let correctedText = text;
    if (language === 'shimaore' || language === 'kibouchi') {
      correctedText = applyPhoneticCorrections(text, language);
      console.log(`üéØ Correction phon√©tique ${language}: "${text}" ‚Üí "${correctedText}"`);
    }
    
    // Arr√™ter toute synth√®se en cours
    const isCurrentlySpeaking = await Speech.isSpeakingAsync();
    if (isCurrentlySpeaking) {
      await Speech.stop();
    }
    
    // S√©lectionner la meilleure voix f√©minine si disponible
    const selectedVoice = await selectBestFeminineVoice(language);
    
    const speechOptions: Speech.SpeechOptions = {
      language: config.lang,
      pitch: config.pitch,
      rate: config.rate,
      volume: config.volume,
      voice: selectedVoice, // Utiliser la voix f√©minine s√©lectionn√©e
      onStart: () => {
        console.log(`üë© Prononciation f√©minine ${charisma}: "${correctedText}" (${language})`);
        onStart?.();
      },
      onDone: () => {
        console.log(`‚úÖ Prononciation f√©minine termin√©e`);
        onDone?.();
      },
      onError: (error) => {
        console.log(`‚ùå Erreur de prononciation f√©minine:`, error);
        
        // Fallback vers configuration standard si erreur
        Speech.speak(correctedText, {
          language: config.lang,
          pitch: config.pitch,
          rate: config.rate,
          onDone: () => onDone?.(),
          onError: (fallbackError) => {
            console.log('‚ùå Erreur fallback f√©minine:', fallbackError);
            onDone?.();
          }
        });
      }
    };
    
    return new Promise<void>((resolve) => {
      speechOptions.onDone = () => {
        onDone?.();
        resolve();
      };
      speechOptions.onError = (error) => {
        console.log('Erreur Speech F√©minine:', error);
        onDone?.();
        resolve();
      };
      
      Speech.speak(correctedText, speechOptions);
    });
    
  } catch (error) {
    console.log('Erreur Speech F√©minine:', error);
    throw new Error('La prononciation audio f√©minine n\'est pas disponible sur cet appareil.');
  }
};

/**
 * Prononce un mot avec voix f√©minine (fonction de compatibilit√©)
 * GARANTIT une voix f√©minine pour TOUTES les langues
 */
export const speakText = async (
  text: string, 
  language: SupportedLanguage = 'fr',
  onStart?: () => void,
  onDone?: () => void
): Promise<void> => {
  console.log(`üé§ speakText appel√©: "${text}" (${language})`);
  
  // Force l'utilisation de la voix f√©minine avec pitch √©lev√©
  return speakWithFeminineVoice(text, language, 'feminine', 'gentle', onStart, onDone);
};

/**
 * Configuration recommand√©e pour l'application √©ducative (F√âMININE)
 */
export const speakEducationalContent = async (
  text: string,
  language: SupportedLanguage = 'fr',
  onStart?: () => void,
  onDone?: () => void
): Promise<void> => {
  // Configuration optimale pour l'√©ducation : f√©minine douce
  return speakWithFeminineVoice(text, language, 'feminine', 'gentle', onStart, onDone);
};

/**
 * Teste la voix f√©minine restaur√©e
 */
export const testFeminineVoice = async () => {
  const testText = "Bonjour! Je suis votre guide f√©minine pour apprendre le shimaor√© et le kibouchi.";
  
  console.log('üß™ Test de la voix f√©minine restaur√©e...');
  
  // Test voix f√©minine douce
  console.log('üë© Test: Voix f√©minine douce');
  await speakWithFeminineVoice(testText, 'fr', 'feminine', 'gentle');
  
  await new Promise(resolve => setTimeout(resolve, 3000)); // Pause
  
  // Test voix f√©minine chaleureuse
  console.log('üë© Test: Voix f√©minine chaleureuse');
  await speakWithFeminineVoice(testText, 'fr', 'feminine', 'warm');
};

// Exporter les fonctions utilitaires pour arr√™ter et v√©rifier la synth√®se
export const stopSpeech = async (): Promise<void> => {
  try {
    const isCurrentlySpeaking = await Speech.isSpeakingAsync();
    if (isCurrentlySpeaking) {
      await Speech.stop();
    }
  } catch (error) {
    console.log('Erreur lors de l\'arr√™t de la synth√®se:', error);
  }
};

export const isSpeechActive = async (): Promise<boolean> => {
  try {
    return await Speech.isSpeakingAsync();
  } catch (error) {
    console.log('Erreur lors de la v√©rification de la synth√®se:', error);
    return false;
  }
};

export interface Word {
  id: string;
  french: string;
  shimaore: string;
  kibouchi: string;
  category: string;
  difficulty?: number;
  image_url?: string;
}

/**
 * Prononce un mot dans toutes les langues avec voix f√©minine
 */
export const speakWordAllLanguages = async (
  word: Word,
  onLanguageStart?: (language: SupportedLanguage) => void,
  onComplete?: () => void
): Promise<void> => {
  try {
    // Fran√ßais
    onLanguageStart?.('fr');
    await speakText(word.french, 'fr');
    await new Promise(resolve => setTimeout(resolve, 800)); // Pause
    
    // Shimaor√©
    onLanguageStart?.('shimaore');
    await speakText(word.shimaore, 'shimaore');
    await new Promise(resolve => setTimeout(resolve, 800)); // Pause
    
    // Kibouchi
    onLanguageStart?.('kibouchi');
    await speakText(word.kibouchi, 'kibouchi');
    
    onComplete?.();
    
  } catch (error) {
    console.log('Erreur lors de la lecture de toutes les langues:', error);
    Alert.alert('Info', 'Probl√®me avec la prononciation audio.');
  }
};